[{"name": "android", "modules": [{"module_name": "android.app_process_starts", "data_objects": [{"name": "android_app_process_starts", "desc": "All app cold starts with information about their cold start reason:\n broadcast, service, activity or provider.", "summary_desc": "All app cold starts with information about their cold start reason:  broadcast, service, activity or provider.", "type": "TABLE", "cols": [{"name": "start_id", "type": "LONG", "desc": "Slice id of the bindApplication slice in the app. Uniquely identifies a process start.", "table": null, "column": null}, {"name": "id", "type": "LONG", "desc": "Slice id of intent received in the app.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Track id of the intent received in the app.", "table": "track", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process receiving the intent.", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "Pid of the process receiving the intent.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of the process receiving the intent.", "table": "process", "column": "id"}, {"name": "intent", "type": "STRING", "desc": "Intent action or component responsible for the cold start.", "table": null, "column": null}, {"name": "reason", "type": "STRING", "desc": "Process start reason: activity, broadcast, service or provider.", "table": null, "column": null}, {"name": "proc_start_ts", "type": "TIMESTAMP", "desc": "Timestamp the process start was dispatched from system_server.", "table": null, "column": null}, {"name": "proc_start_dur", "type": "DURATION", "desc": "Duration to dispatch the process start from system_server.", "table": null, "column": null}, {"name": "bind_app_ts", "type": "TIMESTAMP", "desc": "Timestamp the bindApplication started in the app.", "table": null, "column": null}, {"name": "bind_app_dur", "type": "DURATION", "desc": "Duration to complete bindApplication in the app.", "table": null, "column": null}, {"name": "intent_ts", "type": "TIMESTAMP", "desc": "Timestamp the Intent was received in the app.", "table": null, "column": null}, {"name": "intent_dur", "type": "DURATION", "desc": "Duration to handle intent in the app.", "table": null, "column": null}, {"name": "total_dur", "type": "LONG", "desc": "Total duration from proc_start dispatched to intent completed.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.auto.multiuser", "data_objects": [{"name": "android_auto_multiuser_timing", "desc": "Time elapsed between the latest user start\n and the specific end event\n like package startup(ex carlauncher) or previous user stop.", "summary_desc": "Time elapsed between the latest user start  and the specific end event  like package startup(ex carlauncher) or previous user stop.", "type": "TABLE", "cols": [{"name": "event_start_user_id", "type": "STRING", "desc": "Id of the started android user", "table": null, "column": null}, {"name": "event_start_time", "type": "LONG", "desc": "Start event time", "table": null, "column": null}, {"name": "event_end_time", "type": "LONG", "desc": "End event time", "table": null, "column": null}, {"name": "event_end_name", "type": "STRING", "desc": "End event name", "table": null, "column": null}, {"name": "event_start_name", "type": "STRING", "desc": "Start event name", "table": null, "column": null}, {"name": "duration", "type": "LONG", "desc": "User switch duration from start event to end event", "table": null, "column": null}]}, {"name": "android_auto_multiuser_timing_with_previous_user_resource_usage", "desc": "This table extends `android_auto_multiuser_timing` table with previous user resource usage.", "summary_desc": "This table extends `android_auto_multiuser_timing` table with previous user resource usage.", "type": "VIEW", "cols": [{"name": "event_start_user_id", "type": "STRING", "desc": "Start user id", "table": null, "column": null}, {"name": "event_start_time", "type": "LONG", "desc": "Start event time", "table": null, "column": null}, {"name": "event_end_time", "type": "LONG", "desc": "End event time", "table": null, "column": null}, {"name": "event_end_name", "type": "STRING", "desc": "End event name", "table": null, "column": null}, {"name": "event_start_name", "type": "STRING", "desc": "Start event name", "table": null, "column": null}, {"name": "duration", "type": "LONG", "desc": "User switch duration from start event to end event", "table": null, "column": null}, {"name": "user_id", "type": "LONG", "desc": "User id", "table": null, "column": null}, {"name": "total_cpu_time", "type": "LONG", "desc": "Total CPU time for a user", "table": null, "column": null}, {"name": "total_memory_usage_kb", "type": "LONG", "desc": "Total memory user for a user", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.battery.charging_states", "data_objects": [{"name": "android_charging_states", "desc": "Device charging states.", "summary_desc": "Device charging states.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Alias of counter.id if a slice with charging state exists otherwise there will be a single row where id = 1.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp at which the device charging state began.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the device charging state.", "table": null, "column": null}, {"name": "short_charging_state", "type": "STRING", "desc": "One of: charging, discharging, not_charging, full, unknown.", "table": null, "column": null}, {"name": "charging_state", "type": "STRING", "desc": "Device charging state, one of: Charging, Discharging, Not charging (when the charger is present but battery is not charging), Full, Unknown", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.battery.doze", "data_objects": [{"name": "android_light_idle_state", "desc": "Light idle states. This is the state machine that quickly detects the\n device is unused and restricts background activity.\n See https://developer.android.com/training/monitoring-device-state/doze-standby", "summary_desc": "Light idle states", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "ID", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration.", "table": null, "column": null}, {"name": "light_idle_state", "type": "STRING", "desc": "Description of the light idle state.", "table": null, "column": null}]}, {"name": "android_deep_idle_state", "desc": "Deep idle states. This is the state machine that more slowly detects deeper\n levels of device unuse and restricts background activity further.\n See https://developer.android.com/training/monitoring-device-state/doze-standby", "summary_desc": "Deep idle states", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "ID", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration.", "table": null, "column": null}, {"name": "deep_idle_state", "type": "STRING", "desc": "Description of the deep idle state.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.battery", "data_objects": [{"name": "android_battery_charge", "desc": "Battery charge at timestamp.", "summary_desc": "Battery charge at timestamp.", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "current_avg_ua", "type": "DOUBLE", "desc": "Current average micro ampers.", "table": null, "column": null}, {"name": "capacity_percent", "type": "DOUBLE", "desc": "Current capacity percentage.", "table": null, "column": null}, {"name": "charge_uah", "type": "DOUBLE", "desc": "Current charge in micro ampers.", "table": null, "column": null}, {"name": "current_ua", "type": "DOUBLE", "desc": "Current micro ampers.", "table": null, "column": null}, {"name": "voltage_uv", "type": "DOUBLE", "desc": "Current voltage in micro volts.", "table": null, "column": null}, {"name": "energy_counter_uwh", "type": "DOUBLE", "desc": "Current energy counter in microwatt-hours(\u00b5Wh).", "table": null, "column": null}, {"name": "power_mw", "type": "DOUBLE", "desc": "Current power in milliwatts.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.battery_stats", "data_objects": [{"name": "android_battery_stats_state", "desc": "View of human readable battery stats counter-based states. These are recorded\n by BatteryStats as a bitmap where each 'category' has a unique value at any\n given time.", "summary_desc": "View of human readable battery stats counter-based states", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the new barrary state.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration the state was active, -1 for incomplete slices.", "table": null, "column": null}, {"name": "safe_dur", "type": "DURATION", "desc": "The same as `dur`, but extends to trace end for incomplete slices.", "table": null, "column": null}, {"name": "track_name", "type": "STRING", "desc": "The name of the counter track.", "table": null, "column": null}, {"name": "value", "type": "LONG", "desc": "The counter value as a number.", "table": null, "column": null}, {"name": "value_name", "type": "STRING", "desc": "The counter value as a human-readable string.", "table": null, "column": null}]}, {"name": "android_battery_stats_event_slices", "desc": "View of slices derived from battery_stats events. Battery stats records all\n events as instants, however some may indicate whether something started or\n stopped with a '+' or '-' prefix. Events such as jobs, top apps, foreground\n apps or long wakes include these details and allow drawing slices between\n instant events found in a trace.\n\n For example, we may see an event like the following on 'battery_stats.top':\n\n     -top=10215:\"com.google.android.apps.nexuslauncher\"\n\n This view will find the associated start ('+top') with the matching suffix\n (everything after the '=') to construct a slice. It computes the timestamp\n and duration from the events and extract the details as follows:\n\n     track_name='battery_stats.top'\n     str_value='com.google.android.apps.nexuslauncher'\n     int_value=10215", "summary_desc": "View of slices derived from battery_stats events", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of a new battery state.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration the state was active, -1 for incomplete slices.", "table": null, "column": null}, {"name": "safe_dur", "type": "DURATION", "desc": "The same as `dur`, but extends to trace end for incomplete slices.", "table": null, "column": null}, {"name": "track_name", "type": "STRING", "desc": "The name of the counter track.", "table": null, "column": null}, {"name": "str_value", "type": "STRING", "desc": "String value.", "table": null, "column": null}, {"name": "int_value", "type": "LONG", "desc": "Int value.", "table": null, "column": null}]}], "functions": [{"name": "android_battery_stats_counter_to_string", "desc": "Converts a battery_stats counter value to human readable string.", "summary_desc": "Converts a battery_stats counter value to human readable string.", "args": [{"name": "track", "type": "STRING", "desc": "The counter track name (e.g. 'battery_stats.audio').", "table": null, "column": null}, {"name": "value", "type": "DOUBLE", "desc": "The counter value.", "table": null, "column": null}], "return_type": "STRING", "return_desc": "The human-readable name for the counter value."}], "table_functions": [], "macros": []}, {"module_name": "android.binder", "data_objects": [{"name": "android_binder_metrics_by_process", "desc": "Count Binder transactions per process.", "summary_desc": "Count Binder transactions per process.", "type": "VIEW", "cols": [{"name": "process_name", "type": "STRING", "desc": "Name of the process that started the binder transaction.", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "PID of the process that started the binder transaction.", "table": null, "column": null}, {"name": "slice_name", "type": "STRING", "desc": "Name of the slice with binder transaction.", "table": null, "column": null}, {"name": "event_count", "type": "LONG", "desc": "Number of binder transactions in process in slice.", "table": null, "column": null}]}, {"name": "android_sync_binder_thread_state_by_txn", "desc": "Aggregated thread_states on the client and server side per binder txn\n This builds on the data from |_sync_binder_metrics_by_txn| and\n for each end (client and server) of the transaction, it returns\n the aggregated sum of all the thread state durations.\n The |thread_state_type| column represents whether a given 'aggregated thread_state'\n row is on the client or server side. 'binder_txn' is client side and 'binder_reply'\n is server side.", "summary_desc": "Aggregated thread_states on the client and server side per binder txn  This builds on the data from |_sync_binder_metrics_by_txn| and  for each end (client and server) of the transaction, it returns  the aggregated sum of all the thread state durations.  The |thread_state_type| column represents whether a given 'aggregated thread_state'  row is on the client or server side", "type": "VIEW", "cols": [{"name": "binder_txn_id", "type": "LONG", "desc": "slice id of the binder txn", "table": null, "column": null}, {"name": "client_ts", "type": "TIMESTAMP", "desc": "Client timestamp", "table": null, "column": null}, {"name": "client_tid", "type": "LONG", "desc": "Client tid", "table": null, "column": null}, {"name": "binder_reply_id", "type": "LONG", "desc": "slice id of the binder reply", "table": null, "column": null}, {"name": "server_ts", "type": "TIMESTAMP", "desc": "Server timestamp", "table": null, "column": null}, {"name": "server_tid", "type": "LONG", "desc": "Server tid", "table": null, "column": null}, {"name": "thread_state_type", "type": "STRING", "desc": "whether thread state is on the txn or reply side", "table": null, "column": null}, {"name": "thread_state", "type": "STRING", "desc": "a thread_state that occurred in the txn", "table": null, "column": null}, {"name": "thread_state_dur", "type": "DURATION", "desc": "aggregated dur of the |thread_state| in the txn", "table": null, "column": null}, {"name": "thread_state_count", "type": "LONG", "desc": "aggregated count of the |thread_state| in the txn", "table": null, "column": null}]}, {"name": "android_sync_binder_blocked_functions_by_txn", "desc": "Aggregated blocked_functions on the client and server side per binder txn\n This builds on the data from |_sync_binder_metrics_by_txn| and\n for each end (client and server) of the transaction, it returns\n the aggregated sum of all the kernel blocked function durations.\n The |thread_state_type| column represents whether a given 'aggregated blocked_function'\n row is on the client or server side. 'binder_txn' is client side and 'binder_reply'\n is server side.", "summary_desc": "Aggregated blocked_functions on the client and server side per binder txn  This builds on the data from |_sync_binder_metrics_by_txn| and  for each end (client and server) of the transaction, it returns  the aggregated sum of all the kernel blocked function durations.  The |thread_state_type| column represents whether a given 'aggregated blocked_function'  row is on the client or server side", "type": "VIEW", "cols": [{"name": "binder_txn_id", "type": "LONG", "desc": "slice id of the binder txn", "table": null, "column": null}, {"name": "client_ts", "type": "TIMESTAMP", "desc": "Client ts", "table": null, "column": null}, {"name": "client_tid", "type": "LONG", "desc": "Client tid", "table": null, "column": null}, {"name": "binder_reply_id", "type": "LONG", "desc": "slice id of the binder reply", "table": null, "column": null}, {"name": "server_ts", "type": "TIMESTAMP", "desc": "Server ts", "table": null, "column": null}, {"name": "server_tid", "type": "LONG", "desc": "Server tid", "table": null, "column": null}, {"name": "thread_state_type", "type": "STRING", "desc": "whether thread state is on the txn or reply side", "table": null, "column": null}, {"name": "blocked_function", "type": "STRING", "desc": "blocked kernel function in a thread state", "table": null, "column": null}, {"name": "blocked_function_dur", "type": "DURATION", "desc": "aggregated dur of the |blocked_function| in the txn", "table": null, "column": null}, {"name": "blocked_function_count", "type": "LONG", "desc": "aggregated count of the |blocked_function| in the txn", "table": null, "column": null}]}, {"name": "android_binder_txns", "desc": "Breakdown binder transactions per txn.\n It returns data about the client and server ends of every binder transaction async.", "summary_desc": "Breakdown binder transactions per txn.  It returns data about the client and server ends of every binder transaction async.", "type": "TABLE", "cols": [{"name": "aidl_name", "type": "STRING", "desc": "Fully qualified name of the binder endpoint if existing.", "table": null, "column": null}, {"name": "interface", "type": "STRING", "desc": "Interface of the binder endpoint if existing.", "table": null, "column": null}, {"name": "method_name", "type": "STRING", "desc": "Method name of the binder endpoint if existing.", "table": null, "column": null}, {"name": "aidl_ts", "type": "TIMESTAMP", "desc": "Timestamp the binder interface name was emitted. Proxy to 'ts' and 'dur' for async txns.", "table": null, "column": null}, {"name": "aidl_dur", "type": "DURATION", "desc": "Duration of the binder interface name. Proxy to 'ts' and 'dur' for async txns.", "table": null, "column": null}, {"name": "binder_txn_id", "type": "JOINID(slice.id)", "desc": "Slice id of the binder txn.", "table": "slice", "column": "id"}, {"name": "client_process", "type": "STRING", "desc": "Name of the client process.", "table": null, "column": null}, {"name": "client_thread", "type": "STRING", "desc": "Name of the client thread.", "table": null, "column": null}, {"name": "client_upid", "type": "JOINID(process.id)", "desc": "Upid of the client process.", "table": "process", "column": "id"}, {"name": "client_utid", "type": "JOINID(thread.id)", "desc": "Utid of the client thread.", "table": "thread", "column": "id"}, {"name": "client_tid", "type": "LONG", "desc": "Tid of the client thread.", "table": null, "column": null}, {"name": "client_pid", "type": "LONG", "desc": "Pid of the client thread.", "table": null, "column": null}, {"name": "is_main_thread", "type": "BOOL", "desc": "Whether the txn was initiated from the main thread of the client process.", "table": null, "column": null}, {"name": "client_ts", "type": "TIMESTAMP", "desc": "Timestamp of the client txn.", "table": null, "column": null}, {"name": "client_dur", "type": "DURATION", "desc": "Wall clock dur of the client txn.", "table": null, "column": null}, {"name": "binder_reply_id", "type": "JOINID(slice.id)", "desc": "Slice id of the binder reply.", "table": "slice", "column": "id"}, {"name": "server_process", "type": "STRING", "desc": "Name of the server process.", "table": null, "column": null}, {"name": "server_thread", "type": "STRING", "desc": "Name of the server thread.", "table": null, "column": null}, {"name": "server_upid", "type": "JOINID(process.id)", "desc": "Upid of the server process.", "table": "process", "column": "id"}, {"name": "server_utid", "type": "JOINID(thread.id)", "desc": "Utid of the server thread.", "table": "thread", "column": "id"}, {"name": "server_tid", "type": "LONG", "desc": "Tid of the server thread.", "table": null, "column": null}, {"name": "server_pid", "type": "LONG", "desc": "Pid of the server thread.", "table": null, "column": null}, {"name": "server_ts", "type": "TIMESTAMP", "desc": "Timestamp of the server txn.", "table": null, "column": null}, {"name": "server_dur", "type": "DURATION", "desc": "Wall clock dur of the server txn.", "table": null, "column": null}, {"name": "client_oom_score", "type": "LONG", "desc": "Oom score of the client process at the start of the txn.", "table": null, "column": null}, {"name": "server_oom_score", "type": "LONG", "desc": "Oom score of the server process at the start of the reply.", "table": null, "column": null}, {"name": "is_sync", "type": "BOOL", "desc": "Whether the txn is synchronous or async (oneway).", "table": null, "column": null}, {"name": "client_monotonic_dur", "type": "DURATION", "desc": "Monotonic clock dur of the client txn.", "table": null, "column": null}, {"name": "server_monotonic_dur", "type": "DURATION", "desc": "Monotonic clock dur of the server txn.", "table": null, "column": null}, {"name": "client_package_version_code", "type": "LONG", "desc": "Client package version_code.", "table": null, "column": null}, {"name": "server_package_version_code", "type": "LONG", "desc": "Server package version_code.", "table": null, "column": null}, {"name": "is_client_package_debuggable", "type": "BOOL", "desc": "Whether client package is debuggable.", "table": null, "column": null}, {"name": "is_server_package_debuggable", "type": "BOOL", "desc": "Whether server package is debuggable.", "table": null, "column": null}]}], "functions": [], "table_functions": [{"name": "android_binder_outgoing_graph", "desc": "Returns a DAG of all outgoing binder txns from a process.\n The roots of the graph are the threads making the txns and the graph flows from:\n thread -> server_process -> AIDL interface -> AIDL method.\n The weights of each node represent the wall execution time in the server_process.", "summary_desc": "Returns a DAG of all outgoing binder txns from a process.  The roots of the graph are the threads making the txns and the graph flows from:  thread -> server_process -> AIDL interface -> AIDL method.  The weights of each node represent the wall execution time in the server_process.", "args": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of process to generate an outgoing graph for.", "table": "process", "column": "id"}], "cols": [{"name": "pprof", "type": "BYTES", "table": null, "column": null, "desc": "Pprof of outgoing binder txns."}]}, {"name": "android_binder_incoming_graph", "desc": "Returns a DAG of all incoming binder txns from a process.\n The roots of the graph are the clients making the txns and the graph flows from:\n client_process -> AIDL interface -> AIDL method.\n The weights of each node represent the wall execution time in the server_process.", "summary_desc": "Returns a DAG of all incoming binder txns from a process.  The roots of the graph are the clients making the txns and the graph flows from:  client_process -> AIDL interface -> AIDL method.  The weights of each node represent the wall execution time in the server_process.", "args": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of process to generate an incoming graph for.", "table": "process", "column": "id"}], "cols": [{"name": "pprof", "type": "BYTES", "table": null, "column": null, "desc": "Pprof of incoming binder txns."}]}, {"name": "android_binder_graph", "desc": "Returns a graph of all binder txns in a trace.\n The nodes are client_process and server_process.\n The weights of each node represent the wall execution time in the server_process.", "summary_desc": "Returns a graph of all binder txns in a trace.  The nodes are client_process and server_process.  The weights of each node represent the wall execution time in the server_process.", "args": [{"name": "min_client_oom_score", "type": "LONG", "desc": "Matches txns from client_processes greater than or equal to the OOM score.", "table": null, "column": null}, {"name": "max_client_oom_score", "type": "LONG", "desc": "Matches txns from client_processes less than or equal to the OOM score.", "table": null, "column": null}, {"name": "min_server_oom_score", "type": "LONG", "desc": "Matches txns to server_processes greater than or equal to the OOM score.", "table": null, "column": null}, {"name": "max_server_oom_score", "type": "LONG", "desc": "Matches txns to server_processes less than or equal to the OOM score.", "table": null, "column": null}], "cols": [{"name": "pprof", "type": "BYTES", "table": null, "column": null, "desc": "Pprof of binder txns."}]}], "macros": []}, {"module_name": "android.binder_breakdown", "data_objects": [{"name": "android_binder_server_breakdown", "desc": "Server side binder breakdowns per transactions per txn.", "summary_desc": "Server side binder breakdowns per transactions per txn.", "type": "TABLE", "cols": [{"name": "binder_txn_id", "type": "JOINID(slice.id)", "desc": "Client side id of the binder txn.", "table": "slice", "column": "id"}, {"name": "binder_reply_id", "type": "JOINID(slice.id)", "desc": "Server side id of the binder txn.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of an exclusive interval during the binder reply with a single reason.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of an exclusive interval during the binder reply with a single reason.", "table": null, "column": null}, {"name": "reason", "type": "STRING", "desc": "Cause of delay during an exclusive interval of the binder reply.", "table": null, "column": null}]}, {"name": "android_binder_client_breakdown", "desc": "Client side binder breakdowns per transactions per txn.", "summary_desc": "Client side binder breakdowns per transactions per txn.", "type": "TABLE", "cols": [{"name": "binder_txn_id", "type": "JOINID(slice.id)", "desc": "Client side id of the binder txn.", "table": "slice", "column": "id"}, {"name": "binder_reply_id", "type": "JOINID(slice.id)", "desc": "Server side id of the binder txn.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of an exclusive interval during the binder txn with a single latency reason.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of an exclusive interval during the binder txn with a single latency reason.", "table": null, "column": null}, {"name": "reason", "type": "STRING", "desc": "Cause of delay during an exclusive interval of the binder txn.", "table": null, "column": null}]}, {"name": "android_binder_client_server_breakdown", "desc": "Combined client and server side binder breakdowns per transaction.", "summary_desc": "Combined client and server side binder breakdowns per transaction.", "type": "TABLE", "cols": [{"name": "binder_txn_id", "type": "JOINID(slice.id)", "desc": "Client side id of the binder txn.", "table": "slice", "column": "id"}, {"name": "binder_reply_id", "type": "JOINID(slice.id)", "desc": "Server side id of the binder txn.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of an exclusive interval during the binder txn with a single latency reason.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of an exclusive interval during the binder txn with a single latency reason.", "table": null, "column": null}, {"name": "server_reason", "type": "STRING", "desc": "The server side component of this interval's binder latency reason, if any.", "table": null, "column": null}, {"name": "client_reason", "type": "STRING", "desc": "The client side component of this interval's binder latency reason.", "table": null, "column": null}, {"name": "reason", "type": "STRING", "desc": "Combined reason indicating whether latency came from client or server side.", "table": null, "column": null}, {"name": "reason_type", "type": "STRING", "desc": "Whether the latency is due to the client or server.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.bitmaps", "data_objects": [{"name": "android_bitmap_memory", "desc": "Provides a timeseries of \"Bitmap Memory\" counter for each process, which\n is useful for retrieving the total memory used by bitmaps by an application over time.\n\n To populate this table, tracing must be enabled with the \"view\" atrace\n category.", "summary_desc": "Provides a timeseries of \"Bitmap Memory\" counter for each process, which  is useful for retrieving the total memory used by bitmaps by an application over time.   To populate this table, tracing must be enabled with the \"view\" atrace  category.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(counter.id)", "desc": "ID of the row in the underlying counter table.", "table": "counter", "column": "id"}, {"name": "upid", "type": "JOINID(process.upid)", "desc": "Upid of the process.", "table": "process", "column": "upid"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the interval.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(counter.track_id)", "desc": "Duration of the interval.", "table": "counter", "column": "track_id"}, {"name": "value", "type": "LONG", "desc": "Memory consumed by bitmaps in bytes.", "table": null, "column": null}]}, {"name": "android_bitmap_count", "desc": "Provides a timeseries of \"Bitmap Count\" counter for each process, which\n is useful for retrieving the number of bitmaps used by an application over time.\n\n To populate this table, tracing must be enabled with the \"view\" atrace\n category.", "summary_desc": "Provides a timeseries of \"Bitmap Count\" counter for each process, which  is useful for retrieving the number of bitmaps used by an application over time.   To populate this table, tracing must be enabled with the \"view\" atrace  category.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(counter.id)", "desc": "ID of the row in the underlying counter table.", "table": "counter", "column": "id"}, {"name": "upid", "type": "JOINID(process.upid)", "desc": "Upid of the process.", "table": "process", "column": "upid"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the interval.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(counter.track_id)", "desc": "Duration of the interval.", "table": "counter", "column": "track_id"}, {"name": "value", "type": "LONG", "desc": "Number of allocated bitmaps.", "table": null, "column": null}]}, {"name": "android_bitmap_counters_per_process", "desc": "Provides a timeseries of bitmap-related counters for each process, which\n is useful for understanding an application's bitmap usage over time.\n\n To populate this table, tracing must be enabled with the \"view\" atrace\n category.", "summary_desc": "Provides a timeseries of bitmap-related counters for each process, which  is useful for understanding an application's bitmap usage over time.   To populate this table, tracing must be enabled with the \"view\" atrace  category.", "type": "TABLE", "cols": [{"name": "upid", "type": "JOINID(process.upid)", "desc": "Upid of the process.", "table": "process", "column": "upid"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the interval.", "table": null, "column": null}, {"name": "bitmap_memory", "type": "LONG", "desc": "Memory consumed by bitmaps in bytes.", "table": null, "column": null}, {"name": "bitmap_count", "type": "LONG", "desc": "Number of allocated bitmaps.", "table": null, "column": null}, {"name": "bitmap_memory_id", "type": "JOINID(counter.id)", "desc": "ID of the row in the underlying counter table.", "table": "counter", "column": "id"}, {"name": "bitmap_count_id", "type": "JOINID(counter.id)", "desc": "ID of the row in the underlying counter table.", "table": "counter", "column": "id"}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.broadcasts", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.cpu.cluster_type", "data_objects": [{"name": "android_cpu_cluster_mapping", "desc": "Stores the mapping of a cpu to its cluster type - e.g. little, medium, big.\n This cluster type is determined by initially using cpu_capacity from sysfs\n and grouping clusters with identical capacities, ordered by size.\n In the case that capacities are not present, max frequency is used instead.\n If nothing is avaiable, NULL is returned.", "summary_desc": "Stores the mapping of a cpu to its cluster type - e.g", "type": "TABLE", "cols": [{"name": "ucpu", "type": "LONG", "desc": "Alias of `cpu.ucpu`.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "Alias of `cpu.cpu`.", "table": null, "column": null}, {"name": "cluster_type", "type": "STRING", "desc": "The cluster type of the CPU.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.cpu.cpu_per_uid", "data_objects": [{"name": "android_cpu_per_uid_track", "desc": "Table of tracks for CPU-per-UID data. Each row represents one UID / cluster\n combination.", "summary_desc": "Table of tracks for CPU-per-UID data", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "ID of the track; can be joined with cpu_per_uid_counter.", "table": null, "column": null}, {"name": "uid", "type": "LONG", "desc": "UID doing the work.", "table": null, "column": null}, {"name": "cluster", "type": "LONG", "desc": "Cluster ID for the track, starting from 0, typically with larger numbers meaning larger cores.", "table": null, "column": null}, {"name": "package_name", "type": "STRING", "desc": "A package name for the UID. If there are multiple for a UID, one is chosen arbitrarily. UIDs below 10000 always have null package name.", "table": null, "column": null}]}, {"name": "android_cpu_per_uid_counter", "desc": "Table of counters for CPU-per-UID data. Each row represents one instant in\n time for one UID / cluster.", "summary_desc": "Table of counters for CPU-per-UID data", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "ID for the row.", "table": null, "column": null}, {"name": "ts", "type": "LONG", "desc": "Timestamp for the row.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Time to the next measurement for the UID / cluster combination.", "table": null, "column": null}, {"name": "track_id", "type": "LONG", "desc": "Associated track.", "table": null, "column": null}, {"name": "diff_ms", "type": "LONG", "desc": "CPU time measurement for this time period (milliseconds).", "table": null, "column": null}, {"name": "cpu_ratio", "type": "DOUBLE", "desc": "Inferred CPU use value for the period where 1.0 means a single core at 100% utilisation.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.critical_blocking_calls", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.cujs.sysui_cuj_counters", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.cujs.sysui_cujs", "data_objects": [{"name": "android_sysui_jank_cujs", "desc": "Table tracking all jank CUJs information.", "summary_desc": "Table tracking all jank CUJs information.", "type": "TABLE", "cols": [{"name": "cuj_id", "type": "LONG", "desc": "Unique incremental ID for each CUJ.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "process id.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "process name.", "table": null, "column": null}, {"name": "cuj_slice_name", "type": "STRING", "desc": "Name of the CUJ slice.", "table": null, "column": null}, {"name": "cuj_name", "type": "STRING", "desc": "Name of the CUJ without the 'J<' prefix.", "table": null, "column": null}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Id of the CUJ slice in perfetto. Keeping the slice id column as part of this table as provision to lookup the actual CUJ slice ts and dur. The ts and dur in this table might differ from the slice duration, as they are associated with start and end frame corresponding to the CUJ.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the CUJ. Start of the CUJ as defined by the start of the first overlapping expected frame.", "table": null, "column": null}, {"name": "ts_end", "type": "TIMESTAMP", "desc": "End timestamp of the CUJ. Calculated as the end timestamp of the last actual frame overlapping with the CUJ.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the CUJ calculated based on the ts and ts_end values.", "table": null, "column": null}, {"name": "state", "type": "STRING", "desc": "State of the CUJ. One of \"completed\", \"cancelled\" or NULL. NULL in cases where the FT#cancel or FT#end instant event is not present for the CUJ.", "table": null, "column": null}, {"name": "ui_thread", "type": "JOINID(thread.id)", "desc": "thread id of the UI thread.", "table": "thread", "column": "id"}, {"name": "layer_id", "type": "LONG", "desc": "layer id associated with the actual frame.", "table": null, "column": null}, {"name": "begin_vsync", "type": "LONG", "desc": "vysnc id of the first frame that falls within the CUJ boundary.", "table": null, "column": null}, {"name": "end_vsync", "type": "LONG", "desc": "vysnc id of the last frame that falls within the CUJ boundary.", "table": null, "column": null}]}, {"name": "android_sysui_latency_cujs", "desc": "Table tracking all latency CUJs information.", "summary_desc": "Table tracking all latency CUJs information.", "type": "TABLE", "cols": [{"name": "cuj_id", "type": "LONG", "desc": "Unique incremental ID for each CUJ.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "process id.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "process name.", "table": null, "column": null}, {"name": "cuj_slice_name", "type": "STRING", "desc": "Name of the CUJ slice.", "table": null, "column": null}, {"name": "cuj_name", "type": "STRING", "desc": "Name of the CUJ without the 'L<' prefix.", "table": null, "column": null}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Id of the CUJ slice in perfetto. Keeping the slice id column as part of this table as provision to lookup the actual CUJ slice ts and dur. The ts and dur in this table might differ from the slice duration, as they are associated with start and end frame corresponding to the CUJ.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the CUJ calculated as the start of the CUJ slice in trace.", "table": null, "column": null}, {"name": "ts_end", "type": "TIMESTAMP", "desc": "End timestamp of the CUJ calculated as the end timestamp of the CUJ slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the CUJ calculated based on the ts and ts_end values.", "table": null, "column": null}, {"name": "state", "type": "STRING", "desc": "State of the CUJ whether it was completed/cancelled.", "table": null, "column": null}]}, {"name": "android_jank_latency_cujs", "desc": "Table tracking all jank/latency CUJs information.", "summary_desc": "Table tracking all jank/latency CUJs information.", "type": "TABLE", "cols": [{"name": "cuj_id", "type": "LONG", "desc": "Unique incremental ID for each CUJ.", "table": null, "column": null}, {"name": "id", "type": "LONG", "desc": "An alias for cuj_id for compatibility purposes.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "process id.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "process name.", "table": null, "column": null}, {"name": "cuj_slice_name", "type": "STRING", "desc": "Name of the CUJ slice.", "table": null, "column": null}, {"name": "cuj_name", "type": "STRING", "desc": "Name of the CUJ without the 'J<' prefix.", "table": null, "column": null}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Id of the CUJ slice in perfetto. Keeping the slice id column as part of this table as provision to lookup the actual CUJ slice ts and dur. The ts and dur in this table might differ from the slice duration, as they are associated with start and end frame corresponding to the CUJ.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the CUJ. Start of the CUJ as defined by the start of the first overlapping expected frame.", "table": null, "column": null}, {"name": "ts_end", "type": "TIMESTAMP", "desc": "End timestamp of the CUJ. Calculated as the end timestamp of the last actual frame overlapping with the CUJ.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the CUJ calculated based on the ts and ts_end values.", "table": null, "column": null}, {"name": "state", "type": "STRING", "desc": "State of the CUJ. One of \"completed\", \"cancelled\" or NULL. NULL in cases where the FT#cancel or FT#end instant event is not present for the CUJ.", "table": null, "column": null}, {"name": "ui_thread", "type": "JOINID(thread.id)", "desc": "thread id of the UI thread. In case of latency CUJs, this will always be the main thread of the process.", "table": "thread", "column": "id"}, {"name": "layer_id", "type": "LONG", "desc": "layer id associated with the actual frame.", "table": null, "column": null}, {"name": "begin_vsync", "type": "LONG", "desc": "vysnc id of the first frame that falls within the CUJ boundary.", "table": null, "column": null}, {"name": "end_vsync", "type": "LONG", "desc": "vysnc id of the last frame that falls within the CUJ boundary.", "table": null, "column": null}, {"name": "cuj_type", "type": "STRING", "desc": "Type of CUJ, i.e. jank or latency.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.desktop_mode", "data_objects": [{"name": "android_desktop_mode_windows", "desc": "Desktop Windows with durations they were open.", "summary_desc": "Desktop Windows with durations they were open.", "type": "TABLE", "cols": [{"name": "raw_add_ts", "type": "TIMESTAMP", "desc": "Window add timestamp; NULL if no add event in the trace.", "table": null, "column": null}, {"name": "raw_remove_ts", "type": "TIMESTAMP", "desc": "Window remove timestamp; NULL if no remove event in the trace.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp that the window was added; or trace_start() if no add event in the trace.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Furation the window was open; or until trace_end() if no remove event in the trace.", "table": null, "column": null}, {"name": "instance_id", "type": "LONG", "desc": "Desktop Window instance ID - unique per window.", "table": null, "column": null}, {"name": "uid", "type": "LONG", "desc": "UID of the app running in the window.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.device", "data_objects": [{"name": "android_device_name", "desc": "Extract name of the device based on metadata from the trace.", "summary_desc": "Extract name of the device based on metadata from the trace.", "type": "TABLE", "cols": [{"name": "name", "type": "STRING", "desc": "Device name.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.dumpsys.show_map", "data_objects": [{"name": "android_dumpsys_show_map", "desc": "This table represents memory mapping information from /proc/[pid]/smaps\n All memory values are in kilobytes (KB)", "summary_desc": "This table represents memory mapping information from /proc/[pid]/smaps  All memory values are in kilobytes (KB)", "type": "TABLE", "cols": [{"name": "process_name", "type": "STRING", "desc": "Name of the process.", "table": null, "column": null}, {"name": "pid", "type": "JOINID(process.pid)", "desc": "Process ID.", "table": "process", "column": "pid"}, {"name": "vss_kb", "type": "LONG", "desc": "Virtual Set Size in kilobytes - total virtual memory mapped by the process.", "table": null, "column": null}, {"name": "rss_kb", "type": "LONG", "desc": "Resident Set Size in kilobytes - actual physical memory used by the process.", "table": null, "column": null}, {"name": "pss_kb", "type": "LONG", "desc": "Proportional Set Size in kilobytes - amount of memory shared with other processes.", "table": null, "column": null}, {"name": "shared_clean_kb", "type": "LONG", "desc": "Clean shared pages in kilobytes - shared pages that haven't been modified.", "table": null, "column": null}, {"name": "shared_dirty_kb", "type": "LONG", "desc": "Dirty shared pages in kilobytes - shared pages that have been modified.", "table": null, "column": null}, {"name": "private_clean_kb", "type": "LONG", "desc": "Clean private pages in kilobytes - private pages that haven't been modified.", "table": null, "column": null}, {"name": "private_dirty_kb", "type": "LONG", "desc": "Dirty private pages in kilobytes - private pages that have been modified.", "table": null, "column": null}, {"name": "swap_kb", "type": "LONG", "desc": "Swap memory in kilobytes - memory that has been moved to swap space.", "table": null, "column": null}, {"name": "swap_pss_kb", "type": "LONG", "desc": "Proportional Swap Size in kilobytes - swap shared with other processes.", "table": null, "column": null}, {"name": "anon_huge_pages_kb", "type": "LONG", "desc": "Anonymous huge pages in kilobytes - large anonymous memory regions.", "table": null, "column": null}, {"name": "shmem_pmd_mapped_kb", "type": "LONG", "desc": "Shared Memory PMD mapped in kilobytes - page middle directory mapped shared memory.", "table": null, "column": null}, {"name": "file_pmd_mapped_kb", "type": "LONG", "desc": "File PMD mapped in kilobytes - page middle directory mapped file memory.", "table": null, "column": null}, {"name": "shared_huge_tlb_kb", "type": "LONG", "desc": "Shared huge TLB in kilobytes - shared huge page table entries.", "table": null, "column": null}, {"name": "private_hugetlb_kb", "type": "LONG", "desc": "Private huge TLB in kilobytes - private huge page table entries.", "table": null, "column": null}, {"name": "locked_kb", "type": "LONG", "desc": "Locked memory in kilobytes - memory that can't be swapped out.", "table": null, "column": null}, {"name": "mapping_count", "type": "LONG", "desc": "Number of mappings of the object.", "table": null, "column": null}, {"name": "mapped_object", "type": "STRING", "desc": "Path to the mapped object (file, library, etc.).", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.dvfs", "data_objects": [{"name": "android_dvfs_counters", "desc": "Dvfs counter with duration.", "summary_desc": "Dvfs counter with duration.", "type": "VIEW", "cols": [{"name": "name", "type": "STRING", "desc": "Counter name.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when counter value changed.", "table": null, "column": null}, {"name": "value", "type": "DOUBLE", "desc": "Counter value.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Counter duration.", "table": null, "column": null}]}, {"name": "android_dvfs_counter_stats", "desc": "Aggregates dvfs counter slice for statistic.", "summary_desc": "Aggregates dvfs counter slice for statistic.", "type": "TABLE", "cols": [{"name": "name", "type": "STRING", "desc": "Counter name on which all the other values are aggregated on.", "table": null, "column": null}, {"name": "max", "type": "DOUBLE", "desc": "Max of all counter values for the counter name.", "table": null, "column": null}, {"name": "min", "type": "DOUBLE", "desc": "Min of all counter values for the counter name.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration between the first and last counter value for the counter name.", "table": null, "column": null}, {"name": "wgt_avg", "type": "DOUBLE", "desc": "Weighted avergate of all the counter values for the counter name.", "table": null, "column": null}]}, {"name": "android_dvfs_counter_residency", "desc": "Aggregates dvfs counter slice for residency", "summary_desc": "Aggregates dvfs counter slice for residency", "type": "VIEW", "cols": [{"name": "name", "type": "STRING", "desc": "Counter name.", "table": null, "column": null}, {"name": "value", "type": "DOUBLE", "desc": "Counter value.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Counter duration.", "table": null, "column": null}, {"name": "pct", "type": "DOUBLE", "desc": "Counter duration as a percentage of total duration.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.entity_state_residency", "data_objects": [{"name": "android_entity_state_residency", "desc": "Android entity state residency samples.\n For details see: https://perfetto.dev/docs/reference/trace-config-proto#AndroidPowerConfig", "summary_desc": "Android entity state residency samples.  For details see: https://perfetto.dev/docs/reference/trace-config-proto#AndroidPowerConfig", "type": "TABLE", "cols": [{"name": "id", "type": "ID(counter.id)", "desc": "`counter.id`", "table": "counter", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the residency sample.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Time until the next residency sample.", "table": null, "column": null}, {"name": "entity_name", "type": "STRING", "desc": "Entity or subsytem name.", "table": null, "column": null}, {"name": "state_name", "type": "STRING", "desc": "State name", "table": null, "column": null}, {"name": "raw_name", "type": "STRING", "desc": "Raw name (alias of counter.name)", "table": null, "column": null}, {"name": "state_time_since_boot", "type": "DURATION", "desc": "Time the entity or subsystem spent in the state since boot", "table": null, "column": null}, {"name": "state_time_since_boot_at_end", "type": "DURATION", "desc": "Time the entity or subsystem spent in the state since boot on the next sample", "table": null, "column": null}, {"name": "state_time_ratio", "type": "DOUBLE", "desc": "ratio of the time the entity or subsystem spend in the state out of the elapsed time of the sample period. A value of 1 typically means the 100% of time was spent in the state, and a value of 0 means no time was spent.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "entity + state track id. Alias of `counter_track.id`.", "table": "track", "column": "id"}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.frame_blocking_calls.blocking_calls_aggregation", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.frames.jank_type", "data_objects": [], "functions": [{"name": "android_is_sf_jank_type", "desc": "Categorizes whether the jank was caused by Surface Flinger", "summary_desc": "Categorizes whether the jank was caused by Surface Flinger", "args": [{"name": "jank_type", "type": "STRING", "desc": "the jank type from args.display_value with key = \"Jank type\"", "table": null, "column": null}], "return_type": "BOOL", "return_desc": "True when the jank type represents sf jank"}, {"name": "android_is_app_jank_type", "desc": "Categorizes whether the jank was caused by the app", "summary_desc": "Categorizes whether the jank was caused by the app", "args": [{"name": "jank_type", "type": "STRING", "desc": "the jank type from args.display_value with key = \"Jank type\"", "table": null, "column": null}], "return_type": "BOOL", "return_desc": "True when the jank type represents app jank"}, {"name": "android_is_missed_frame_type", "desc": "Categorizes whether the jank was caused by the sf, app or \"Dropped Frame\"", "summary_desc": "Categorizes whether the jank was caused by the sf, app or \"Dropped Frame\"", "args": [{"name": "jank_type", "type": "STRING", "desc": "the jank type from args.display_value with key = \"Jank type\"", "table": null, "column": null}], "return_type": "BOOL", "return_desc": "True if jank_type represents missed frame jank"}], "table_functions": [], "macros": []}, {"module_name": "android.frames.per_frame_metrics", "data_objects": [{"name": "android_frames_overrun", "desc": "The amount by which each frame missed of hit its deadline. Negative if the\n deadline was not missed. Frames are considered janky if `overrun` is\n positive.\n Calculated as the difference between the end of the\n `expected_frame_timeline_slice` and `actual_frame_timeline_slice` for the\n frame.\n Availability: from S (API 31).\n For Googlers: more details in go/android-performance-metrics-glossary.", "summary_desc": "The amount by which each frame missed of hit its deadline", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame id.", "table": null, "column": null}, {"name": "overrun", "type": "LONG", "desc": "Difference between `expected` and `actual` frame ends. Negative if frame didn't miss deadline.", "table": null, "column": null}]}, {"name": "android_frames_ui_time", "desc": "How much time did the frame's Choreographer callbacks take.", "summary_desc": "How much time did the frame's Choreographer callbacks take.", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame id", "table": null, "column": null}, {"name": "ui_time", "type": "LONG", "desc": "UI time duration", "table": null, "column": null}]}, {"name": "android_app_vsync_delay_per_frame", "desc": "App Vsync delay for a frame. The time between the VSYNC-app signal and the\n start of Choreographer work.\n Calculated as time difference between the actual frame start (from\n `actual_frame_timeline_slice`) and start of the `Choreographer#doFrame`\n slice.\n For Googlers: more details in go/android-performance-metrics-glossary.", "summary_desc": "App Vsync delay for a frame", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame id", "table": null, "column": null}, {"name": "app_vsync_delay", "type": "LONG", "desc": "App VSYNC delay.", "table": null, "column": null}]}, {"name": "android_cpu_time_per_frame", "desc": "How much time did the frame take across the UI Thread + RenderThread.\n Calculated as sum of `app VSYNC delay` `Choreographer#doFrame` slice\n duration and summed durations of all `DrawFrame` slices associated with this\n frame.\n Availability: from N (API 24).\n For Googlers: more details in go/android-performance-metrics-glossary.", "summary_desc": "How much time did the frame take across the UI Thread + RenderThread.  Calculated as sum of `app VSYNC delay` `Choreographer#doFrame` slice  duration and summed durations of all `DrawFrame` slices associated with this  frame.  Availability: from N (API 24).  For Googlers: more details in go/android-performance-metrics-glossary.", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame id", "table": null, "column": null}, {"name": "app_vsync_delay", "type": "LONG", "desc": "Difference between actual timeline of the frame and `Choreographer#doFrame`. See `android_app_vsync_delay_per_frame` table for more details.", "table": null, "column": null}, {"name": "do_frame_dur", "type": "DURATION", "desc": "Duration of `Choreographer#doFrame` slice.", "table": null, "column": null}, {"name": "draw_frame_dur", "type": "DURATION", "desc": "Duration of `DrawFrame` slice. Summed duration of all `DrawFrame` slices, if more than one. See `android_frames_draw_frame` for more details.", "table": null, "column": null}, {"name": "cpu_time", "type": "LONG", "desc": "CPU time across the UI Thread + RenderThread.", "table": null, "column": null}]}, {"name": "android_frame_stats", "desc": "Aggregated stats of the frame.\n\n For Googlers: more details in go/android-performance-metrics-glossary.", "summary_desc": "Aggregated stats of the frame.   For Googlers: more details in go/android-performance-metrics-glossary.", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame id.", "table": null, "column": null}, {"name": "overrun", "type": "LONG", "desc": "The amount by which each frame missed of hit its deadline. See `android_frames_overrun` for details.", "table": null, "column": null}, {"name": "cpu_time", "type": "LONG", "desc": "How much time did the frame take across the UI Thread + RenderThread.", "table": null, "column": null}, {"name": "ui_time", "type": "LONG", "desc": "How much time did the frame's Choreographer callbacks take.", "table": null, "column": null}, {"name": "was_jank", "type": "BOOL", "desc": "Was frame janky.", "table": null, "column": null}, {"name": "was_slow_frame", "type": "BOOL", "desc": "CPU time of the frame took over 20ms.", "table": null, "column": null}, {"name": "was_big_jank", "type": "BOOL", "desc": "CPU time of the frame took over 50ms.", "table": null, "column": null}, {"name": "was_huge_jank", "type": "BOOL", "desc": "CPU time of the frame took over 200ms.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.frames.timeline", "data_objects": [{"name": "android_frames_choreographer_do_frame", "desc": "All of the `Choreographer#doFrame` slices with their frame id.", "summary_desc": "All of the `Choreographer#doFrame` slices with their frame id.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Choreographer#doFrame slice. Slice with the name \"Choreographer#doFrame {frame id}\".", "table": "slice", "column": "id"}, {"name": "frame_id", "type": "LONG", "desc": "Frame id. Taken as the value behind \"Choreographer#doFrame\" in slice name.", "table": null, "column": null}, {"name": "ui_thread_utid", "type": "JOINID(thread.id)", "desc": "Utid of the UI thread", "table": "thread", "column": "id"}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of application process", "table": "process", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the slice.", "table": null, "column": null}]}, {"name": "android_frames_draw_frame", "desc": "All of the `DrawFrame` slices with their frame id and render thread.\n There might be multiple DrawFrames slices for a single vsync (frame id).\n This happens when we are drawing multiple layers (e.g. status bar and\n notifications).", "summary_desc": "All of the `DrawFrame` slices with their frame id and render thread.  There might be multiple DrawFrames slices for a single vsync (frame id).  This happens when we are drawing multiple layers (e.g", "type": "TABLE", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "DrawFrame slice. Slice with the name \"DrawFrame {frame id}\".", "table": "slice", "column": "id"}, {"name": "frame_id", "type": "LONG", "desc": "Frame id. Taken as the value behind \"DrawFrame\" in slice name.", "table": null, "column": null}, {"name": "render_thread_utid", "type": "JOINID(thread.id)", "desc": "Utid of the render thread", "table": "thread", "column": "id"}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of application process", "table": "process", "column": "id"}]}, {"name": "android_frames_layers", "desc": "TODO(b/384322064) Match actual timeline slice with correct draw frame using layer name.\n All slices related to one frame. Aggregates `Choreographer#doFrame`,\n `actual_frame_timeline_slice` and `expected_frame_timeline_slice` slices.\n This table differs slightly from the android_frames table, as it\n captures the layer_id for each actual timeline slice too.", "summary_desc": "TODO(b/384322064) Match actual timeline slice with correct draw frame using layer name.  All slices related to one frame", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame id.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the frame. Start of the frame as defined by the start of \"Choreographer#doFrame\" slice and the same as the start of the frame in `actual_frame_timeline_slice if present.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the frame, as defined by the duration of the corresponding `actual_frame_timeline_slice` or, if not present the time between the `ts` and the end of the final `DrawFrame`.", "table": null, "column": null}, {"name": "ts_end", "type": "TIMESTAMP", "desc": "End timestamp of the frame. End of the frame as defined by the sum of start timestamp and duration of the frame.", "table": null, "column": null}, {"name": "do_frame_id", "type": "JOINID(slice.id)", "desc": "`slice.id` of \"Choreographer#doFrame\" slice.", "table": "slice", "column": "id"}, {"name": "draw_frame_id", "type": "JOINID(slice.id)", "desc": "`slice.id` of \"DrawFrame\" slice. For now, we only support the first DrawFrame slice (due to b/384322064).", "table": "slice", "column": "id"}, {"name": "actual_frame_timeline_id", "type": "JOINID(slice.id)", "desc": "`slice.id` from `actual_frame_timeline_slice`", "table": "slice", "column": "id"}, {"name": "expected_frame_timeline_id", "type": "JOINID(slice.id)", "desc": "`slice.id` from `expected_frame_timeline_slice`", "table": "slice", "column": "id"}, {"name": "render_thread_utid", "type": "JOINID(thread.id)", "desc": "`utid` of the render thread.", "table": "thread", "column": "id"}, {"name": "ui_thread_utid", "type": "JOINID(thread.id)", "desc": "thread id of the UI thread.", "table": "thread", "column": "id"}, {"name": "layer_id", "type": "LONG", "desc": "layer id associated with the actual frame.", "table": null, "column": null}, {"name": "layer_name", "type": "STRING", "desc": "layer name associated with the actual frame.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "process id.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "process name.", "table": null, "column": null}]}, {"name": "android_frames", "desc": "Table based on the android_frames_layers table. It aggregates time, duration and counts\n information across different layers for a given frame_id in a given process.", "summary_desc": "Table based on the android_frames_layers table", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame id.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the frame. Start of the frame as defined by the start of \"Choreographer#doFrame\" slice and the same as the start of the frame in `actual_frame_timeline_slice if present.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the frame, as defined by the duration of the corresponding `actual_frame_timeline_slice` or, if not present the time between the `ts` and the end of the final `DrawFrame`.", "table": null, "column": null}, {"name": "do_frame_id", "type": "JOINID(slice.id)", "desc": "`slice.id` of \"Choreographer#doFrame\" slice.", "table": "slice", "column": "id"}, {"name": "draw_frame_id", "type": "JOINID(slice.id)", "desc": "`slice.id` of \"DrawFrame\" slice. For now, we only support the first DrawFrame slice (due to b/384322064).", "table": "slice", "column": "id"}, {"name": "actual_frame_timeline_id", "type": "JOINID(slice.id)", "desc": "`slice.id` from `actual_frame_timeline_slice`", "table": "slice", "column": "id"}, {"name": "expected_frame_timeline_id", "type": "JOINID(slice.id)", "desc": "`slice.id` from `expected_frame_timeline_slice`", "table": "slice", "column": "id"}, {"name": "render_thread_utid", "type": "JOINID(thread.id)", "desc": "`utid` of the render thread.", "table": "thread", "column": "id"}, {"name": "ui_thread_utid", "type": "JOINID(thread.id)", "desc": "thread id of the UI thread.", "table": "thread", "column": "id"}, {"name": "actual_frame_timeline_count", "type": "LONG", "desc": "Count of slices in `actual_frame_timeline_slice` related to this frame.", "table": null, "column": null}, {"name": "expected_frame_timeline_count", "type": "LONG", "desc": "Count of slices in `expected_frame_timeline_slice` related to this frame.", "table": null, "column": null}, {"name": "draw_frame_count", "type": "LONG", "desc": "Count of draw_frame associated to this frame.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "process id.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "process name.", "table": null, "column": null}]}], "functions": [], "table_functions": [{"name": "android_first_frame_after", "desc": "Returns first frame after the provided timestamp. The returning table has at\n most one row.", "summary_desc": "Returns first frame after the provided timestamp", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}], "cols": [{"name": "frame_id", "type": "LONG", "table": null, "column": null, "desc": "Frame id."}, {"name": "ts", "type": "TIMESTAMP", "table": null, "column": null, "desc": "Start of the frame, the timestamp of the \"Choreographer#doFrame\" slice."}, {"name": "dur", "type": "DURATION", "table": null, "column": null, "desc": "Duration of the frame."}, {"name": "do_frame_id", "type": "JOINID(slice.id)", "table": "slice", "column": "id", "desc": "\"Choreographer#doFrame\" slice. The slice with name \"Choreographer#doFrame\" corresponding to this frame."}, {"name": "draw_frame_id", "type": "JOINID(slice.id)", "table": "slice", "column": "id", "desc": "\"DrawFrame\" slice. The slice with name \"DrawFrame\" corresponding to this frame."}, {"name": "actual_frame_timeline_id", "type": "JOINID(slice.id)", "table": "slice", "column": "id", "desc": "actual_frame_timeline_slice` slice related to this frame."}, {"name": "expected_frame_timeline_id", "type": "JOINID(slice.id)", "table": "slice", "column": "id", "desc": "`expected_frame_timeline_slice` slice related to this frame."}, {"name": "render_thread_utid", "type": "JOINID(thread.id)", "table": "thread", "column": "id", "desc": "`utid` of the render thread."}, {"name": "ui_thread_utid", "type": "JOINID(thread.id)", "table": "thread", "column": "id", "desc": "`utid` of the UI thread."}]}], "macros": []}, {"module_name": "android.frames.timeline_maxsdk28", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.freezer", "data_objects": [{"name": "android_freezer_events", "desc": "All frozen processes and their frozen duration.", "summary_desc": "All frozen processes and their frozen duration.", "type": "TABLE", "cols": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of frozen process", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Pid of frozen process", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp process was frozen.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration process was frozen for.", "table": null, "column": null}, {"name": "unfreeze_reason_int", "type": "LONG", "desc": "Unfreeze reason Integer.", "table": null, "column": null}, {"name": "unfreeze_reason_str", "type": "STRING", "desc": "Unfreeze reason String.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.garbage_collection", "data_objects": [{"name": "android_garbage_collection_events", "desc": "All Garbage collection events with a breakdown of the time spent and heap reclaimed.", "summary_desc": "All Garbage collection events with a breakdown of the time spent and heap reclaimed.", "type": "TABLE", "cols": [{"name": "tid", "type": "LONG", "desc": "Tid of thread running garbage collection.", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "Pid of process running garbage collection.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Utid of thread running garbage collection.", "table": "thread", "column": "id"}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of process running garbage collection.", "table": "process", "column": "id"}, {"name": "thread_name", "type": "STRING", "desc": "Name of thread running garbage collection.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Name of process running garbage collection.", "table": null, "column": null}, {"name": "gc_type", "type": "STRING", "desc": "Type of garbage collection.", "table": null, "column": null}, {"name": "is_mark_compact", "type": "LONG", "desc": "Whether gargage collection is mark compact or copying.", "table": null, "column": null}, {"name": "reclaimed_mb", "type": "DOUBLE", "desc": "MB reclaimed after garbage collection.", "table": null, "column": null}, {"name": "min_heap_mb", "type": "DOUBLE", "desc": "Minimum heap size in MB during garbage collection.", "table": null, "column": null}, {"name": "max_heap_mb", "type": "DOUBLE", "desc": "Maximum heap size in MB during garbage collection.", "table": null, "column": null}, {"name": "gc_id", "type": "LONG", "desc": "Garbage collection id.", "table": null, "column": null}, {"name": "gc_ts", "type": "TIMESTAMP", "desc": "Garbage collection timestamp.", "table": null, "column": null}, {"name": "gc_dur", "type": "DURATION", "desc": "Garbage collection wall duration.", "table": null, "column": null}, {"name": "gc_running_dur", "type": "DURATION", "desc": "Garbage collection duration spent executing on CPU.", "table": null, "column": null}, {"name": "gc_runnable_dur", "type": "DURATION", "desc": "Garbage collection duration spent waiting for CPU.", "table": null, "column": null}, {"name": "gc_unint_io_dur", "type": "DURATION", "desc": "Garbage collection duration spent waiting in the Linux kernel on IO.", "table": null, "column": null}, {"name": "gc_unint_non_io_dur", "type": "DURATION", "desc": "Garbage collection duration spent waiting in the Linux kernel without IO.", "table": null, "column": null}, {"name": "gc_int_dur", "type": "LONG", "desc": "Garbage collection duration spent waiting in interruptible sleep.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.gpu.frequency", "data_objects": [{"name": "android_gpu_frequency", "desc": "GPU frequency counter per GPU.", "summary_desc": "GPU frequency counter per GPU.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration", "table": null, "column": null}, {"name": "gpu_id", "type": "LONG", "desc": "GPU id. Joinable with `gpu_counter_track.gpu_id`.", "table": null, "column": null}, {"name": "gpu_freq", "type": "LONG", "desc": "GPU frequency", "table": null, "column": null}, {"name": "prev_gpu_freq", "type": "LONG", "desc": "GPU frequency from previous slice", "table": null, "column": null}, {"name": "next_gpu_freq", "type": "LONG", "desc": "GPU frequency from next slice", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.gpu.mali_power_state", "data_objects": [{"name": "android_mali_gpu_power_state", "desc": "GPU power state which is analogous to CPU idle state", "summary_desc": "GPU power state which is analogous to CPU idle state", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration", "table": null, "column": null}, {"name": "power_state", "type": "LONG", "desc": "GPU power state", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.gpu.memory", "data_objects": [{"name": "android_gpu_memory_per_process", "desc": "Counter for GPU memory per process with duration.", "summary_desc": "Counter for GPU memory per process with duration.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of the process", "table": "process", "column": "id"}, {"name": "gpu_memory", "type": "LONG", "desc": "GPU memory", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.gpu.work_period", "data_objects": [{"name": "android_gpu_work_period_track", "desc": "Tracks for GPU work period events originating from the\n `power/gpu_work_period` Linux ftrace tracepoint.\n\n This tracepoint is usually only available on selected Android devices.", "summary_desc": "Tracks for GPU work period events originating from the  `power/gpu_work_period` Linux ftrace tracepoint.   This tracepoint is usually only available on selected Android devices.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Unique identifier for this track. Joinable with track.id.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "uid", "type": "LONG", "desc": "The UID of the package for which the GPU work period events were emitted.", "table": null, "column": null}, {"name": "gpu_id", "type": "LONG", "desc": "The GPU identifier for which the GPU work period events were emitted.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.input", "data_objects": [{"name": "android_input_events", "desc": "All input events with round trip latency breakdown. Input delivery is socket based and every\n input event sent from the OS needs to be ACK'ed by the app. This gives us 4 subevents to measure\n latencies between:\n 1. Input dispatch event sent from OS.\n 2. Input dispatch event received in app.\n 3. Input ACK event sent from app.\n 4. Input ACk event received in OS.", "summary_desc": "All input events with round trip latency breakdown", "type": "TABLE", "cols": [{"name": "dispatch_latency_dur", "type": "DURATION", "desc": "Duration from input dispatch to input received.", "table": null, "column": null}, {"name": "handling_latency_dur", "type": "DURATION", "desc": "Duration from input received to input ACK sent.", "table": null, "column": null}, {"name": "ack_latency_dur", "type": "DURATION", "desc": "Duration from input ACK sent to input ACK received.", "table": null, "column": null}, {"name": "total_latency_dur", "type": "DURATION", "desc": "Duration from input dispatch to input event ACK received.", "table": null, "column": null}, {"name": "end_to_end_latency_dur", "type": "DURATION", "desc": "Duration from input read to frame present time. Null if an input event has no associated frame event.", "table": null, "column": null}, {"name": "tid", "type": "LONG", "desc": "Tid of thread receiving the input event.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Name of thread receiving the input event.", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "Pid of process receiving the input event.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Name of process receiving the input event.", "table": null, "column": null}, {"name": "event_type", "type": "STRING", "desc": "Input event type. See InputTransport.h: InputMessage#Type", "table": null, "column": null}, {"name": "event_action", "type": "STRING", "desc": "Input event action.", "table": null, "column": null}, {"name": "event_seq", "type": "STRING", "desc": "Input event sequence number, monotonically increasing for an event channel and pid.", "table": null, "column": null}, {"name": "event_channel", "type": "STRING", "desc": "Input event channel name.", "table": null, "column": null}, {"name": "input_event_id", "type": "STRING", "desc": "Unique identifier for the input event.", "table": null, "column": null}, {"name": "read_time", "type": "LONG", "desc": "Timestamp input event was read by InputReader.", "table": null, "column": null}, {"name": "dispatch_track_id", "type": "JOINID(track.id)", "desc": "Thread track id of input event dispatching thread.", "table": "track", "column": "id"}, {"name": "dispatch_ts", "type": "TIMESTAMP", "desc": "Timestamp input event was dispatched.", "table": null, "column": null}, {"name": "dispatch_dur", "type": "DURATION", "desc": "Duration of input event dispatch.", "table": null, "column": null}, {"name": "receive_track_id", "type": "JOINID(track.id)", "desc": "Thread track id of input event receiving thread.", "table": "track", "column": "id"}, {"name": "receive_ts", "type": "TIMESTAMP", "desc": "Timestamp input event was received.", "table": null, "column": null}, {"name": "receive_dur", "type": "DURATION", "desc": "Duration of input event receipt.", "table": null, "column": null}, {"name": "frame_id", "type": "LONG", "desc": "Vsync Id associated with the input. Null if an input event has no associated frame event.", "table": null, "column": null}]}, {"name": "android_key_events", "desc": "Key events processed by the Android framework (from android.input.inputevent data source).", "summary_desc": "Key events processed by the Android framework (from android.input.inputevent data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "ID of the trace entry", "table": null, "column": null}, {"name": "event_id", "type": "LONG", "desc": "The randomly-generated ID associated with each input event processed by Android Framework, used to track the event through the input pipeline", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp of when the input event was processed by the system", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Details of the input event parsed from the proto message", "table": null, "column": null}, {"name": "source", "type": "LONG", "desc": "Event source e.g. touchscreen, keyboard", "table": null, "column": null}, {"name": "action", "type": "LONG", "desc": "Action e.g. down, move", "table": null, "column": null}, {"name": "device_id", "type": "LONG", "desc": "Device id", "table": null, "column": null}, {"name": "display_id", "type": "LONG", "desc": "Display id", "table": null, "column": null}, {"name": "key_code", "type": "LONG", "desc": "Key code", "table": null, "column": null}]}, {"name": "android_motion_events", "desc": "Motion events processed by the Android framework (from android.input.inputevent data source).", "summary_desc": "Motion events processed by the Android framework (from android.input.inputevent data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "ID of the trace entry", "table": null, "column": null}, {"name": "event_id", "type": "LONG", "desc": "The randomly-generated ID associated with each input event processed by Android Framework, used to track the event through the input pipeline", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp of when the input event was processed by the system", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Details of the input event parsed from the proto message", "table": null, "column": null}, {"name": "source", "type": "LONG", "desc": "Event source e.g. touchscreen, keyboard", "table": null, "column": null}, {"name": "action", "type": "LONG", "desc": "Action e.g. down, move", "table": null, "column": null}, {"name": "device_id", "type": "LONG", "desc": "Device id", "table": null, "column": null}, {"name": "display_id", "type": "LONG", "desc": "Display id", "table": null, "column": null}]}, {"name": "android_input_event_dispatch", "desc": "Input event dispatching information in Android (from android.input.inputevent data source).", "summary_desc": "Input event dispatching information in Android (from android.input.inputevent data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "ID of the trace entry", "table": null, "column": null}, {"name": "event_id", "type": "LONG", "desc": "Event ID of the input event that was dispatched", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Details of the input event parsed from the proto message", "table": null, "column": null}, {"name": "vsync_id", "type": "LONG", "desc": "Vsync ID that identifies the state of the windows during which the dispatch decision was made", "table": null, "column": null}, {"name": "window_id", "type": "LONG", "desc": "Window ID of the window receiving the event", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.io", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.job_scheduler", "data_objects": [{"name": "android_job_scheduler_events", "desc": "All scheduled jobs and their latencies.\n\n The table is populated by ATrace using the system server ATrace category\n (`atrace_categories: \"ss\"`). You can also set the `atrace_apps` of interest.\n\n This differs from the `android_job_scheduler_states` table\n in the `android.job_scheduler_states` module which is populated\n by the `ScheduledJobStateChanged` atom.\n\n Using `android_job_scheduler_states` is preferred when the\n `ATOM_SCHEDULED_JOB_STATE_CHANGED` is available in the trace since\n it includes the constraint, screen, or charging state changes for\n each job in a trace.", "summary_desc": "All scheduled jobs and their latencies.   The table is populated by ATrace using the system server ATrace category  (`atrace_categories: \"ss\"`)", "type": "TABLE", "cols": [{"name": "job_id", "type": "LONG", "desc": "Id of the scheduled job assigned by the app developer.", "table": null, "column": null}, {"name": "uid", "type": "LONG", "desc": "Uid of the process running the scheduled job.", "table": null, "column": null}, {"name": "package_name", "type": "STRING", "desc": "Package name of the process running the scheduled job.", "table": null, "column": null}, {"name": "job_service_name", "type": "STRING", "desc": "Service component name of the scheduled job.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Thread track id of the job scheduler event slice.", "table": "track", "column": "id"}, {"name": "id", "type": "LONG", "desc": "Slice id of the job scheduler event slice.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp the job was scheduled.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the scheduled job.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.job_scheduler_states", "data_objects": [{"name": "android_job_scheduler_states", "desc": "This table returns constraint changes that a\n job will go through in a single trace.\n\n Values in this table are derived from the the `ScheduledJobStateChanged`\n atom. This table differs from the\n `android_job_scheduler_with_screen_charging_states` in this module\n (`android.job_scheduler_states`) by only having job constraint information.\n\n See documentation for the `android_job_scheduler_with_screen_charging_states`\n for how tables in this module differ from `android_job_scheduler_events`\n table in the `android.job_scheduler` module and how to populate this table.", "summary_desc": "This table returns constraint changes that a  job will go through in a single trace.   Values in this table are derived from the the `ScheduledJobStateChanged`  atom", "type": "TABLE", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for job scheduler state.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of job state slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of job state slice.", "table": null, "column": null}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Id of the slice.", "table": "slice", "column": "id"}, {"name": "job_name", "type": "STRING", "desc": "Name of the job (as named by the app).", "table": null, "column": null}, {"name": "uid", "type": "LONG", "desc": "Uid associated with job.", "table": null, "column": null}, {"name": "job_id", "type": "LONG", "desc": "Id of job (assigned by app for T- builds and system generated in U+ builds).", "table": null, "column": null}, {"name": "package_name", "type": "STRING", "desc": "Package that the job belongs (ex: associated app).", "table": null, "column": null}, {"name": "job_namespace", "type": "STRING", "desc": "Namespace of job.", "table": null, "column": null}, {"name": "effective_priority", "type": "LONG", "desc": "Priority at which JobScheduler ran the job.", "table": null, "column": null}, {"name": "has_battery_not_low_constraint", "type": "BOOL", "desc": "True if app requested job should run when the device battery is not low.", "table": null, "column": null}, {"name": "has_charging_constraint", "type": "BOOL", "desc": "True if app requested job should run when the device is charging.", "table": null, "column": null}, {"name": "has_connectivity_constraint", "type": "BOOL", "desc": "True if app requested job should run when device has connectivity.", "table": null, "column": null}, {"name": "has_content_trigger_constraint", "type": "BOOL", "desc": "True if app requested job should run when there is a content trigger.", "table": null, "column": null}, {"name": "has_deadline_constraint", "type": "BOOL", "desc": "True if app requested there is a deadline by which the job should run.", "table": null, "column": null}, {"name": "has_idle_constraint", "type": "BOOL", "desc": "True if app requested job should run when device is idle.", "table": null, "column": null}, {"name": "has_storage_not_low_constraint", "type": "BOOL", "desc": "True if app requested job should run when device storage is not low.", "table": null, "column": null}, {"name": "has_timing_delay_constraint", "type": "BOOL", "desc": "True if app requested job has a timing delay.", "table": null, "column": null}, {"name": "is_prefetch", "type": "BOOL", "desc": "True if app requested job should run within hours of app launch.", "table": null, "column": null}, {"name": "is_requested_expedited_job", "type": "BOOL", "desc": "True if app requested that the job is run as an expedited job.", "table": null, "column": null}, {"name": "is_running_as_expedited_job", "type": "BOOL", "desc": "The job is run as an expedited job.", "table": null, "column": null}, {"name": "num_previous_attempts", "type": "TIMESTAMP", "desc": "Number of previous attempts at running job.", "table": null, "column": null}, {"name": "requested_priority", "type": "LONG", "desc": "The requested priority at which the job should run.", "table": null, "column": null}, {"name": "standby_bucket", "type": "STRING", "desc": "The job's standby bucket (one of: Active, Working Set, Frequent, Rare, Never, Restricted, Exempt).", "table": null, "column": null}, {"name": "is_periodic", "type": "BOOL", "desc": "Job should run in intervals.", "table": null, "column": null}, {"name": "has_flex_constraint", "type": "BOOL", "desc": "True if the job should run as a flex job.", "table": null, "column": null}, {"name": "is_requested_as_user_initiated_job", "type": "BOOL", "desc": "True is app has requested that a job be run as a user initiated job.", "table": null, "column": null}, {"name": "is_running_as_user_initiated_job", "type": "BOOL", "desc": "True if job is running as a user initiated job.", "table": null, "column": null}, {"name": "deadline_ms", "type": "LONG", "desc": "Deadline that job has requested and valid if has_deadline_constraint is true.", "table": null, "column": null}, {"name": "job_start_latency_ms", "type": "LONG", "desc": "The latency in ms between when a job is scheduled and when it actually starts.", "table": null, "column": null}, {"name": "num_uncompleted_work_items", "type": "LONG", "desc": "Number of uncompleted job work items.", "table": null, "column": null}, {"name": "proc_state", "type": "STRING", "desc": "Process state of the process responsible for running the job.", "table": null, "column": null}, {"name": "internal_stop_reason", "type": "STRING", "desc": "Internal stop reason for a job.", "table": null, "column": null}, {"name": "public_stop_reason", "type": "STRING", "desc": "Public stop reason for a job.", "table": null, "column": null}]}, {"name": "android_job_scheduler_with_screen_charging_states", "desc": "This table returns the constraint, charging,\n and screen state changes that a job will go through\n in a single trace.\n\n Values from this table are derived from\n the `ScheduledJobStateChanged` atom. This differs from the\n `android_job_scheduler_events` table in the `android.job_scheduler` module\n which is derived from ATrace the system server category\n (`atrace_categories: \"ss\"`).\n\n This also differs from the `android_job_scheduler_states` in this module\n (`android.job_scheduler_states`) by providing charging and screen state\n changes.\n\n To populate this table, enable the Statsd Tracing Config with the\n ATOM_SCHEDULED_JOB_STATE_CHANGED push atom id.\n https://perfetto.dev/docs/reference/trace-config-proto#StatsdTracingConfig\n\n This table is preferred over `android_job_scheduler_events`\n since it contains more information and should be used whenever\n `ATOM_SCHEDULED_JOB_STATE_CHANGED` is available in a trace.", "summary_desc": "This table returns the constraint, charging,  and screen state changes that a job will go through  in a single trace.   Values from this table are derived from  the `ScheduledJobStateChanged` atom", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of job.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of slice in ns.", "table": null, "column": null}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Id of the slice.", "table": "slice", "column": "id"}, {"name": "job_name", "type": "STRING", "desc": "Name of the job (as named by the app).", "table": null, "column": null}, {"name": "job_id", "type": "LONG", "desc": "Id of job (assigned by app for T- builds and system generated in U+ builds).", "table": null, "column": null}, {"name": "uid", "type": "LONG", "desc": "Uid associated with job.", "table": null, "column": null}, {"name": "job_dur", "type": "DURATION", "desc": "Duration of entire job in ns.", "table": null, "column": null}, {"name": "package_name", "type": "STRING", "desc": "Package that the job belongs (ex: associated app).", "table": null, "column": null}, {"name": "job_namespace", "type": "STRING", "desc": "Namespace of job.", "table": null, "column": null}, {"name": "charging_state", "type": "STRING", "desc": "Device charging state during job (one of: Charging, Discharging, Not charging, Full, Unknown).", "table": null, "column": null}, {"name": "screen_state", "type": "STRING", "desc": "Device screen state during job (one of: Screen off, Screen on, Always-on display (doze), Unknown).", "table": null, "column": null}, {"name": "effective_priority", "type": "LONG", "desc": "Priority at which JobScheduler ran the job.", "table": null, "column": null}, {"name": "has_battery_not_low_constraint", "type": "BOOL", "desc": "True if app requested job should run when the device battery is not low.", "table": null, "column": null}, {"name": "has_charging_constraint", "type": "BOOL", "desc": "True if app requested job should run when the device is charging.", "table": null, "column": null}, {"name": "has_connectivity_constraint", "type": "BOOL", "desc": "True if app requested job should run when device has connectivity.", "table": null, "column": null}, {"name": "has_content_trigger_constraint", "type": "BOOL", "desc": "True if app requested job should run when there is a content trigger.", "table": null, "column": null}, {"name": "has_deadline_constraint", "type": "BOOL", "desc": "True if app requested there is a deadline by which the job should run.", "table": null, "column": null}, {"name": "has_idle_constraint", "type": "BOOL", "desc": "True if app requested job should run when device is idle.", "table": null, "column": null}, {"name": "has_storage_not_low_constraint", "type": "BOOL", "desc": "True if app requested job should run when device storage is not low.", "table": null, "column": null}, {"name": "has_timing_delay_constraint", "type": "BOOL", "desc": "True if app requested job has a timing delay.", "table": null, "column": null}, {"name": "is_prefetch", "type": "BOOL", "desc": "True if app requested job should run within hours of app launch.", "table": null, "column": null}, {"name": "is_requested_expedited_job", "type": "BOOL", "desc": "True if app requested that the job is run as an expedited job.", "table": null, "column": null}, {"name": "is_running_as_expedited_job", "type": "BOOL", "desc": "The job is run as an expedited job.", "table": null, "column": null}, {"name": "num_previous_attempts", "type": "TIMESTAMP", "desc": "Number of previous attempts at running job.", "table": null, "column": null}, {"name": "requested_priority", "type": "LONG", "desc": "The requested priority at which the job should run.", "table": null, "column": null}, {"name": "standby_bucket", "type": "STRING", "desc": "The job's standby bucket (one of: Active, Working Set, Frequent, Rare, Never, Restricted, Exempt).", "table": null, "column": null}, {"name": "is_periodic", "type": "BOOL", "desc": "Job should run in intervals.", "table": null, "column": null}, {"name": "has_flex_constraint", "type": "BOOL", "desc": "True if the job should run as a flex job.", "table": null, "column": null}, {"name": "is_requested_as_user_initiated_job", "type": "BOOL", "desc": "True is app has requested that a job be run as a user initiated job.", "table": null, "column": null}, {"name": "is_running_as_user_initiated_job", "type": "BOOL", "desc": "True if job is running as a user initiated job.", "table": null, "column": null}, {"name": "deadline_ms", "type": "LONG", "desc": "Deadline that job has requested and valid if has_deadline_constraint is true.", "table": null, "column": null}, {"name": "job_start_latency_ms", "type": "LONG", "desc": "The latency in ms between when a job is scheduled and when it actually starts.", "table": null, "column": null}, {"name": "num_uncompleted_work_items", "type": "LONG", "desc": "Number of uncompleted job work items.", "table": null, "column": null}, {"name": "proc_state", "type": "STRING", "desc": "Process state of the process responsible for running the job.", "table": null, "column": null}, {"name": "internal_stop_reason", "type": "STRING", "desc": "Internal stop reason for a job.", "table": null, "column": null}, {"name": "public_stop_reason", "type": "STRING", "desc": "Public stop reason for a job.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.kernel_wakelocks", "data_objects": [{"name": "android_kernel_wakelocks", "desc": "Table of kernel (or native) wakelocks with held duration.\n\n Subtracts suspended time from each period to calculate the\n fraction of awake time for which the wakelock was held.", "summary_desc": "Table of kernel (or native) wakelocks with held duration.   Subtracts suspended time from each period to calculate the  fraction of awake time for which the wakelock was held.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration.", "table": null, "column": null}, {"name": "awake_dur", "type": "DURATION", "desc": "Duration spent awake.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Kernel or native wakelock name.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "'kernel' or 'native'.", "table": null, "column": null}, {"name": "held_dur", "type": "DURATION", "desc": "Time the wakelock was held.", "table": null, "column": null}, {"name": "held_ratio", "type": "DOUBLE", "desc": "Fraction of awake (not suspended) time the wakelock was held.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.dmabuf", "data_objects": [{"name": "android_dmabuf_allocs", "desc": "Track dmabuf allocations, re-attributing gralloc allocations to their source\n (if binder transactions to gralloc are recorded).", "summary_desc": "Track dmabuf allocations, re-attributing gralloc allocations to their source  (if binder transactions to gralloc are recorded).", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "timestamp of the allocation", "table": null, "column": null}, {"name": "buf_size", "type": "LONG", "desc": "allocation size (will be negative for release)", "table": null, "column": null}, {"name": "inode", "type": "LONG", "desc": "dmabuf inode", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "utid of thread responsible for the allocation if a dmabuf is allocated by gralloc we follow the binder transaction to the requesting thread (requires binder tracing)", "table": "thread", "column": "id"}, {"name": "tid", "type": "LONG", "desc": "tid of thread responsible for the allocation", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "thread name", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "upid of process responsible for the allocation (matches utid)", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "pid of process responsible for the allocation", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "process name", "table": null, "column": null}]}, {"name": "android_memory_cumulative_dmabuf", "desc": "Provides a timeseries of dmabuf allocations for each process.\n To populate this table, tracing must be enabled with the \"dmabuf_allocs\" ftrace event.", "summary_desc": "Provides a timeseries of dmabuf allocations for each process.  To populate this table, tracing must be enabled with the \"dmabuf_allocs\" ftrace event.", "type": "TABLE", "cols": [{"name": "upid", "type": "JOINID(process.id)", "desc": "upid of process responsible for the allocation (matches utid)", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "process name", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "utid of thread responsible for the allocation if a dmabuf is allocated by gralloc we follow the binder transaction to the requesting thread (requires binder tracing)", "table": "thread", "column": "id"}, {"name": "thread_name", "type": "STRING", "desc": "thread name", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "timestamp of the allocation", "table": null, "column": null}, {"name": "value", "type": "LONG", "desc": "total allocation size per process and thread", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_graph.class_relationship", "data_objects": [], "functions": [], "table_functions": [], "macros": [{"name": "android_heap_graph_class_find_descendants", "desc": "Given a list of classes as ancestor classes, return all the classes that\n descend from them.", "summary_desc": "Given a list of classes as ancestor classes, return all the classes that  descend from them.", "return_desc": "Table of the schema (id JOINID(heap_graph_class.id), ancestor_class_id JOINID(heap_graph_class.id), ancestor_class_name STRING) id: `id` of the class as in heap_graph_class ancestor_class_id: `id` of the ancestor class as given in the input ancestor_class_name: `name` of the ancestor class as in heap_graph_class", "return_type": "TableOrSubquery", "args": [{"name": "ancestor_class_ids", "type": "TableOrSubquery", "desc": "ancestor class `id`s from the heap_graph_class table containing a single column: `id`", "table": null, "column": null}]}]}, {"module_name": "android.memory.heap_graph.class_summary_tree", "data_objects": [{"name": "android_heap_graph_class_summary_tree", "desc": "Table containing all the Android heap graphs in the trace converted to a\n shortest-path tree and then aggregated by class name.\n\n This table contains a \"flamegraph-like\" representation of the contents of the\n heap graph.", "summary_desc": "Table containing all the Android heap graphs in the trace converted to a  shortest-path tree and then aggregated by class name.   This table contains a \"flamegraph-like\" representation of the contents of the  heap graph.", "type": "TABLE", "cols": [{"name": "graph_sample_ts", "type": "TIMESTAMP", "desc": "The timestamp the heap graph was dumped at.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "The upid of the process.", "table": "process", "column": "id"}, {"name": "id", "type": "LONG", "desc": "The id of the node in the class tree.", "table": null, "column": null}, {"name": "parent_id", "type": "LONG", "desc": "The parent id of the node in the class tree or NULL if this is the root.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the class.", "table": null, "column": null}, {"name": "root_type", "type": "STRING", "desc": "A string describing the type of Java root if this node is a root or NULL if this node is not a root.", "table": null, "column": null}, {"name": "self_count", "type": "LONG", "desc": "The count of objects with the same class name and the same path to the root.", "table": null, "column": null}, {"name": "self_size", "type": "LONG", "desc": "The size of objects with the same class name and the same path to the root.", "table": null, "column": null}, {"name": "cumulative_count", "type": "LONG", "desc": "The sum of `self_count` of this node and all descendants of this node.", "table": null, "column": null}, {"name": "cumulative_size", "type": "LONG", "desc": "The sum of `self_size` of this node and all descendants of this node.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_graph.class_tree", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_graph.dominator_class_tree", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_graph.dominator_tree", "data_objects": [{"name": "heap_graph_dominator_tree", "desc": "All reachable heap graph objects, their immediate dominators and summary of\n their dominated sets.\n The heap graph dominator tree is calculated by stdlib graphs.dominator_tree.\n Each reachable object is a node in the dominator tree, their immediate\n dominator is their parent node in the tree, and their dominated set is all\n their descendants in the tree. All size information come from the\n heap_graph_object prelude table.", "summary_desc": "All reachable heap graph objects, their immediate dominators and summary of  their dominated sets.  The heap graph dominator tree is calculated by stdlib graphs.dominator_tree.  Each reachable object is a node in the dominator tree, their immediate  dominator is their parent node in the tree, and their dominated set is all  their descendants in the tree", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Heap graph object id.", "table": null, "column": null}, {"name": "idom_id", "type": "LONG", "desc": "Immediate dominator object id of the object. If the immediate dominator is the \"super-root\" (i.e. the object is a root or is dominated by multiple roots) then `idom_id` will be NULL.", "table": null, "column": null}, {"name": "dominated_obj_count", "type": "LONG", "desc": "Count of all objects dominated by this object, self inclusive.", "table": null, "column": null}, {"name": "dominated_size_bytes", "type": "LONG", "desc": "Total self_size of all objects dominated by this object, self inclusive.", "table": null, "column": null}, {"name": "dominated_native_size_bytes", "type": "LONG", "desc": "Total native_size of all objects dominated by this object, self inclusive.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Depth of the object in the dominator tree. Depth of root objects are 1.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_graph.excluded_refs", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_graph.heap_graph_class_aggregation", "data_objects": [{"name": "android_heap_graph_class_aggregation", "desc": "Class-level breakdown of the java heap.\n Per type name aggregates the object stats and the dominator tree stats.", "summary_desc": "Class-level breakdown of the java heap.  Per type name aggregates the object stats and the dominator tree stats.", "type": "TABLE", "cols": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Process upid", "table": "process", "column": "id"}, {"name": "graph_sample_ts", "type": "TIMESTAMP", "desc": "Heap dump timestamp", "table": null, "column": null}, {"name": "type_id", "type": "LONG", "desc": "Class type id", "table": null, "column": null}, {"name": "type_name", "type": "STRING", "desc": "Class name (deobfuscated if available)", "table": null, "column": null}, {"name": "is_libcore_or_array", "type": "BOOL", "desc": "Is type an instance of a libcore object (java.*) or array", "table": null, "column": null}, {"name": "obj_count", "type": "LONG", "desc": "Count of class instances", "table": null, "column": null}, {"name": "size_bytes", "type": "LONG", "desc": "Size of class instances", "table": null, "column": null}, {"name": "native_size_bytes", "type": "LONG", "desc": "Native size of class instances", "table": null, "column": null}, {"name": "reachable_obj_count", "type": "LONG", "desc": "Count of reachable class instances", "table": null, "column": null}, {"name": "reachable_size_bytes", "type": "LONG", "desc": "Size of reachable class instances", "table": null, "column": null}, {"name": "reachable_native_size_bytes", "type": "LONG", "desc": "Native size of reachable class instances", "table": null, "column": null}, {"name": "dominated_obj_count", "type": "LONG", "desc": "Count of all objects dominated by instances of this class Only applies to reachable objects", "table": null, "column": null}, {"name": "dominated_size_bytes", "type": "LONG", "desc": "Size of all objects dominated by instances of this class Only applies to reachable objects", "table": null, "column": null}, {"name": "dominated_native_size_bytes", "type": "LONG", "desc": "Native size of all objects dominated by instances of this class Only applies to reachable objects", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_graph.helpers", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_graph.raw_dominator_tree", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_profile.callstacks", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.heap_profile.summary_tree", "data_objects": [{"name": "android_heap_profile_summary_tree", "desc": "Table summarising the amount of memory allocated by each\n callstack as seen by Android native heap profiling (i.e.\n profiling information collected by heapprofd).\n\n Note: this table collapses data from all processes together\n into a single table.", "summary_desc": "Table summarising the amount of memory allocated by each  callstack as seen by Android native heap profiling (i.e.  profiling information collected by heapprofd).   Note: this table collapses data from all processes together  into a single table.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "The id of the callstack. A callstack in this context is a unique set of frames up to the root.", "table": null, "column": null}, {"name": "parent_id", "type": "LONG", "desc": "The id of the parent callstack for this callstack.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The function name of the frame for this callstack.", "table": null, "column": null}, {"name": "mapping_name", "type": "STRING", "desc": "The name of the mapping containing the frame. This can be a native binary, library, JAR or APK.", "table": null, "column": null}, {"name": "source_file", "type": "STRING", "desc": "The name of the file containing the function.", "table": null, "column": null}, {"name": "line_number", "type": "LONG", "desc": "The line number in the file the function is located at.", "table": null, "column": null}, {"name": "self_size", "type": "LONG", "desc": "The amount of memory allocated and *not freed* with this function as the leaf frame.", "table": null, "column": null}, {"name": "cumulative_size", "type": "LONG", "desc": "The amount of memory allocated and *not freed* with this function appearing anywhere on the callstack.", "table": null, "column": null}, {"name": "self_alloc_size", "type": "LONG", "desc": "The amount of memory allocated with this function as the leaf frame. This may include memory which was later freed.", "table": null, "column": null}, {"name": "cumulative_alloc_size", "type": "LONG", "desc": "The amount of memory allocated with this function appearing anywhere on the callstack. This may include memory which was later freed.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.lmk", "data_objects": [{"name": "android_lmk_events", "desc": "Android Low-Memory Kill (LMK) events", "summary_desc": "Android Low-Memory Kill (LMK) events", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "timestamp of the kill being requested by lmkd", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "upid of the process being killed", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "pid of the process being killed", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "process name of the process being killed", "table": null, "column": null}, {"name": "oom_score_adj", "type": "LONG", "desc": "oom_score_adj of the process being killed", "table": null, "column": null}, {"name": "kill_reason", "type": "STRING", "desc": "lmkd kill_reason (matches lmkd/statslog.h kill_reasons enum)", "table": null, "column": null}, {"name": "kill_reason_raw", "type": "LONG", "desc": "lmkd kill_reason enum value", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.memory.process", "data_objects": [{"name": "memory_oom_score_with_rss_and_swap_per_process", "desc": "Process memory and it's OOM adjuster scores. Detects transitions, each new\n interval means that either the memory or OOM adjuster score of the process changed.", "summary_desc": "Process memory and it's OOM adjuster scores", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp the oom_adj score or memory of the process changed", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration until the next oom_adj score or memory change of the process.", "table": null, "column": null}, {"name": "score", "type": "LONG", "desc": "oom adjuster score of the process.", "table": null, "column": null}, {"name": "bucket", "type": "STRING", "desc": "oom adjuster bucket of the process.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of the process having an oom_adj update.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process having an oom_adj update.", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "Pid of the process having an oom_adj update.", "table": null, "column": null}, {"name": "oom_adj_id", "type": "JOINID(slice.id)", "desc": "Slice of the latest oom_adj update in the system_server.", "table": "slice", "column": "id"}, {"name": "oom_adj_ts", "type": "TIMESTAMP", "desc": "Timestamp of the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_dur", "type": "DURATION", "desc": "Duration of the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_track_id", "type": "JOINID(track.id)", "desc": "Track of the latest oom_adj update in the system_server. Alias of `track.id`.", "table": "track", "column": "id"}, {"name": "oom_adj_thread_name", "type": "STRING", "desc": "Thread name of the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_reason", "type": "STRING", "desc": "Reason for the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_trigger", "type": "STRING", "desc": "Trigger for the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "anon_rss", "type": "LONG", "desc": "Anon RSS counter value", "table": null, "column": null}, {"name": "file_rss", "type": "LONG", "desc": "File RSS counter value", "table": null, "column": null}, {"name": "shmem_rss", "type": "LONG", "desc": "Shared memory RSS counter value", "table": null, "column": null}, {"name": "rss", "type": "LONG", "desc": "Total RSS value. Sum of `anon_rss`, `file_rss` and `shmem_rss`. Returns value even if one of the values is NULL.", "table": null, "column": null}, {"name": "swap", "type": "LONG", "desc": "Swap counter value", "table": null, "column": null}, {"name": "anon_rss_and_swap", "type": "LONG", "desc": "Sum or `anon_rss` and `swap`. Returns value even if one of the values is NULL.", "table": null, "column": null}, {"name": "rss_and_swap", "type": "LONG", "desc": "Sum or `rss` and `swap`. Returns value even if one of the values is NULL.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.monitor_contention", "data_objects": [{"name": "android_monitor_contention", "desc": "Contains parsed monitor contention slices.", "summary_desc": "Contains parsed monitor contention slices.", "type": "TABLE", "cols": [{"name": "blocking_method", "type": "STRING", "desc": "Name of the method holding the lock.", "table": null, "column": null}, {"name": "blocked_method", "type": "STRING", "desc": "Blocked_method without arguments and return types.", "table": null, "column": null}, {"name": "short_blocking_method", "type": "STRING", "desc": "Blocking_method without arguments and return types.", "table": null, "column": null}, {"name": "short_blocked_method", "type": "STRING", "desc": "Blocked_method without arguments and return types.", "table": null, "column": null}, {"name": "blocking_src", "type": "STRING", "desc": "File location of blocking_method in form <filename:linenumber>.", "table": null, "column": null}, {"name": "blocked_src", "type": "STRING", "desc": "File location of blocked_method in form <filename:linenumber>.", "table": null, "column": null}, {"name": "waiter_count", "type": "LONG", "desc": "Zero indexed number of threads trying to acquire the lock.", "table": null, "column": null}, {"name": "blocked_utid", "type": "JOINID(thread.id)", "desc": "Utid of thread holding the lock.", "table": "thread", "column": "id"}, {"name": "blocked_thread_name", "type": "STRING", "desc": "Thread name of thread holding the lock.", "table": null, "column": null}, {"name": "blocking_utid", "type": "JOINID(thread.id)", "desc": "Utid of thread holding the lock.", "table": "thread", "column": "id"}, {"name": "blocking_thread_name", "type": "STRING", "desc": "Thread name of thread holding the lock.", "table": null, "column": null}, {"name": "blocking_tid", "type": "LONG", "desc": "Tid of thread holding the lock.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of process experiencing lock contention.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Process name of process experiencing lock contention.", "table": null, "column": null}, {"name": "id", "type": "LONG", "desc": "Slice id of lock contention.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of lock contention start.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Wall clock duration of lock contention.", "table": null, "column": null}, {"name": "monotonic_dur", "type": "DURATION", "desc": "Monotonic clock duration of lock contention.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Thread track id of blocked thread.", "table": "track", "column": "id"}, {"name": "is_blocked_thread_main", "type": "LONG", "desc": "Whether the blocked thread is the main thread.", "table": null, "column": null}, {"name": "blocked_thread_tid", "type": "LONG", "desc": "Tid of the blocked thread", "table": null, "column": null}, {"name": "is_blocking_thread_main", "type": "LONG", "desc": "Whether the blocking thread is the main thread.", "table": null, "column": null}, {"name": "blocking_thread_tid", "type": "LONG", "desc": "Tid of thread holding the lock.", "table": null, "column": null}, {"name": "binder_reply_id", "type": "LONG", "desc": "Slice id of binder reply slice if lock contention was part of a binder txn.", "table": null, "column": null}, {"name": "binder_reply_ts", "type": "TIMESTAMP", "desc": "Timestamp of binder reply slice if lock contention was part of a binder txn.", "table": null, "column": null}, {"name": "binder_reply_tid", "type": "LONG", "desc": "Tid of binder reply slice if lock contention was part of a binder txn.", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "Pid of process experiencing lock contention.", "table": null, "column": null}]}, {"name": "android_monitor_contention_chain", "desc": "Contains parsed monitor contention slices with the parent-child relationships.", "summary_desc": "Contains parsed monitor contention slices with the parent-child relationships.", "type": "TABLE", "cols": [{"name": "parent_id", "type": "LONG", "desc": "Id of monitor contention slice blocking this contention.", "table": null, "column": null}, {"name": "blocking_method", "type": "STRING", "desc": "Name of the method holding the lock.", "table": null, "column": null}, {"name": "blocked_method", "type": "STRING", "desc": "Blocked_method without arguments and return types.", "table": null, "column": null}, {"name": "short_blocking_method", "type": "STRING", "desc": "Blocking_method without arguments and return types.", "table": null, "column": null}, {"name": "short_blocked_method", "type": "STRING", "desc": "Blocked_method without arguments and return types.", "table": null, "column": null}, {"name": "blocking_src", "type": "STRING", "desc": "File location of blocking_method in form <filename:linenumber>.", "table": null, "column": null}, {"name": "blocked_src", "type": "STRING", "desc": "File location of blocked_method in form <filename:linenumber>.", "table": null, "column": null}, {"name": "waiter_count", "type": "LONG", "desc": "Zero indexed number of threads trying to acquire the lock.", "table": null, "column": null}, {"name": "blocked_utid", "type": "JOINID(thread.id)", "desc": "Utid of thread holding the lock.", "table": "thread", "column": "id"}, {"name": "blocked_thread_name", "type": "STRING", "desc": "Thread name of thread holding the lock.", "table": null, "column": null}, {"name": "blocking_utid", "type": "JOINID(thread.id)", "desc": "Utid of thread holding the lock.", "table": "thread", "column": "id"}, {"name": "blocking_thread_name", "type": "STRING", "desc": "Thread name of thread holding the lock.", "table": null, "column": null}, {"name": "blocking_tid", "type": "LONG", "desc": "Tid of thread holding the lock.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of process experiencing lock contention.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Process name of process experiencing lock contention.", "table": null, "column": null}, {"name": "id", "type": "LONG", "desc": "Slice id of lock contention.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of lock contention start.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Wall clock duration of lock contention.", "table": null, "column": null}, {"name": "monotonic_dur", "type": "DURATION", "desc": "Monotonic clock duration of lock contention.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Thread track id of blocked thread.", "table": "track", "column": "id"}, {"name": "is_blocked_thread_main", "type": "LONG", "desc": "Whether the blocked thread is the main thread.", "table": null, "column": null}, {"name": "blocked_thread_tid", "type": "LONG", "desc": "Tid of the blocked thread", "table": null, "column": null}, {"name": "is_blocking_thread_main", "type": "LONG", "desc": "Whether the blocking thread is the main thread.", "table": null, "column": null}, {"name": "blocking_thread_tid", "type": "LONG", "desc": "Tid of thread holding the lock.", "table": null, "column": null}, {"name": "binder_reply_id", "type": "LONG", "desc": "Slice id of binder reply slice if lock contention was part of a binder txn.", "table": null, "column": null}, {"name": "binder_reply_ts", "type": "TIMESTAMP", "desc": "Timestamp of binder reply slice if lock contention was part of a binder txn.", "table": null, "column": null}, {"name": "binder_reply_tid", "type": "LONG", "desc": "Tid of binder reply slice if lock contention was part of a binder txn.", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "Pid of process experiencing lock contention.", "table": null, "column": null}, {"name": "child_id", "type": "LONG", "desc": "Id of monitor contention slice blocked by this contention.", "table": null, "column": null}]}, {"name": "android_monitor_contention_chain_thread_state", "desc": "Contains the span join of the first waiters in the |android_monitor_contention_chain| with their\n blocking_thread thread state.\n\n Note that we only span join the duration where the lock was actually held and contended.\n This can be less than the duration the lock was 'waited on' when a different waiter acquired the\n lock earlier than the first waiter.", "summary_desc": "Contains the span join of the first waiters in the |android_monitor_contention_chain| with their  blocking_thread thread state.   Note that we only span join the duration where the lock was actually held and contended.  This can be less than the duration the lock was 'waited on' when a different waiter acquired the  lock earlier than the first waiter.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Slice id of lock contention.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of lock contention start.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Wall clock duration of lock contention.", "table": null, "column": null}, {"name": "blocking_utid", "type": "JOINID(thread.id)", "desc": "Utid of the blocking |thread_state|.", "table": "thread", "column": "id"}, {"name": "blocked_function", "type": "STRING", "desc": "Blocked kernel function of the blocking thread.", "table": null, "column": null}, {"name": "state", "type": "STRING", "desc": "Thread state of the blocking thread.", "table": null, "column": null}]}, {"name": "android_monitor_contention_chain_thread_state_by_txn", "desc": "Aggregated thread_states on the 'blocking thread', the thread holding the lock.\n This builds on the data from |android_monitor_contention_chain| and\n for each contention slice, it returns the aggregated sum of all the thread states on the\n blocking thread.\n\n Note that this data is only available for the first waiter on a lock.", "summary_desc": "Aggregated thread_states on the 'blocking thread', the thread holding the lock.  This builds on the data from |android_monitor_contention_chain| and  for each contention slice, it returns the aggregated sum of all the thread states on the  blocking thread.   Note that this data is only available for the first waiter on a lock.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Slice id of the monitor contention.", "table": null, "column": null}, {"name": "thread_state", "type": "STRING", "desc": "A |thread_state| that occurred in the blocking thread during the contention.", "table": null, "column": null}, {"name": "thread_state_dur", "type": "DURATION", "desc": "Total time the blocking thread spent in the |thread_state| during contention.", "table": null, "column": null}, {"name": "thread_state_count", "type": "LONG", "desc": "Count of all times the blocking thread entered |thread_state| during the contention.", "table": null, "column": null}]}, {"name": "android_monitor_contention_chain_blocked_functions_by_txn", "desc": "Aggregated blocked_functions on the 'blocking thread', the thread holding the lock.\n This builds on the data from |android_monitor_contention_chain| and\n for each contention, it returns the aggregated sum of all the kernel\n blocked function durations on the blocking thread.\n\n Note that this data is only available for the first waiter on a lock.", "summary_desc": "Aggregated blocked_functions on the 'blocking thread', the thread holding the lock.  This builds on the data from |android_monitor_contention_chain| and  for each contention, it returns the aggregated sum of all the kernel  blocked function durations on the blocking thread.   Note that this data is only available for the first waiter on a lock.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Slice id of the monitor contention.", "table": null, "column": null}, {"name": "blocked_function", "type": "STRING", "desc": "Blocked kernel function in a thread state in the blocking thread during the contention.", "table": null, "column": null}, {"name": "blocked_function_dur", "type": "DURATION", "desc": "Total time the blocking thread spent in the |blocked_function| during the contention.", "table": null, "column": null}, {"name": "blocked_function_count", "type": "LONG", "desc": "Count of all times the blocking thread executed the |blocked_function| during the contention.", "table": null, "column": null}]}], "functions": [{"name": "android_extract_android_monitor_contention_blocking_thread", "desc": "Extracts the blocking thread from a slice name", "summary_desc": "Extracts the blocking thread from a slice name", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Blocking thread"}, {"name": "android_extract_android_monitor_contention_blocking_tid", "desc": "Extracts the blocking thread tid from a slice name", "summary_desc": "Extracts the blocking thread tid from a slice name", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Blocking thread tid"}, {"name": "android_extract_android_monitor_contention_blocking_method", "desc": "Extracts the blocking method from a slice name", "summary_desc": "Extracts the blocking method from a slice name", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Blocking thread"}, {"name": "android_extract_android_monitor_contention_short_blocking_method", "desc": "Extracts a shortened form of the blocking method name from a slice name.\n The shortened form discards the parameter and return\n types.", "summary_desc": "Extracts a shortened form of the blocking method name from a slice name.  The shortened form discards the parameter and return  types.", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Blocking thread"}, {"name": "android_extract_android_monitor_contention_blocked_method", "desc": "Extracts the monitor contention blocked method from a slice name", "summary_desc": "Extracts the monitor contention blocked method from a slice name", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Blocking thread"}, {"name": "android_extract_android_monitor_contention_short_blocked_method", "desc": "Extracts a shortened form of the monitor contention blocked method name\n from a slice name. The shortened form discards the parameter and return\n types.", "summary_desc": "Extracts a shortened form of the monitor contention blocked method name  from a slice name", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Blocking thread"}, {"name": "android_extract_android_monitor_contention_waiter_count", "desc": "Extracts the number of waiters on the monitor from a slice name", "summary_desc": "Extracts the number of waiters on the monitor from a slice name", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Count of waiters on the lock"}, {"name": "android_extract_android_monitor_contention_blocking_src", "desc": "Extracts the monitor contention blocking source location from a slice name", "summary_desc": "Extracts the monitor contention blocking source location from a slice name", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Blocking thread"}, {"name": "android_extract_android_monitor_contention_blocked_src", "desc": "Extracts the monitor contention blocked source location from a slice name", "summary_desc": "Extracts the monitor contention blocked source location from a slice name", "args": [{"name": "slice_name", "type": "STRING", "desc": "Name of slice", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Blocking thread"}], "table_functions": [{"name": "android_monitor_contention_graph", "desc": "Returns a DAG of all Java lock contentions in a process.\n Each node in the graph is a <thread:Java method> pair.\n Each edge connects from a node waiting on a lock to a node holding a lock.\n The weights of each node represent the cumulative wall time the node blocked\n other nodes connected to it.", "summary_desc": "Returns a DAG of all Java lock contentions in a process.  Each node in the graph is a <thread:Java method> pair.  Each edge connects from a node waiting on a lock to a node holding a lock.  The weights of each node represent the cumulative wall time the node blocked  other nodes connected to it.", "args": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of process to generate a lock graph for.", "table": "process", "column": "id"}], "cols": [{"name": "pprof", "type": "BYTES", "table": null, "column": null, "desc": "Pprof of lock graph."}]}], "macros": []}, {"module_name": "android.network_packets", "data_objects": [{"name": "android_network_packets", "desc": "Android network packet events (from android.network_packets data source).", "summary_desc": "Android network packet events (from android.network_packets data source).", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Id of the slice.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration (non-zero only in aggregate events)", "table": null, "column": null}, {"name": "track_name", "type": "STRING", "desc": "The track name (interface and direction)", "table": null, "column": null}, {"name": "package_name", "type": "STRING", "desc": "Traffic package source (or uid=$X if not found)", "table": null, "column": null}, {"name": "iface", "type": "STRING", "desc": "Traffic interface name (linux interface name)", "table": null, "column": null}, {"name": "direction", "type": "STRING", "desc": "Traffic direction ('Transmitted' or 'Received')", "table": null, "column": null}, {"name": "packet_count", "type": "LONG", "desc": "Number of packets in this event", "table": null, "column": null}, {"name": "packet_length", "type": "LONG", "desc": "Number of bytes in this event (wire size)", "table": null, "column": null}, {"name": "packet_transport", "type": "STRING", "desc": "Transport used for traffic in this event", "table": null, "column": null}, {"name": "packet_tcp_flags", "type": "LONG", "desc": "TCP flags used by tcp frames in this event", "table": null, "column": null}, {"name": "socket_tag", "type": "STRING", "desc": "The Android traffic tag of the network socket", "table": null, "column": null}, {"name": "socket_uid", "type": "LONG", "desc": "The Linux user id of the network socket", "table": null, "column": null}, {"name": "local_port", "type": "LONG", "desc": "The local port number (for udp or tcp only)", "table": null, "column": null}, {"name": "remote_port", "type": "LONG", "desc": "The remote port number (for udp or tcp only)", "table": null, "column": null}, {"name": "packet_icmp_type", "type": "LONG", "desc": "1-byte ICMP type identifier.", "table": null, "column": null}, {"name": "packet_icmp_code", "type": "LONG", "desc": "1-byte ICMP code identifier.", "table": null, "column": null}, {"name": "packet_tcp_flags_int", "type": "LONG", "desc": "Packet's tcp flags bitmask (e.g. FIN=0x1, SYN=0x2).", "table": null, "column": null}, {"name": "socket_tag_int", "type": "LONG", "desc": "Packet's socket tag as an integer.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": [{"name": "android_network_uptime_spans", "desc": "Computes network uptime spans based on an idle timeout model.\n\n It is common in networking to have an interface active for some time after\n use. For example, mobile networks are often connected for 10 or more seconds\n after the last packet is sent or received. This macro simulates this timeout\n and returns spans that approximate the underlying connected regions.", "summary_desc": "Computes network uptime spans based on an idle timeout model.   It is common in networking to have an interface active for some time after  use", "return_desc": "", "return_type": "TableOrSubquery", "args": [{"name": "src", "type": "TableOrSubquery", "desc": "A table/view/subquery containing the network events to apply the idle timeout model to. The table must contain all partition_columns, ts, dur, packet_count, and packet_length.", "table": null, "column": null}, {"name": "partition_columns", "type": "ColumnNameList", "desc": "A parenthesized set of columns to partition the analysis by.", "table": null, "column": null}, {"name": "timeout", "type": "Expr", "desc": "The idle timeout, expressed in nanoseconds.", "table": null, "column": null}]}, {"name": "android_network_uptime_cost", "desc": "Compute the per-row uptime cost of network activity.\n\n It is common in networking to have an interface active for some time after\n use. For example, mobile networks are often connected for 10 or more seconds\n after the last packet is sent or received. This macro computes a cost factor\n indicating how much each row impacts the idle timer.\n\n For example, assuming a 10s timeout, the first packet will extend the timeout\n 10s in the future, and be assigned 10s of cost. If a packet arrives 4s later,\n it pushes the timer an additional 4s, receiving 4s of cost. In this simple\n case, cost is MIN(ts-last_packet_ts, timeout).\n\n The complication is that network events can be aggregates, with more than one\n packet. In such cases, we end up with a span with non-zero duration, rather\n than an instant, and no easy way to compute time since the last packet.\n\n The solution is to detect overlap regions and compute cost for the region as\n a whole. The first event in each group receives the standard uptime cost as\n described above. Each group has an additional cost equal to the duration of\n the group which is distributed using packet count as weight.\n\n For example (times in seconds, no partition, and 10 second timeout):\n ```\n ts=5,  dur=0, packet_count=1  -> group=1, uptime_cost=10\n ts=7,  dur=0, packet_count=1  -> group=2, uptime_cost=2\n ts=20, dur=5, packet_count=9  -> group=3, uptime_cost=14.5\n ts=22, dur=0, packet_count=1  -> group=3, uptime_cost=0.5\n ```\n The third group spans ts=20 to ts=25, with a timeout at ts=35. This gives the\n group a total cost of 15 which is distributed between the two rows. The 3rd\n row receives 10s for being first, and 9/10 the duration cost (5*9/10=4.5).\n\n The returned table schema is (id ID, uptime_cost INT64) where uptime cost is\n in nanoseconds.", "summary_desc": "Compute the per-row uptime cost of network activity.   It is common in networking to have an interface active for some time after  use", "return_desc": "", "return_type": "TableOrSubquery", "args": [{"name": "src", "type": "TableOrSubquery", "desc": "A table/view/subquery containing the network events to apply the idle timeout model to. The table must contain all partition_columns, id, ts, dur, and packet_count.", "table": null, "column": null}, {"name": "partition_columns", "type": "ColumnNameList", "desc": "A parenthesized set of columns to partition the analysis by.", "table": null, "column": null}, {"name": "timeout", "type": "Expr", "desc": "The idle timeout, expressed in nanoseconds.", "table": null, "column": null}]}]}, {"module_name": "android.oom_adjuster", "data_objects": [{"name": "android_oom_adj_intervals", "desc": "All oom adj state intervals across all processes along with the reason for the state update.", "summary_desc": "All oom adj state intervals across all processes along with the reason for the state update.", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp the oom_adj score of the process changed", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration until the next oom_adj score change of the process.", "table": null, "column": null}, {"name": "score", "type": "LONG", "desc": "oom_adj score of the process.", "table": null, "column": null}, {"name": "bucket", "type": "STRING", "desc": "oom_adj bucket of the process.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of the process having an oom_adj update.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process having an oom_adj update.", "table": null, "column": null}, {"name": "oom_adj_id", "type": "LONG", "desc": "Slice id of the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_ts", "type": "TIMESTAMP", "desc": "Timestamp of the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_dur", "type": "DURATION", "desc": "Duration of the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_track_id", "type": "JOINID(track.id)", "desc": "Track id of the latest oom_adj update in the system_server", "table": "track", "column": "id"}, {"name": "oom_adj_thread_name", "type": "STRING", "desc": "Thread name of the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_reason", "type": "STRING", "desc": "Reason for the latest oom_adj update in the system_server.", "table": null, "column": null}, {"name": "oom_adj_trigger", "type": "STRING", "desc": "Trigger for the latest oom_adj update in the system_server.", "table": null, "column": null}]}], "functions": [{"name": "android_oom_adj_score_to_bucket_name", "desc": "Converts an oom_adj score Integer to String sample name.\n One of: cached, background, job, foreground_service, bfgs, foreground and\n system.", "summary_desc": "Converts an oom_adj score Integer to String sample name.  One of: cached, background, job, foreground_service, bfgs, foreground and  system.", "args": [{"name": "oom_score", "type": "LONG", "desc": "`oom_score` value", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Returns the sample bucket based on the oom score."}, {"name": "android_oom_adj_score_to_detailed_bucket_name", "desc": "Converts an oom_adj score Integer to String bucket name.\n Deprecated: use `android_oom_adj_score_to_bucket_name` instead.", "summary_desc": "Converts an oom_adj score Integer to String bucket name.  Deprecated: use `android_oom_adj_score_to_bucket_name` instead.", "args": [{"name": "value", "type": "LONG", "desc": "oom_adj score.", "table": null, "column": null}, {"name": "android_appid", "type": "LONG", "desc": "android_app id of the process.", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Returns the oom_adj bucket."}], "table_functions": [], "macros": []}, {"module_name": "android.power_rails", "data_objects": [{"name": "android_power_rails_counters", "desc": "Android power rails counters data.\n For details see: https://perfetto.dev/docs/data-sources/battery-counters#odpm\n NOTE: Requires dedicated hardware - table is only populated on Pixels.", "summary_desc": "Android power rails counters data.  For details see: https://perfetto.dev/docs/data-sources/battery-counters#odpm  NOTE: Requires dedicated hardware - table is only populated on Pixels.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(counter.id)", "desc": "`counter.id`", "table": "counter", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the energy measurement.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Time until the next energy measurement.", "table": null, "column": null}, {"name": "power_rail_name", "type": "STRING", "desc": "Power rail name. Alias of `counter_track.name`.", "table": null, "column": null}, {"name": "raw_power_rail_name", "type": "STRING", "desc": "Raw power rail name.", "table": null, "column": null}, {"name": "energy_since_boot", "type": "DOUBLE", "desc": "Energy accumulated by this rail since boot in microwatt-seconds (uWs) (AKA micro-joules). Alias of `counter.value`.", "table": null, "column": null}, {"name": "energy_since_boot_at_end", "type": "DOUBLE", "desc": "Energy accumulated by this rail at next energy measurement in microwatt-seconds (uWs) (AKA micro-joules). Alias of `counter.value` of the next meaningful (with value change) counter value.", "table": null, "column": null}, {"name": "average_power", "type": "DOUBLE", "desc": "Average power in mW (milliwatts) over between ts and the next energy measurement.", "table": null, "column": null}, {"name": "energy_delta", "type": "DOUBLE", "desc": "The change of energy accumulated by this rails since the last measurement in microwatt-seconds (uWs) (AKA micro-joules).", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Power rail track id. Alias of `counter_track.id`.", "table": "track", "column": "id"}, {"name": "value", "type": "DOUBLE", "desc": "DEPRECATED. Use `energy_since_boot` instead.", "table": null, "column": null}]}, {"name": "android_power_rails_metadata", "desc": "High level metadata about each of the power rails.", "summary_desc": "High level metadata about each of the power rails.", "type": "TABLE", "cols": [{"name": "power_rail_name", "type": "STRING", "desc": "Power rail name. Alias of `counter_track.name`.", "table": null, "column": null}, {"name": "raw_power_rail_name", "type": "STRING", "desc": "Raw power rail name from the hardware.", "table": null, "column": null}, {"name": "friendly_name", "type": "STRING", "desc": "User-friendly name for the power rail.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Power rail track id. Alias of `counter_track.id`.", "table": "track", "column": "id"}, {"name": "subsystem_name", "type": "STRING", "desc": "Subsystem name that this power rail belongs to.", "table": null, "column": null}, {"name": "machine_id", "type": "JOINID(machine.id)", "desc": "The device the power rail is associated with.", "table": "machine", "column": "id"}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.process_metadata", "data_objects": [{"name": "android_process_metadata", "desc": "Data about packages running on the process.", "summary_desc": "Data about packages running on the process.", "type": "TABLE", "cols": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Process upid.", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Process pid.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Process name.", "table": null, "column": null}, {"name": "uid", "type": "LONG", "desc": "Android app UID.", "table": null, "column": null}, {"name": "shared_uid", "type": "BOOL", "desc": "Whether the UID is shared by multiple packages.", "table": null, "column": null}, {"name": "user_id", "type": "LONG", "desc": "Android user id for multi-user devices", "table": null, "column": null}, {"name": "package_name", "type": "STRING", "desc": "Name of the packages running in this process.", "table": null, "column": null}, {"name": "version_code", "type": "LONG", "desc": "Package version code.", "table": null, "column": null}, {"name": "debuggable", "type": "LONG", "desc": "Whether package is debuggable.", "table": null, "column": null}, {"name": "is_kernel_task", "type": "BOOL", "desc": "Whether the task is kernel or not", "table": null, "column": null}]}], "functions": [{"name": "android_is_kernel_task", "desc": "Returns true if the process is a kernel task.", "summary_desc": "Returns true if the process is a kernel task.", "args": [{"name": "upid", "type": "LONG", "desc": "Queried process", "table": null, "column": null}], "return_type": "BOOL", "return_desc": "True for kernel tasks"}], "table_functions": [], "macros": []}, {"module_name": "android.screen_state", "data_objects": [{"name": "android_screen_state", "desc": "Table of the screen state - on, off or doze (always on display).", "summary_desc": "Table of the screen state - on, off or doze (always on display).", "type": "TABLE", "cols": [{"name": "id", "type": "ID", "desc": "ID.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration.", "table": null, "column": null}, {"name": "simple_screen_state", "type": "STRING", "desc": "Simplified screen state: 'unknown', 'off', 'doze' (AoD) or 'on'", "table": null, "column": null}, {"name": "short_screen_state", "type": "STRING", "desc": "Full screen state, adding VR and suspended-while-displaying states.", "table": null, "column": null}, {"name": "screen_state", "type": "STRING", "desc": "Human-readable string.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.screenshots", "data_objects": [{"name": "android_screenshots", "desc": "Screenshot slices, used in perfetto UI.", "summary_desc": "Screenshot slices, used in perfetto UI.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Id of the screenshot slice.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Slice timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Slice duration, should be typically 0 since screeenshot slices are of instant type.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Slice name.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.services", "data_objects": [{"name": "android_service_bindings", "desc": "All service bindings from client app to server app.", "summary_desc": "All service bindings from client app to server app.", "type": "TABLE", "cols": [{"name": "client_oom_score", "type": "LONG", "desc": "OOM score of client process making the binding.", "table": null, "column": null}, {"name": "client_process", "type": "STRING", "desc": "Name of client process making the binding.", "table": null, "column": null}, {"name": "client_thread", "type": "STRING", "desc": "Name of client thread making the binding.", "table": null, "column": null}, {"name": "client_pid", "type": "LONG", "desc": "Pid of client process making the binding.", "table": null, "column": null}, {"name": "client_tid", "type": "LONG", "desc": "Tid of client process making the binding.", "table": null, "column": null}, {"name": "client_upid", "type": "JOINID(process.id)", "desc": "Upid of client process making the binding.", "table": "process", "column": "id"}, {"name": "client_utid", "type": "JOINID(thread.id)", "desc": "Utid of client thread making the binding.", "table": "thread", "column": "id"}, {"name": "client_ts", "type": "TIMESTAMP", "desc": "Timestamp the client process made the request.", "table": null, "column": null}, {"name": "client_dur", "type": "DURATION", "desc": "Duration of the client binding request.", "table": null, "column": null}, {"name": "server_oom_score", "type": "LONG", "desc": "OOM score of server process getting bound to.", "table": null, "column": null}, {"name": "server_process", "type": "STRING", "desc": "Name of server process getting bound to", "table": null, "column": null}, {"name": "server_thread", "type": "STRING", "desc": "Name of server thread getting bound to.", "table": null, "column": null}, {"name": "server_pid", "type": "LONG", "desc": "Pid of server process getting bound to.", "table": null, "column": null}, {"name": "server_tid", "type": "LONG", "desc": "Tid of server process getting bound to.", "table": null, "column": null}, {"name": "server_upid", "type": "JOINID(process.id)", "desc": "Upid of server process getting bound to.", "table": "process", "column": "id"}, {"name": "server_utid", "type": "JOINID(thread.id)", "desc": "Utid of server process getting bound to.", "table": "thread", "column": "id"}, {"name": "server_ts", "type": "TIMESTAMP", "desc": "Timestamp the server process got bound to.", "table": null, "column": null}, {"name": "server_dur", "type": "DURATION", "desc": "Duration of the server process handling the binding.", "table": null, "column": null}, {"name": "token", "type": "STRING", "desc": "Unique binder identifier for the Service binding.", "table": null, "column": null}, {"name": "act", "type": "STRING", "desc": "Intent action name for the service binding.", "table": null, "column": null}, {"name": "cmp", "type": "STRING", "desc": "Intent component name for the service binding.", "table": null, "column": null}, {"name": "flg", "type": "STRING", "desc": "Intent flag for the service binding.", "table": null, "column": null}, {"name": "bind_seq", "type": "LONG", "desc": "Monotonically increasing id for the service binding.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.slices", "data_objects": [], "functions": [{"name": "android_standardize_slice_name", "desc": "Some slice names have params in them. This functions removes them to make it\n possible to aggregate by name.\n Some examples are:\n  - Lock/monitor contention slices. The name includes where the lock\n    contention is in the code. That part is removed.\n  - DrawFrames/ooFrame. The name also includes the frame number.\n  - Apk/oat/dex loading: The name of the apk is removed", "summary_desc": "Some slice names have params in them", "args": [{"name": "name", "type": "STRING", "desc": "The raw slice name.", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Simplified name."}], "table_functions": [], "macros": []}, {"module_name": "android.startup.startup_breakdowns", "data_objects": [{"name": "android_startup_opinionated_breakdown", "desc": "Blended thread state and slice breakdown blocking app startups.\n\n Each row blames a unique period during an app startup with a reason\n derived from the slices and thread states on the main thread.\n\n Some helpful events to enables are binder transactions, ART, am and view.", "summary_desc": "Blended thread state and slice breakdown blocking app startups.   Each row blames a unique period during an app startup with a reason  derived from the slices and thread states on the main thread.   Some helpful events to enables are binder transactions, ART, am and view.", "type": "TABLE", "cols": [{"name": "startup_id", "type": "JOINID(android_startups.startup_id)", "desc": "Startup id.", "table": "android_startups", "column": "startup_id"}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Id of relevant slice blocking startup.", "table": "slice", "column": "id"}, {"name": "thread_state_id", "type": "JOINID(thread_state.id)", "desc": "Id of thread_state blocking startup.", "table": "thread_state", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of an exclusive interval during the app startup with a single latency reason.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of an exclusive interval during the app startup with a single latency reason.", "table": null, "column": null}, {"name": "reason", "type": "STRING", "desc": "Cause of delay during an exclusive interval of the app startup.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.startup.startup_events", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.startup.startups", "data_objects": [{"name": "android_startup_processes", "desc": "Maps a startup to the set of processes that handled the activity start.\n\n The vast majority of cases should be a single process. However it is\n possible that the process dies during the activity startup and is respawned.", "summary_desc": "Maps a startup to the set of processes that handled the activity start.   The vast majority of cases should be a single process", "type": "TABLE", "cols": [{"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of process on which activity started.", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Pid of process on which activity started.", "table": null, "column": null}, {"name": "startup_type", "type": "STRING", "desc": "Type of the startup.", "table": null, "column": null}]}, {"name": "android_startups", "desc": "All activity startups in the trace by startup id.\n Populated by different scripts depending on the platform version/contents.", "summary_desc": "All activity startups in the trace by startup id.  Populated by different scripts depending on the platform version/contents.", "type": "VIEW", "cols": [{"name": "startup_id", "type": "ID", "desc": "Startup id.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of startup start.", "table": null, "column": null}, {"name": "ts_end", "type": "LONG", "desc": "Timestamp of startup end.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Startup duration.", "table": null, "column": null}, {"name": "package", "type": "STRING", "desc": "Package name.", "table": null, "column": null}, {"name": "startup_type", "type": "STRING", "desc": "Startup type.", "table": null, "column": null}]}, {"name": "android_startup_threads", "desc": "Maps a startup to the set of threads on processes that handled the\n activity start.", "summary_desc": "Maps a startup to the set of threads on processes that handled the  activity start.", "type": "VIEW", "cols": [{"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of start.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of startup.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of process involved in startup.", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Pid if process involved in startup.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Utid of the thread.", "table": "thread", "column": "id"}, {"name": "tid", "type": "LONG", "desc": "Tid of the thread.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread.", "table": null, "column": null}, {"name": "is_main_thread", "type": "BOOL", "desc": "Thread is a main thread.", "table": null, "column": null}]}, {"name": "android_thread_slices_for_all_startups", "desc": "All the slices for all startups in trace.\n\n Generally, this view should not be used. Instead, use one of the view functions related\n to the startup slices which are created from this table.", "summary_desc": "All the slices for all startups in trace.   Generally, this view should not be used", "type": "VIEW", "cols": [{"name": "startup_ts", "type": "TIMESTAMP", "desc": "Timestamp of startup.", "table": null, "column": null}, {"name": "startup_ts_end", "type": "LONG", "desc": "Timestamp of startup end.", "table": null, "column": null}, {"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "UTID of thread with slice.", "table": "thread", "column": "id"}, {"name": "tid", "type": "LONG", "desc": "Tid of thread.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Name of thread.", "table": null, "column": null}, {"name": "is_main_thread", "type": "BOOL", "desc": "Whether it is main thread.", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Arg set id.", "table": null, "column": null}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Slice id.", "table": "slice", "column": "id"}, {"name": "slice_name", "type": "STRING", "desc": "Name of slice.", "table": null, "column": null}, {"name": "slice_ts", "type": "TIMESTAMP", "desc": "Timestamp of slice start.", "table": null, "column": null}, {"name": "slice_dur", "type": "LONG", "desc": "Slice duration.", "table": null, "column": null}]}, {"name": "android_class_loading_for_startup", "desc": "A Perfetto view that lists matching slices for class loading during app startup.", "summary_desc": "A Perfetto view that lists matching slices for class loading during app startup.", "type": "VIEW", "cols": [{"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Id of the slice.", "table": "slice", "column": "id"}, {"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "slice_name", "type": "STRING", "desc": "Name of the slice.", "table": null, "column": null}, {"name": "slice_ts", "type": "TIMESTAMP", "desc": "Timestamp of start of the slice.", "table": null, "column": null}, {"name": "slice_dur", "type": "DURATION", "desc": "Duration of the slice.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread with the slice.", "table": null, "column": null}, {"name": "tid", "type": "LONG", "desc": "Tid of the thread with the slice.", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Arg set id.", "table": null, "column": null}]}], "functions": [{"name": "android_sum_dur_for_startup_and_slice", "desc": "Returns duration of startup for slice name.\n\n Sums duration of all slices of startup with provided name.", "summary_desc": "Returns duration of startup for slice name.   Sums duration of all slices of startup with provided name.", "args": [{"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "slice_name", "type": "STRING", "desc": "Slice name.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Sum of duration."}, {"name": "android_sum_dur_on_main_thread_for_startup_and_slice", "desc": "Returns duration of startup for slice name on main thread.\n\n Sums duration of all slices of startup with provided name only on main thread.", "summary_desc": "Returns duration of startup for slice name on main thread.   Sums duration of all slices of startup with provided name only on main thread.", "args": [{"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "slice_name", "type": "STRING", "desc": "Slice name.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Sum of duration."}], "table_functions": [{"name": "android_slices_for_startup_and_slice_name", "desc": "Given a startup id and GLOB for a slice name, returns matching slices with data.", "summary_desc": "Given a startup id and GLOB for a slice name, returns matching slices with data.", "args": [{"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "slice_name", "type": "STRING", "desc": "Glob of the slice.", "table": null, "column": null}], "cols": [{"name": "slice_id", "type": "JOINID(slice.id)", "table": "slice", "column": "id", "desc": "Id of the slice."}, {"name": "slice_name", "type": "STRING", "table": null, "column": null, "desc": "Name of the slice."}, {"name": "slice_ts", "type": "TIMESTAMP", "table": null, "column": null, "desc": "Timestamp of start of the slice."}, {"name": "slice_dur", "type": "DURATION", "table": null, "column": null, "desc": "Duration of the slice."}, {"name": "thread_name", "type": "STRING", "table": null, "column": null, "desc": "Name of the thread with the slice."}, {"name": "tid", "type": "LONG", "table": null, "column": null, "desc": "Tid of the thread with the slice."}, {"name": "arg_set_id", "type": "ARGSETID", "table": null, "column": null, "desc": "Arg set id."}]}, {"name": "android_binder_transaction_slices_for_startup", "desc": "Returns binder transaction slices for a given startup id with duration over threshold.", "summary_desc": "Returns binder transaction slices for a given startup id with duration over threshold.", "args": [{"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "threshold", "type": "DOUBLE", "desc": "Only return slices with duration over threshold.", "table": null, "column": null}], "cols": [{"name": "id", "type": "LONG", "table": null, "column": null, "desc": "Slice id."}, {"name": "slice_dur", "type": "DURATION", "table": null, "column": null, "desc": "Slice duration."}, {"name": "thread_name", "type": "STRING", "table": null, "column": null, "desc": "Name of the thread with slice."}, {"name": "process", "type": "STRING", "table": null, "column": null, "desc": "Name of the process with slice."}, {"name": "arg_set_id", "type": "ARGSETID", "table": null, "column": null, "desc": "Arg set id."}, {"name": "is_main_thread", "type": "BOOL", "table": null, "column": null, "desc": "Whether is main thread."}]}], "macros": []}, {"module_name": "android.startup.startups_maxsdk28", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.startup.startups_minsdk29", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.startup.startups_minsdk33", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.startup.time_to_display", "data_objects": [{"name": "android_startup_time_to_display", "desc": "Startup metric defintions, which focus on the observable time range:\n TTID - Time To Initial Display\n * https://developer.android.com/topic/performance/vitals/launch-time#time-initial\n * end of first RenderThread.DrawFrame - bindApplication\n TTFD - Time To Full Display\n * https://developer.android.com/topic/performance/vitals/launch-time#retrieve-TTFD\n * end of next RT.DrawFrame, after reportFullyDrawn called - bindApplication\n Googlers: see go/android-performance-metrics-glossary for details.", "summary_desc": "Startup metric defintions, which focus on the observable time range:  TTID - Time To Initial Display  * https://developer.android.com/topic/performance/vitals/launch-time#time-initial  * end of first RenderThread.DrawFrame - bindApplication  TTFD - Time To Full Display  * https://developer.android.com/topic/performance/vitals/launch-time#retrieve-TTFD  * end of next RT.DrawFrame, after reportFullyDrawn called - bindApplication  Googlers: see go/android-performance-metrics-glossary for details.", "type": "TABLE", "cols": [{"name": "startup_id", "type": "LONG", "desc": "Startup id.", "table": null, "column": null}, {"name": "time_to_initial_display", "type": "LONG", "desc": "Time to initial display (TTID)", "table": null, "column": null}, {"name": "time_to_full_display", "type": "LONG", "desc": "Time to full display (TTFD)", "table": null, "column": null}, {"name": "ttid_frame_id", "type": "LONG", "desc": "`android_frames.frame_id` of frame for initial display", "table": null, "column": null}, {"name": "ttfd_frame_id", "type": "LONG", "desc": "`android_frames.frame_id` of frame for full display", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "`process.upid` of the startup", "table": "process", "column": "id"}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.statsd", "data_objects": [{"name": "android_statsd_atoms", "desc": "Statsd atoms.\n\n A subset of the slice table containing statsd atom instant events.", "summary_desc": "Statsd atoms.   A subset of the slice table containing statsd atom instant events.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Unique identifier for this slice.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp at the start of the slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the slice.", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "The id of the argument set associated with this slice.", "table": null, "column": null}, {"name": "thread_instruction_count", "type": "LONG", "desc": "The value of the CPU instruction counter at the start of the slice. This column will only be populated if thread instruction collection is enabled with track_event.", "table": null, "column": null}, {"name": "thread_instruction_delta", "type": "LONG", "desc": "The change in value of the CPU instruction counter between the start and end of the slice. This column will only be populated if thread instruction collection is enabled with track_event.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "The id of the track this slice is located on.", "table": "track", "column": "id"}, {"name": "category", "type": "STRING", "desc": "The \"category\" of the slice. If this slice originated with track_event, this column contains the category emitted. Otherwise, it is likely to be null (with limited exceptions).", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the slice. The name describes what was happening during the slice.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "The depth of the slice in the current stack of slices.", "table": null, "column": null}, {"name": "stack_id", "type": "LONG", "desc": "A unique identifier obtained from the names of all slices in this stack. This is rarely useful and kept around only for legacy reasons.", "table": null, "column": null}, {"name": "parent_stack_id", "type": "LONG", "desc": "The stack_id for the parent of this slice. Rarely useful.", "table": null, "column": null}, {"name": "parent_id", "type": "LONG", "desc": "The id of the parent (i.e. immediate ancestor) slice for this slice.", "table": null, "column": null}, {"name": "thread_ts", "type": "TIMESTAMP", "desc": "The thread timestamp at the start of the slice. This column will only be populated if thread timestamp collection is enabled with track_event.", "table": null, "column": null}, {"name": "thread_dur", "type": "LONG", "desc": "The thread time used by this slice. This column will only be populated if thread timestamp collection is enabled with track_event.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.surfaceflinger", "data_objects": [{"name": "android_app_to_sf_frame_timeline_match", "desc": "Match the frame timeline on the app side with the frame timeline on the SF side.\n In cases where there are multiple layers drawn, there would be separate frame timeline\n slice for each of the layers. GROUP BY is used to deduplicate these rows.", "summary_desc": "Match the frame timeline on the app side with the frame timeline on the SF side.  In cases where there are multiple layers drawn, there would be separate frame timeline  slice for each of the layers", "type": "TABLE", "cols": [{"name": "app_upid", "type": "JOINID(process.upid)", "desc": "upid of the app.", "table": "process", "column": "upid"}, {"name": "app_vsync", "type": "LONG", "desc": "vsync id of the app.", "table": null, "column": null}, {"name": "sf_upid", "type": "JOINID(process.upid)", "desc": "upid of surfaceflinger process.", "table": "process", "column": "upid"}, {"name": "sf_vsync", "type": "LONG", "desc": "vsync id for surfaceflinger.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.suspend", "data_objects": [{"name": "android_suspend_state", "desc": "Table of suspended and awake slices.\n\n Selects either the minimal or full ftrace source depending on what's\n available, marks suspended periods, and complements them to give awake\n periods.", "summary_desc": "Table of suspended and awake slices.   Selects either the minimal or full ftrace source depending on what's  available, marks suspended periods, and complements them to give awake  periods.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration", "table": null, "column": null}, {"name": "power_state", "type": "STRING", "desc": "'awake' or 'suspended'", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.thread", "data_objects": [], "functions": [{"name": "android_standardize_thread_name", "desc": "Standardizes an Android thread name by extracting its core identifier to make it\n possible to aggregate by name.\n\n Removes extra parts of a thread name, like identifiers, leaving only the main prefix.\n Splits the name at ('-', '[', ':' , ' ').\n\n Some Examples:\n   Given thread_name = \"RenderThread-1[123]\",\n   returns \"RenderThread\".\n\n   Given thread_name = \"binder:5543_E\"\n   returns \"binder\".\n\n   Given thread_name = \"pool-3-thread-5\",\n   returns \"pool\".\n\n   Given thread_name = \"MainThread\",\n   returns \"MainThread\".", "summary_desc": "Standardizes an Android thread name by extracting its core identifier to make it  possible to aggregate by name.   Removes extra parts of a thread name, like identifiers, leaving only the main prefix.  Splits the name at ('-', '[', ':' , ' ').   Some Examples:    Given thread_name = \"RenderThread-1[123]\",    returns \"RenderThread\".     Given thread_name = \"binder:5543_E\"    returns \"binder\".     Given thread_name = \"pool-3-thread-5\",    returns \"pool\".     Given thread_name = \"MainThread\",    returns \"MainThread\".", "args": [{"name": "thread_name", "type": "STRING", "desc": "The full android thread name to be processed.", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Simplified name"}], "table_functions": [], "macros": []}, {"module_name": "android.version", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.wakeups", "data_objects": [{"name": "android_wakeups", "desc": "Table of parsed wakeup / suspend failure events with suspend backoff.\n\n Certain wakeup events may have multiple causes. When this occurs we\n split those causes into multiple rows in this table with the same ts\n and raw_wakeup values.", "summary_desc": "Table of parsed wakeup / suspend failure events with suspend backoff.   Certain wakeup events may have multiple causes", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration for which we blame the wakeup for wakefulness. This is the suspend backoff duration if one exists, or the lesser of (5 seconds, time to next suspend event).", "table": null, "column": null}, {"name": "raw_wakeup", "type": "STRING", "desc": "Original wakeup string from the kernel.", "table": null, "column": null}, {"name": "on_device_attribution", "type": "STRING", "desc": "Wakeup attribution, as determined on device. May be absent.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "One of 'normal' (device woke from sleep), 'abort_pending' (suspend failed due to a wakeup that was scheduled by a device during the suspend process), 'abort_last_active' (suspend failed, listing the last active device) or 'abort_other' (suspend failed for another reason).", "table": null, "column": null}, {"name": "item", "type": "STRING", "desc": "Individual wakeup cause. Usually the name of the device that cause the wakeup, or the raw message in the 'abort_other' case.", "table": null, "column": null}, {"name": "suspend_quality", "type": "STRING", "desc": "'good' or 'bad'. 'bad' means failed or short such that suspend backoff is triggered.", "table": null, "column": null}, {"name": "backoff_state", "type": "STRING", "desc": "'new', 'continue' or NULL. Set if suspend backoff is triggered.", "table": null, "column": null}, {"name": "backoff_reason", "type": "STRING", "desc": "'short', 'failed' or NULL. Set if suspend backoff is triggered.", "table": null, "column": null}, {"name": "backoff_count", "type": "LONG", "desc": "Number of times suspend backoff has occurred, or NULL. Set if suspend backoff is triggered.", "table": null, "column": null}, {"name": "backoff_millis", "type": "LONG", "desc": "Next suspend backoff duration, or NULL. Set if suspend backoff is triggered.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.winscope.inputmethod", "data_objects": [{"name": "android_inputmethod_clients", "desc": "Android inputmethod clients state dumps (from android.inputmethod data source).", "summary_desc": "Android inputmethod clients state dumps (from android.inputmethod data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Dump id", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when the dump was triggered", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Extra args parsed from the proto message", "table": null, "column": null}]}, {"name": "android_inputmethod_manager_service", "desc": "Android inputmethod manager service state dumps (from android.inputmethod data source).", "summary_desc": "Android inputmethod manager service state dumps (from android.inputmethod data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Dump id", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when the dump was triggered", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Extra args parsed from the proto message", "table": null, "column": null}]}, {"name": "android_inputmethod_service", "desc": "Android inputmethod service state dumps (from android.inputmethod data source).", "summary_desc": "Android inputmethod service state dumps (from android.inputmethod data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Dump id", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when the dump was triggered", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Extra args parsed from the proto message", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.winscope.rect", "data_objects": [{"name": "android_winscope_rect", "desc": "Android Winscope rects.", "summary_desc": "Android Winscope rects.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Rect id", "table": null, "column": null}, {"name": "x", "type": "DOUBLE", "desc": "x", "table": null, "column": null}, {"name": "y", "type": "DOUBLE", "desc": "y", "table": null, "column": null}, {"name": "w", "type": "DOUBLE", "desc": "w", "table": null, "column": null}, {"name": "h", "type": "DOUBLE", "desc": "h", "table": null, "column": null}]}, {"name": "android_winscope_transform", "desc": "Android Winscope transforms.", "summary_desc": "Android Winscope transforms.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Transform id", "table": null, "column": null}, {"name": "dsdx", "type": "DOUBLE", "desc": "dsdx", "table": null, "column": null}, {"name": "dtdx", "type": "DOUBLE", "desc": "dtdx", "table": null, "column": null}, {"name": "tx", "type": "DOUBLE", "desc": "tx", "table": null, "column": null}, {"name": "dtdy", "type": "DOUBLE", "desc": "dtdy", "table": null, "column": null}, {"name": "dsdy", "type": "DOUBLE", "desc": "dsdy", "table": null, "column": null}, {"name": "ty", "type": "DOUBLE", "desc": "ty", "table": null, "column": null}]}, {"name": "android_winscope_trace_rect", "desc": "Android Winscope trace rects.", "summary_desc": "Android Winscope trace rects.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Trace rect id", "table": null, "column": null}, {"name": "rect_id", "type": "LONG", "desc": "Rect id", "table": null, "column": null}, {"name": "group_id", "type": "LONG", "desc": "Group id", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Depth", "table": null, "column": null}, {"name": "is_spy", "type": "LONG", "desc": "Is spy rect", "table": null, "column": null}, {"name": "is_visible", "type": "LONG", "desc": "Is visible", "table": null, "column": null}, {"name": "opacity", "type": "DOUBLE", "desc": "Opacity", "table": null, "column": null}, {"name": "transform_id", "type": "LONG", "desc": "Transform id", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.winscope.surfaceflinger", "data_objects": [{"name": "android_surfaceflinger_transaction", "desc": "Android surfaceflinger transactions (from android.surfaceflinger.transactions data source).", "summary_desc": "Android surfaceflinger transactions (from android.surfaceflinger.transactions data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Row id", "table": null, "column": null}, {"name": "snapshot_id", "type": "LONG", "desc": "Snapshot id", "table": null, "column": null}, {"name": "arg_set_id", "type": "LONG", "desc": "Arg set id", "table": null, "column": null}, {"name": "transaction_id", "type": "LONG", "desc": "Transaction id", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "PID", "table": null, "column": null}, {"name": "uid", "type": "LONG", "desc": "UID", "table": null, "column": null}, {"name": "layer_id", "type": "LONG", "desc": "Layer id", "table": null, "column": null}, {"name": "display_id", "type": "LONG", "desc": "Display id", "table": null, "column": null}, {"name": "flags_id", "type": "LONG", "desc": "Flags id", "table": null, "column": null}, {"name": "transaction_type", "type": "STRING", "desc": "Transaction type", "table": null, "column": null}]}, {"name": "android_surfaceflinger_transaction_flag", "desc": "Android surfaceflinger transaction flags.", "summary_desc": "Android surfaceflinger transaction flags.", "type": "VIEW", "cols": [{"name": "flags_id", "type": "LONG", "desc": "Flags id", "table": null, "column": null}, {"name": "flag", "type": "STRING", "desc": "Flag", "table": null, "column": null}]}, {"name": "android_surfaceflinger_display", "desc": "Android surfaceflinger displays (from android.surfaceflinger.layers data source).", "summary_desc": "Android surfaceflinger displays (from android.surfaceflinger.layers data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Id", "table": null, "column": null}, {"name": "snapshot_id", "type": "LONG", "desc": "Snapshot id", "table": null, "column": null}, {"name": "is_on", "type": "LONG", "desc": "Is on", "table": null, "column": null}, {"name": "is_virtual", "type": "LONG", "desc": "Is virtual", "table": null, "column": null}, {"name": "trace_rect_id", "type": "LONG", "desc": "Trace rect id", "table": null, "column": null}, {"name": "display_id", "type": "LONG", "desc": "Display id", "table": null, "column": null}, {"name": "display_name", "type": "STRING", "desc": "Display name", "table": null, "column": null}]}, {"name": "android_winscope_fill_region", "desc": "Android surfaceflinger input rect fill regions (from android.surfaceflinger.layers data source).", "summary_desc": "Android surfaceflinger input rect fill regions (from android.surfaceflinger.layers data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Fill region id", "table": null, "column": null}, {"name": "trace_rect_id", "type": "LONG", "desc": "Trace rect id", "table": null, "column": null}, {"name": "rect_id", "type": "LONG", "desc": "Rect id", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.winscope.transitions", "data_objects": [{"name": "android_window_manager_shell_transition_participants", "desc": "Android transition participants (from com.android.wm.shell.transition data source).", "summary_desc": "Android transition participants (from com.android.wm.shell.transition data source).", "type": "VIEW", "cols": [{"name": "transition_id", "type": "LONG", "desc": "Transition id", "table": null, "column": null}, {"name": "layer_id", "type": "LONG", "desc": "Layer participant", "table": null, "column": null}, {"name": "window_id", "type": "LONG", "desc": "Window participant", "table": null, "column": null}]}, {"name": "android_window_manager_shell_transition_protos", "desc": "Android transition protos (from com.android.wm.shell.transition data source).", "summary_desc": "Android transition protos (from com.android.wm.shell.transition data source).", "type": "VIEW", "cols": [{"name": "transition_id", "type": "LONG", "desc": "Transition id", "table": null, "column": null}, {"name": "base64_proto_id", "type": "LONG", "desc": "Base64 proto id", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.winscope.viewcapture", "data_objects": [{"name": "android_viewcapture", "desc": "Android viewcapture (from android.viewcapture data source).", "summary_desc": "Android viewcapture (from android.viewcapture data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Snapshot id", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when the snapshot was triggered", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Extra args parsed from the proto message", "table": null, "column": null}]}, {"name": "android_viewcapture_view", "desc": "Android viewcapture view (from android.viewcapture data source).", "summary_desc": "Android viewcapture view (from android.viewcapture data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Row id", "table": null, "column": null}, {"name": "snapshot_id", "type": "LONG", "desc": "Snapshot id", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Extra args parsed from the proto message", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "android.winscope.windowmanager", "data_objects": [{"name": "android_windowmanager", "desc": "Android WindowManager (from android.windowmanager data source).", "summary_desc": "Android WindowManager (from android.windowmanager data source).", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Snapshot id", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when the snapshot was triggered", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Extra args parsed from the proto message", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "appleos", "modules": [{"module_name": "appleos.instruments.samples", "data_objects": [{"name": "appleos_instruments_samples_summary_tree", "desc": "Table summarising the callstacks captured during all\n instruments samples in the trace.\n\n Specifically, this table returns a tree containing all\n the callstacks seen during the trace with `self_count`\n equal to the number of samples with that frame as the\n leaf and `cumulative_count` equal to the number of\n samples with the frame anywhere in the tree.", "summary_desc": "Table summarising the callstacks captured during all  instruments samples in the trace.   Specifically, this table returns a tree containing all  the callstacks seen during the trace with `self_count`  equal to the number of samples with that frame as the  leaf and `cumulative_count` equal to the number of  samples with the frame anywhere in the tree.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "The id of the callstack. A callstack in this context is a unique set of frames up to the root.", "table": null, "column": null}, {"name": "parent_id", "type": "LONG", "desc": "The id of the parent callstack for this callstack.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The function name of the frame for this callstack.", "table": null, "column": null}, {"name": "mapping_name", "type": "STRING", "desc": "The name of the mapping containing the frame. This can be a native binary, library, or JIT.", "table": null, "column": null}, {"name": "source_file", "type": "STRING", "desc": "The name of the file containing the function.", "table": null, "column": null}, {"name": "line_number", "type": "LONG", "desc": "The line number in the file the function is located at.", "table": null, "column": null}, {"name": "self_count", "type": "LONG", "desc": "The number of samples with this function as the leaf frame.", "table": null, "column": null}, {"name": "cumulative_count", "type": "LONG", "desc": "The number of samples with this function appearing anywhere on the callstack.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "callstacks", "modules": [{"module_name": "callstacks.stack_profile", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "callstacks.symbolize", "data_objects": [], "functions": [], "table_functions": [], "macros": []}]}, {"name": "chrome", "modules": [{"module_name": "chrome.android_input", "data_objects": [{"name": "chrome_deliver_android_input_event", "desc": "DeliverInputEvent is the third step in the input pipeline.\n It is responsible for routing the input events within browser process.", "summary_desc": "DeliverInputEvent is the third step in the input pipeline.  It is responsible for routing the input events within browser process.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Touch move processing duration.", "table": null, "column": null}, {"name": "utid", "type": "LONG", "desc": "Utid.", "table": null, "column": null}, {"name": "android_input_id", "type": "STRING", "desc": "Input id (assigned by the system, used by InputReader and InputDispatcher)", "table": null, "column": null}]}, {"name": "chrome_android_input", "desc": "Collects information about input reader, input dispatcher and\n DeliverInputEvent steps for the given Android input id.", "summary_desc": "Collects information about input reader, input dispatcher and  DeliverInputEvent steps for the given Android input id.", "type": "TABLE", "cols": [{"name": "android_input_id", "type": "STRING", "desc": "Input id.", "table": null, "column": null}, {"name": "input_reader_processing_start_ts", "type": "TIMESTAMP", "desc": "Input reader step start timestamp.", "table": null, "column": null}, {"name": "input_reader_processing_end_ts", "type": "TIMESTAMP", "desc": "Input reader step end timestamp.", "table": null, "column": null}, {"name": "input_reader_utid", "type": "LONG", "desc": "Input reader step utid.", "table": null, "column": null}, {"name": "input_dispatcher_processing_start_ts", "type": "TIMESTAMP", "desc": "Input dispatcher step start timestamp.", "table": null, "column": null}, {"name": "input_dispatcher_processing_end_ts", "type": "TIMESTAMP", "desc": "Input dispatcher step end timestamp.", "table": null, "column": null}, {"name": "input_dispatcher_utid", "type": "LONG", "desc": "Input dispatcher step utid.", "table": null, "column": null}, {"name": "deliver_input_event_start_ts", "type": "TIMESTAMP", "desc": "DeliverInputEvent step start timestamp.", "table": null, "column": null}, {"name": "deliver_input_event_end_ts", "type": "TIMESTAMP", "desc": "DeliverInputEvent step end timestamp.", "table": null, "column": null}, {"name": "deliver_input_event_utid", "type": "LONG", "desc": "DeliverInputEvent step utid.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.chrome_scrolls", "data_objects": [{"name": "chrome_scroll_update_refs", "desc": "Ties together input (`LatencyInfo.Flow`) and frame (`Graphics.Pipeline`)\n trace events. Only covers input events of the `GESTURE_SCROLL_UPDATE_EVENT`\n type.", "summary_desc": "Ties together input (`LatencyInfo.Flow`) and frame (`Graphics.Pipeline`)  trace events", "type": "TABLE", "cols": [{"name": "scroll_update_latency_id", "type": "LONG", "desc": "Id of the Chrome input pipeline (`LatencyInfo.Flow`).", "table": null, "column": null}, {"name": "touch_move_latency_id", "type": "LONG", "desc": "Id of the touch move input corresponding to this scroll update.", "table": null, "column": null}, {"name": "presentation_latency_id", "type": "LONG", "desc": "Id of the `EventLatency` of the frame that the input was presented in.", "table": null, "column": null}, {"name": "surface_frame_id", "type": "LONG", "desc": "Id of the frame pipeline (`Graphics.Pipeline`), pre-surface aggregation.", "table": null, "column": null}, {"name": "display_trace_id", "type": "LONG", "desc": "Id of the frame pipeline (`Graphics.Pipeline`), post-surface aggregation.", "table": null, "column": null}]}, {"name": "chrome_scroll_update_input_pipeline", "desc": "Timestamps and durations for the input-associated (before coalescing inputs\n into a frame) stages of a scroll.", "summary_desc": "Timestamps and durations for the input-associated (before coalescing inputs  into a frame) stages of a scroll.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Id of the `LatencyInfo.Flow` slices corresponding to this scroll event.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "Id of the scroll this scroll update belongs to.", "table": null, "column": null}, {"name": "presented_in_frame_id", "type": "LONG", "desc": "Id of the frame that this input was presented in. Can be joined with `chrome_scroll_update_frame_pipeline.id`.", "table": null, "column": null}, {"name": "is_presented", "type": "BOOL", "desc": "Whether this input event was presented.", "table": null, "column": null}, {"name": "is_janky", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow metric. This comes directly from `perfetto.protos.EventLatency.is_janky_scrolled_frame`.", "table": null, "column": null}, {"name": "is_janky_v3", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow3 metric. This comes directly from `perfetto.protos.EventLatency.is_janky_scrolled_frame_v3`.", "table": null, "column": null}, {"name": "is_inertial", "type": "BOOL", "desc": "Whether the corresponding scroll is inertial (fling). If this is `true`, \"generation\" and \"touch_move\" related timestamps and durations will be null.", "table": null, "column": null}, {"name": "is_first_scroll_update_in_scroll", "type": "BOOL", "desc": "Whether this is the first update in a scroll. First scroll update can never be janky.", "table": null, "column": null}, {"name": "is_first_scroll_update_in_frame", "type": "BOOL", "desc": "Whether this is the first input that was presented in frame `presented_in_frame_id`.", "table": null, "column": null}, {"name": "generation_ts", "type": "TIMESTAMP", "desc": "Input generation timestamp (from the Android system).", "table": null, "column": null}, {"name": "input_reader_processing_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the InputReader step (see android_input.sql). Only populated when atrace 'input' category is enabled.", "table": null, "column": null}, {"name": "input_dispatcher_processing_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the InputDispatcher step (see android_input.sql). Only populated when atrace 'input' category is enabled.", "table": null, "column": null}, {"name": "generation_to_browser_main_dur", "type": "DURATION", "desc": "Duration from input generation to when the browser received the input.", "table": null, "column": null}, {"name": "browser_utid", "type": "LONG", "desc": "Utid for the browser main thread.", "table": null, "column": null}, {"name": "touch_move_received_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_SEND_INPUT_EVENT_UI` slice for the touch move.", "table": null, "column": null}, {"name": "touch_move_received_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_SEND_INPUT_EVENT_UI` slice for the touch move.", "table": null, "column": null}, {"name": "touch_move_processing_dur", "type": "DURATION", "desc": "Duration for processing  a `TouchMove` event.", "table": null, "column": null}, {"name": "scroll_update_created_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_SEND_INPUT_EVENT_UI` slice for the gesture scroll.", "table": null, "column": null}, {"name": "scroll_update_created_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_SEND_INPUT_EVENT_UI` slice for the gesture scroll.", "table": null, "column": null}, {"name": "scroll_update_processing_dur", "type": "DURATION", "desc": "Duration for creating a `GestureScrollUpdate` from a `TouchMove` event.", "table": null, "column": null}, {"name": "scroll_update_created_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_SEND_INPUT_EVENT_UI` slice for the above.", "table": null, "column": null}, {"name": "browser_to_compositor_delay_dur", "type": "DURATION", "desc": "Duration between the browser and compositor dispatch.", "table": null, "column": null}, {"name": "compositor_utid", "type": "LONG", "desc": "Utid for the renderer compositor thread.", "table": null, "column": null}, {"name": "compositor_dispatch_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_HANDLE_INPUT_EVENT_IMPL` slice.", "table": null, "column": null}, {"name": "compositor_dispatch_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_HANDLE_INPUT_EVENT_IMPL` slice or the containing task (if available).", "table": null, "column": null}, {"name": "compositor_dispatch_dur", "type": "DURATION", "desc": "Duration for the compositor dispatch itself.", "table": null, "column": null}, {"name": "compositor_dispatch_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_HANDLE_INPUT_EVENT_IMPL` slice.", "table": null, "column": null}, {"name": "compositor_dispatch_to_coalesced_input_handled_dur", "type": "DURATION", "desc": "Duration between compositor dispatch and coalescing input.", "table": null, "column": null}, {"name": "compositor_coalesced_input_handled_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_DID_HANDLE_INPUT_AND_OVERSCROLL` slice.", "table": null, "column": null}, {"name": "compositor_coalesced_input_handled_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_DID_HANDLE_INPUT_AND_OVERSCROLL` slice.", "table": null, "column": null}, {"name": "compositor_coalesced_input_handled_dur", "type": "DURATION", "desc": "Duration for the `STEP_DID_HANDLE_INPUT_AND_OVERSCROLL` slice.", "table": null, "column": null}, {"name": "compositor_coalesced_input_handled_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_DID_HANDLE_INPUT_AND_OVERSCROLL` slice.", "table": null, "column": null}]}, {"name": "chrome_scroll_update_frame_pipeline", "desc": "Timestamps and durations for the frame-associated (after coalescing inputs\n into a frame) stages of a scroll.", "summary_desc": "Timestamps and durations for the frame-associated (after coalescing inputs  into a frame) stages of a scroll.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Id of the `LatencyInfo.Flow` slices corresponding to this scroll event.", "table": null, "column": null}, {"name": "display_trace_id", "type": "LONG", "desc": "Id of the aggregated frame this scroll update was presented in.", "table": null, "column": null}, {"name": "vsync_interval_ms", "type": "DOUBLE", "desc": "Vsync interval (in milliseconds).", "table": null, "column": null}, {"name": "compositor_resample_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_RESAMPLE_SCROLL_EVENTS` slice.", "table": null, "column": null}, {"name": "compositor_resample_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_RESAMPLE_SCROLL_EVENTS` slice.", "table": null, "column": null}, {"name": "compositor_receive_begin_frame_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_RECEIVE_BEGIN_FRAME` slice or the containing task (if available).", "table": null, "column": null}, {"name": "compositor_generate_compositor_frame_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_GENERATE_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "compositor_generate_compositor_frame_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_GENERATE_COMPOSITOR_FRAME` slice or the containing task (if available).", "table": null, "column": null}, {"name": "compositor_generate_frame_to_submit_frame_dur", "type": "DURATION", "desc": "Duration between generating and submitting the compositor frame.", "table": null, "column": null}, {"name": "compositor_submit_compositor_frame_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_SUBMIT_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "compositor_submit_compositor_frame_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_SUBMIT_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "compositor_submit_frame_dur", "type": "DURATION", "desc": "Duration for submitting the compositor frame (to viz).", "table": null, "column": null}, {"name": "compositor_submit_compositor_frame_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_SUBMIT_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "compositor_to_viz_delay_dur", "type": "DURATION", "desc": "Delay when a compositor frame is sent from the renderer to viz.", "table": null, "column": null}, {"name": "viz_compositor_utid", "type": "LONG", "desc": "Utid for the viz compositor thread.", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_RECEIVE_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_RECEIVE_COMPOSITOR_FRAME` slice or the containing task (if available).", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_dur", "type": "DURATION", "desc": "Duration of the viz work done on receiving the compositor frame.", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_RECEIVE_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "viz_wait_for_draw_dur", "type": "DURATION", "desc": "Duration between viz receiving the compositor frame to frame draw.", "table": null, "column": null}, {"name": "viz_draw_and_swap_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_DRAW_AND_SWAP` slice.", "table": null, "column": null}, {"name": "viz_draw_and_swap_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_DRAW_AND_SWAP` slice or the containing task (if available).", "table": null, "column": null}, {"name": "viz_draw_and_swap_dur", "type": "DURATION", "desc": "Duration for the viz drawing/swapping work for this frame.", "table": null, "column": null}, {"name": "viz_send_buffer_swap_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_SEND_BUFFER_SWAP` slice.", "table": null, "column": null}, {"name": "viz_send_buffer_swap_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_SEND_BUFFER_SWAP` slice.", "table": null, "column": null}, {"name": "viz_to_gpu_delay_dur", "type": "DURATION", "desc": "Delay between viz work on compositor thread and `CompositorGpuThread`.", "table": null, "column": null}, {"name": "viz_gpu_thread_utid", "type": "LONG", "desc": "Utid for the viz `CompositorGpuThread`.", "table": null, "column": null}, {"name": "viz_swap_buffers_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_BUFFER_SWAP_POST_SUBMIT` slice.", "table": null, "column": null}, {"name": "viz_swap_buffers_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_BUFFER_SWAP_POST_SUBMIT` slice or the containing task (if available).", "table": null, "column": null}, {"name": "viz_swap_buffers_dur", "type": "DURATION", "desc": "Duration of frame buffer swapping work on viz.", "table": null, "column": null}, {"name": "viz_swap_buffers_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_BUFFER_SWAP_POST_SUBMIT` slice.", "table": null, "column": null}, {"name": "viz_swap_buffers_to_latch_dur", "type": "DURATION", "desc": "Duration of `EventLatency`'s `BufferReadyToLatch` step.", "table": null, "column": null}, {"name": "latch_timestamp", "type": "TIMESTAMP", "desc": "Timestamp for `EventLatency`'s `LatchToSwapEnd` step.", "table": null, "column": null}, {"name": "viz_latch_to_presentation_dur", "type": "DURATION", "desc": "Duration of either `EventLatency`'s `LatchToSwapEnd` + `SwapEndToPresentationCompositorFrame` steps or its `LatchToPresentation` step.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "TIMESTAMP", "desc": "Presentation timestamp for the frame.", "table": null, "column": null}]}, {"name": "chrome_scrolls", "desc": "Defines slices for all of the individual scrolls in a trace based on the\n LatencyInfo-based scroll definition.\n\n NOTE: this view of top level scrolls is based on the LatencyInfo definition\n of a scroll, which differs subtly from the definition based on\n EventLatencies.\n TODO(b/278684408): add support for tracking scrolls across multiple Chrome/\n WebView instances. Currently gesture_scroll_id unique within an instance, but\n is not unique across multiple instances. Switching to an EventLatency based\n definition of scrolls should resolve this.", "summary_desc": "Defines slices for all of the individual scrolls in a trace based on the  LatencyInfo-based scroll definition.   NOTE: this view of top level scrolls is based on the LatencyInfo definition  of a scroll, which differs subtly from the definition based on  EventLatencies.  TODO(b/278684408): add support for tracking scrolls across multiple Chrome/  WebView instances", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "The unique identifier of the scroll.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp of the scroll.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the scroll.", "table": null, "column": null}, {"name": "gesture_scroll_begin_ts", "type": "TIMESTAMP", "desc": "The earliest timestamp of the EventLatency slice of the GESTURE_SCROLL_BEGIN type for the corresponding scroll id.", "table": null, "column": null}, {"name": "gesture_scroll_end_ts", "type": "TIMESTAMP", "desc": "The earliest timestamp of the EventLatency slice of the GESTURE_SCROLL_END type / the latest timestamp of the EventLatency slice of the GESTURE_SCROLL_UPDATE type for the corresponding scroll id.", "table": null, "column": null}]}, {"name": "chrome_scroll_update_info", "desc": "Timestamps and durations for the critical path stages during scrolling.\n This table covers both the input-associated (before coalescing inputs into a\n frame) and frame-associated (after coalescing inputs into a frame) stages of\n a scroll:\n\n                              ...\n                               |\n                +--------------+--------------+\n                |                             |\n                V                             V\n   +-------------------------+   +-------------------------+\n   | _scroll_update_INPUT_   |   | _scroll_update_FRAME_   |\n   | timestamps_and_metadata |   | timestamps_and_metadata |\n   +------------+------------+   +------------+------------+\n                |                             |\n                V                             V\n    +-----------------------+     +-----------------------+\n    | chrome_scroll_update_ |     | chrome_scroll_update_ |\n    |     INPUT_pipeline    |     |     FRAME_pipeline    |\n    +-----------+-----------+     +-----------+-----------+\n                |                             |\n                +--------------+--------------+\n                               |\n                               V\n                 +---------------------------+\n                 | chrome_scroll_update_info |\n                 +---------------------------+", "summary_desc": "Timestamps and durations for the critical path stages during scrolling.  This table covers both the input-associated (before coalescing inputs into a  frame) and frame-associated (after coalescing inputs into a frame) stages of  a scroll:                                ...                                |                 +--------------+--------------+                 |                             |                 V                             V    +-------------------------+   +-------------------------+    | _scroll_update_INPUT_   |   | _scroll_update_FRAME_   |    | timestamps_and_metadata |   | timestamps_and_metadata |    +------------+------------+   +------------+------------+                 |                             |                 V                             V     +-----------------------+     +-----------------------+     | chrome_scroll_update_ |     | chrome_scroll_update_ |     |     INPUT_pipeline    |     |     FRAME_pipeline    |     +-----------+-----------+     +-----------+-----------+                 |                             |                 +--------------+--------------+                                |                                V                  +---------------------------+                  | chrome_scroll_update_info |                  +---------------------------+", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Id of the `LatencyInfo.Flow` slices corresponding to this scroll event.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "Id of the scroll this scroll update belongs to.", "table": null, "column": null}, {"name": "previous_input_id", "type": "LONG", "desc": "Id (`LatencyInfo.ID`) of the previous input in this scroll.", "table": null, "column": null}, {"name": "frame_display_id", "type": "LONG", "desc": "Id (`display_trace_id`) of the aggregated frame which this scroll update was presented in.", "table": null, "column": null}, {"name": "vsync_interval_ms", "type": "DOUBLE", "desc": "Vsync interval (in milliseconds).", "table": null, "column": null}, {"name": "is_presented", "type": "BOOL", "desc": "Whether this input event was presented.", "table": null, "column": null}, {"name": "is_janky", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow metric. This comes directly from `perfetto.protos.EventLatency.is_janky_scrolled_frame`.", "table": null, "column": null}, {"name": "is_janky_v3", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow3 metric. This comes directly from `perfetto.protos.EventLatency.is_janky_scrolled_frame_v3`.", "table": null, "column": null}, {"name": "is_inertial", "type": "BOOL", "desc": "Whether the corresponding scroll is inertial (fling). If this is `true`, \"generation\" and \"touch_move\" related timestamps and durations will be null.", "table": null, "column": null}, {"name": "is_first_scroll_update_in_scroll", "type": "BOOL", "desc": "Whether this is the first update in a scroll. First scroll update can never be janky.", "table": null, "column": null}, {"name": "is_first_scroll_update_in_frame", "type": "BOOL", "desc": "Whether this is the first input that was presented in the frame.", "table": null, "column": null}, {"name": "browser_uptime_dur", "type": "DURATION", "desc": "Duration from the start of the browser process to the first input generation timestamp.", "table": null, "column": null}, {"name": "generation_ts", "type": "TIMESTAMP", "desc": "Input generation timestamp (from the Android system).", "table": null, "column": null}, {"name": "input_reader_dur", "type": "DURATION", "desc": "Duration from the generation timestamp to the end of InputReader's work. Only populated when atrace 'input' category is enabled.", "table": null, "column": null}, {"name": "input_dispatcher_dur", "type": "DURATION", "desc": "Duration of InputDispatcher's work. Only populated when atrace 'input' category is enabled.", "table": null, "column": null}, {"name": "since_previous_generation_dur", "type": "DURATION", "desc": "Duration from the generation timestamp for the previous input to this input's generation timestamp.", "table": null, "column": null}, {"name": "generation_to_browser_main_dur", "type": "DURATION", "desc": "Duration from input generation to when the browser received the input.", "table": null, "column": null}, {"name": "browser_utid", "type": "LONG", "desc": "Utid for the browser main thread.", "table": null, "column": null}, {"name": "touch_move_received_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_SEND_INPUT_EVENT_UI` slice for the touch move.", "table": null, "column": null}, {"name": "touch_move_received_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_SEND_INPUT_EVENT_UI` slice for the touch move.", "table": null, "column": null}, {"name": "touch_move_processing_dur", "type": "DURATION", "desc": "Duration for processing  a `TouchMove` event.", "table": null, "column": null}, {"name": "scroll_update_created_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_SEND_INPUT_EVENT_UI` slice for the gesture scroll.", "table": null, "column": null}, {"name": "scroll_update_created_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_SEND_INPUT_EVENT_UI` slice for the gesture scroll.", "table": null, "column": null}, {"name": "scroll_update_processing_dur", "type": "DURATION", "desc": "Duration for creating a `GestureScrollUpdate` from a `TouchMove` event.", "table": null, "column": null}, {"name": "scroll_update_created_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_SEND_INPUT_EVENT_UI` slice for the above.", "table": null, "column": null}, {"name": "browser_to_compositor_delay_dur", "type": "DURATION", "desc": "Duration between the browser and compositor dispatch.", "table": null, "column": null}, {"name": "compositor_utid", "type": "LONG", "desc": "Utid for the renderer compositor thread.", "table": null, "column": null}, {"name": "compositor_dispatch_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_HANDLE_INPUT_EVENT_IMPL` slice.", "table": null, "column": null}, {"name": "compositor_dispatch_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_HANDLE_INPUT_EVENT_IMPL` slice or the containing task (if available).", "table": null, "column": null}, {"name": "compositor_dispatch_dur", "type": "DURATION", "desc": "Duration for the compositor dispatch itself.", "table": null, "column": null}, {"name": "compositor_dispatch_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_HANDLE_INPUT_EVENT_IMPL` slice.", "table": null, "column": null}, {"name": "compositor_dispatch_to_on_begin_frame_delay_dur", "type": "DURATION", "desc": "Duration between compositor dispatch and input resampling work.", "table": null, "column": null}, {"name": "compositor_resample_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_RESAMPLE_SCROLL_EVENTS` slice.", "table": null, "column": null}, {"name": "compositor_coalesced_input_handled_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_DID_HANDLE_INPUT_AND_OVERSCROLL` slice.", "table": null, "column": null}, {"name": "compositor_on_begin_frame_ts", "type": "TIMESTAMP", "desc": "Start timestamp for work done on the input during \"OnBeginFrame\".", "table": null, "column": null}, {"name": "compositor_on_begin_frame_dur", "type": "DURATION", "desc": "Duration of the \"OnBeginFrame\" work for this input.", "table": null, "column": null}, {"name": "compositor_on_begin_frame_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for work done on the input during \"OnBeginFrame\".", "table": null, "column": null}, {"name": "compositor_on_begin_frame_to_generation_delay_dur", "type": "DURATION", "desc": "Delay until the compositor work for generating the frame begins.", "table": null, "column": null}, {"name": "compositor_generate_compositor_frame_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_GENERATE_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "compositor_generate_compositor_frame_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_GENERATE_COMPOSITOR_FRAME` slice or the containing task (if available).", "table": null, "column": null}, {"name": "compositor_generate_frame_to_submit_frame_dur", "type": "DURATION", "desc": "Duration between generating and submitting the compositor frame.", "table": null, "column": null}, {"name": "compositor_submit_compositor_frame_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_SUBMIT_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "compositor_submit_compositor_frame_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_SUBMIT_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "compositor_submit_frame_dur", "type": "DURATION", "desc": "Duration for submitting the compositor frame (to viz).", "table": null, "column": null}, {"name": "compositor_submit_compositor_frame_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_SUBMIT_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "compositor_to_viz_delay_dur", "type": "DURATION", "desc": "Delay when a compositor frame is sent from the renderer to viz.", "table": null, "column": null}, {"name": "viz_compositor_utid", "type": "LONG", "desc": "Utid for the viz compositor thread.", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_RECEIVE_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_RECEIVE_COMPOSITOR_FRAME` slice or the containing task (if available).", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_dur", "type": "DURATION", "desc": "Duration of the viz work done on receiving the compositor frame.", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_RECEIVE_COMPOSITOR_FRAME` slice.", "table": null, "column": null}, {"name": "viz_wait_for_draw_dur", "type": "DURATION", "desc": "Duration between viz receiving the compositor frame to frame draw.", "table": null, "column": null}, {"name": "viz_draw_and_swap_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_DRAW_AND_SWAP` slice.", "table": null, "column": null}, {"name": "viz_draw_and_swap_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_DRAW_AND_SWAP` slice or the containing task (if available).", "table": null, "column": null}, {"name": "viz_draw_and_swap_dur", "type": "DURATION", "desc": "Duration for the viz drawing/swapping work for this frame.", "table": null, "column": null}, {"name": "viz_send_buffer_swap_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_SEND_BUFFER_SWAP` slice.", "table": null, "column": null}, {"name": "viz_send_buffer_swap_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_SEND_BUFFER_SWAP` slice.", "table": null, "column": null}, {"name": "viz_to_gpu_delay_dur", "type": "DURATION", "desc": "Delay between viz work on compositor thread and `CompositorGpuThread`.", "table": null, "column": null}, {"name": "viz_gpu_thread_utid", "type": "LONG", "desc": "Utid for the viz `CompositorGpuThread`.", "table": null, "column": null}, {"name": "viz_swap_buffers_slice_id", "type": "LONG", "desc": "Slice id for the `STEP_BUFFER_SWAP_POST_SUBMIT` slice.", "table": null, "column": null}, {"name": "viz_swap_buffers_ts", "type": "TIMESTAMP", "desc": "Timestamp for the `STEP_BUFFER_SWAP_POST_SUBMIT` slice or the containing task (if available).", "table": null, "column": null}, {"name": "viz_swap_buffers_dur", "type": "DURATION", "desc": "Duration of frame buffer swapping work on viz.", "table": null, "column": null}, {"name": "viz_swap_buffers_end_ts", "type": "TIMESTAMP", "desc": "End timestamp for the `STEP_BUFFER_SWAP_POST_SUBMIT` slice.", "table": null, "column": null}, {"name": "viz_swap_buffers_to_latch_dur", "type": "DURATION", "desc": "Duration of `EventLatency`'s `BufferReadyToLatch` step.", "table": null, "column": null}, {"name": "latch_timestamp", "type": "TIMESTAMP", "desc": "Timestamp for `EventLatency`'s `LatchToSwapEnd` step.", "table": null, "column": null}, {"name": "viz_latch_to_presentation_dur", "type": "DURATION", "desc": "Duration of either `EventLatency`'s `LatchToSwapEnd` + `SwapEndToPresentationCompositorFrame` steps or its `LatchToPresentation` step.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "TIMESTAMP", "desc": "Presentation timestamp for the frame.", "table": null, "column": null}]}, {"name": "chrome_scroll_frame_info", "desc": "A list of all presented Chrome frames which contain scroll updates and associated\n metadata.", "summary_desc": "A list of all presented Chrome frames which contain scroll updates and associated  metadata.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Id (frame's display_trace_id) for the given frame.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "Id of the scroll this scroll update belongs to.", "table": null, "column": null}, {"name": "last_input_before_this_frame_id", "type": "LONG", "desc": "Id (LatencyInfo.ID) of the last input before this frame.", "table": null, "column": null}, {"name": "vsync_interval_ms", "type": "DOUBLE", "desc": "Vsync interval (in milliseconds). TODO(b/394303662): Remove in favour of `vsync_interval_dur`.", "table": null, "column": null}, {"name": "vsync_interval_dur", "type": "DURATION", "desc": "Vsync interval (in nanoseconds).", "table": null, "column": null}, {"name": "is_janky", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow metric. This comes directly from `perfetto.protos.EventLatency.is_janky_scrolled_frame`.", "table": null, "column": null}, {"name": "is_janky_v3", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow3 metric. This comes directly from `perfetto.protos.EventLatency.is_janky_scrolled_frame_v3`.", "table": null, "column": null}, {"name": "is_inertial", "type": "BOOL", "desc": "Whether the corresponding scroll is inertial (fling).", "table": null, "column": null}, {"name": "total_input_delta_y", "type": "DOUBLE", "desc": "Sum of all input deltas for all scroll updates in this frame. These values are based on the delta of the OS input events.", "table": null, "column": null}, {"name": "presented_scrolled_delta_y", "type": "DOUBLE", "desc": "Presented delta (change in page offset) for the given frame. This delta is computed by Chrome (based on the input events).", "table": null, "column": null}, {"name": "browser_uptime_dur", "type": "DURATION", "desc": "Duration from the start of the browser process to the first input generation timestamp.", "table": null, "column": null}, {"name": "first_input_generation_ts", "type": "TIMESTAMP", "desc": "Input generation timestamp (from the Android system) for the first input.", "table": null, "column": null}, {"name": "input_reader_dur", "type": "DURATION", "desc": "Duration from the generation timestamp to the end of InputReader's work. Only populated when atrace 'input' category is enabled.", "table": null, "column": null}, {"name": "input_dispatcher_dur", "type": "DURATION", "desc": "Duration of InputDispatcher's work. Only populated when atrace 'input' category is enabled.", "table": null, "column": null}, {"name": "previous_last_input_to_first_input_generation_dur", "type": "DURATION", "desc": "Duration from the previous input (last input that wasn't part of this frame) to the first input in this frame.", "table": null, "column": null}, {"name": "presentation_ts", "type": "TIMESTAMP", "desc": "Presentation timestamp for the frame.", "table": null, "column": null}, {"name": "browser_utid", "type": "JOINID(thread.id)", "desc": "Utid for the browser main thread.", "table": "thread", "column": "id"}, {"name": "first_input_generation_to_browser_main_dur", "type": "DURATION", "desc": "Duration from input generation to when the browser received the first input in this frame.", "table": null, "column": null}, {"name": "first_input_generation_to_browser_main_delta_dur", "type": "DURATION", "desc": "Difference between `first_input_generation_to_browser_main_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "first_input_touch_move_processing_dur", "type": "DURATION", "desc": "Duration for processing  a `TouchMove` event for the first input in this frame.", "table": null, "column": null}, {"name": "first_input_touch_move_processing_delta_dur", "type": "DURATION", "desc": "Difference between `first_input_touch_move_processing_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "compositor_utid", "type": "JOINID(thread.id)", "desc": "Utid for the renderer compositor thread.", "table": "thread", "column": "id"}, {"name": "first_input_browser_to_compositor_delay_dur", "type": "DURATION", "desc": "Duration between the browser and compositor dispatch for the first input in this frame.", "table": null, "column": null}, {"name": "first_input_browser_to_compositor_delay_delta_dur", "type": "DURATION", "desc": "Difference between `first_input_browser_to_compositor_delay_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "first_input_compositor_dispatch_dur", "type": "DURATION", "desc": "Duration for the compositor dispatch for the first input in this frame.", "table": null, "column": null}, {"name": "first_input_compositor_dispatch_delta_dur", "type": "DURATION", "desc": "Difference between `first_input_compositor_dispatch_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "first_input_compositor_dispatch_to_on_begin_frame_delay_dur", "type": "DURATION", "desc": "Duration between the compositor dispatch and the \"OnBeginFrame\" work for the first input in this frame.", "table": null, "column": null}, {"name": "first_input_compositor_dispatch_to_on_begin_frame_delay_delta_dur", "type": "DURATION", "desc": "Difference between `first_input_compositor_dispatch_to_on_begin_frame_delay_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "compositor_on_begin_frame_dur", "type": "DURATION", "desc": "Duration of the \"OnBeginFrame\" work for this frame.", "table": null, "column": null}, {"name": "compositor_on_begin_frame_delta_dur", "type": "DURATION", "desc": "Difference between `compositor_on_begin_frame_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "compositor_on_begin_frame_to_generation_delay_dur", "type": "DURATION", "desc": "Duration between the \"OnBeginFrame\" work and the generation of this frame.", "table": null, "column": null}, {"name": "compositor_on_begin_frame_to_generation_delay_delta_dur", "type": "DURATION", "desc": "Difference between `compositor_on_begin_frame_to_generation_delay_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "compositor_generate_frame_to_submit_frame_dur", "type": "DURATION", "desc": "Duration between the generation and submission of this frame.", "table": null, "column": null}, {"name": "compositor_generate_frame_to_submit_frame_delta_dur", "type": "DURATION", "desc": "Difference between `compositor_generate_frame_to_submit_frame_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "compositor_submit_frame_dur", "type": "DURATION", "desc": "Duration for submitting this frame.", "table": null, "column": null}, {"name": "compositor_submit_frame_delta_dur", "type": "DURATION", "desc": "Difference between `compositor_submit_frame_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "viz_compositor_utid", "type": "JOINID(thread.id)", "desc": "Utid for the viz compositor thread.", "table": "thread", "column": "id"}, {"name": "compositor_to_viz_delay_dur", "type": "DURATION", "desc": "Delay when a compositor frame is sent from the renderer to viz.", "table": null, "column": null}, {"name": "compositor_to_viz_delay_delta_dur", "type": "DURATION", "desc": "Difference between `compositor_to_viz_delay_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_dur", "type": "DURATION", "desc": "Duration of the viz work done on receiving the compositor frame.", "table": null, "column": null}, {"name": "viz_receive_compositor_frame_delta_dur", "type": "DURATION", "desc": "Difference between `viz_receive_compositor_frame_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "viz_wait_for_draw_dur", "type": "DURATION", "desc": "Duration between viz receiving the compositor frame to frame draw.", "table": null, "column": null}, {"name": "viz_wait_for_draw_delta_dur", "type": "DURATION", "desc": "Difference between `viz_wait_for_draw_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "viz_draw_and_swap_dur", "type": "DURATION", "desc": "Duration of the viz drawing/swapping work for this frame.", "table": null, "column": null}, {"name": "viz_draw_and_swap_delta_dur", "type": "DURATION", "desc": "Difference between `viz_draw_and_swap_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "viz_gpu_thread_utid", "type": "JOINID(thread.id)", "desc": "Utid for the viz `CompositorGpuThread`.", "table": "thread", "column": "id"}, {"name": "viz_to_gpu_delay_dur", "type": "DURATION", "desc": "Delay between viz work on compositor thread and `CompositorGpuThread`.", "table": null, "column": null}, {"name": "viz_to_gpu_delay_delta_dur", "type": "DURATION", "desc": "Difference between `viz_to_gpu_delay_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "viz_swap_buffers_dur", "type": "DURATION", "desc": "Duration of frame buffer swapping work on viz.", "table": null, "column": null}, {"name": "viz_swap_buffers_delta_dur", "type": "DURATION", "desc": "Difference between `viz_swap_buffers_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "viz_swap_buffers_to_latch_dur", "type": "DURATION", "desc": "Time between buffers ready until Choreographer's latch.", "table": null, "column": null}, {"name": "viz_swap_buffers_to_latch_delta_dur", "type": "DURATION", "desc": "Difference between `viz_swap_buffers_to_latch_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}, {"name": "viz_latch_to_presentation_dur", "type": "DURATION", "desc": "Duration between Choreographer's latch and presentation.", "table": null, "column": null}, {"name": "viz_latch_to_presentation_delta_dur", "type": "DURATION", "desc": "Difference between `viz_latch_to_presentation_dur` for this frame and the previous frame in the same scroll.", "table": null, "column": null}]}, {"name": "chrome_scroll_update_info_step_templates", "desc": "Source of truth for the definition of the stages of a scroll. Mainly intended\n for visualization purposes (e.g. in Chrome Scroll Jank plugin).", "summary_desc": "Source of truth for the definition of the stages of a scroll", "type": "TABLE", "cols": [{"name": "step_name", "type": "STRING", "desc": "The name of a stage of a scroll.", "table": null, "column": null}, {"name": "ts_column_name", "type": "STRING", "desc": "The name of the column in `chrome_scroll_update_info` which contains the timestamp of the stage.", "table": null, "column": null}, {"name": "dur_column_name", "type": "STRING", "desc": "The name of the column in `chrome_scroll_update_info` which contains the duration of the stage. NULL if the stage doesn't have a duration.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.event_latency", "data_objects": [{"name": "chrome_event_latencies", "desc": "All EventLatency slices.", "summary_desc": "All EventLatency slices.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Slice Id for the EventLatency scroll event.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Slice name.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp of the scroll.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the scroll.", "table": null, "column": null}, {"name": "scroll_update_id", "type": "LONG", "desc": "The id of the scroll update event (aka LatencyInfo.ID).", "table": null, "column": null}, {"name": "surface_frame_trace_id", "type": "LONG", "desc": "The id of the first frame (pre-surface aggregation) which included the scroll update and was presented. NULL if: (1) the event is not a scroll update (`event_type` is NOT GESTURE_SCROLL_UPDATE, FIRST_GESTURE_SCROLL_UPDATE, or INERTIAL_GESTURE_SCROLL_UPDATE), (2) the scroll update wasn't presented (e.g. it was an overscroll) or (3) the trace comes from an old Chrome version (https://crrev.com/c/6185817 was first included in version 134.0.6977.0 and was cherry-picked in version 133.0.6943.33).", "table": null, "column": null}, {"name": "display_trace_id", "type": "LONG", "desc": "The id of the first frame (post-surface aggregation) which included the scroll update and was presented. NULL if: (1) the event is not a scroll update (`event_type` is NOT GESTURE_SCROLL_UPDATE, FIRST_GESTURE_SCROLL_UPDATE, or INERTIAL_GESTURE_SCROLL_UPDATE), (2) the scroll update wasn't presented (e.g. it was an overscroll) or (3) the trace comes from an old Chrome version (https://crrev.com/c/6185817 was first included in version 134.0.6977.0 and was cherry-picked in version 133.0.6943.33).", "table": null, "column": null}, {"name": "is_presented", "type": "BOOL", "desc": "Whether this input event was presented.", "table": null, "column": null}, {"name": "event_type", "type": "STRING", "desc": "EventLatency event type.", "table": null, "column": null}, {"name": "track_id", "type": "LONG", "desc": "Perfetto track this slice is found on.", "table": null, "column": null}, {"name": "vsync_interval_ms", "type": "DOUBLE", "desc": "Vsync interval (in milliseconds).", "table": null, "column": null}, {"name": "is_janky_scrolled_frame", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow metric.", "table": null, "column": null}, {"name": "is_janky_scrolled_frame_v3", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow3 metric.", "table": null, "column": null}, {"name": "buffer_available_timestamp", "type": "LONG", "desc": "Timestamp of the BufferAvailableToBufferReady substage.", "table": null, "column": null}, {"name": "buffer_ready_timestamp", "type": "LONG", "desc": "Timestamp of the BufferReadyToLatch substage.", "table": null, "column": null}, {"name": "latch_timestamp", "type": "LONG", "desc": "Timestamp of the LatchToSwapEnd substage (or LatchToPresentation as a fallback).", "table": null, "column": null}, {"name": "swap_end_timestamp", "type": "LONG", "desc": "Timestamp of the SwapEndToPresentationCompositorFrame substage.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "LONG", "desc": "Frame presentation timestamp aka the timestamp of the SwapEndToPresentationCompositorFrame substage. TODO(b/341047059): temporarily use LatchToSwapEnd as a workaround if SwapEndToPresentationCompositorFrame is missing due to b/247542163.", "table": null, "column": null}]}, {"name": "chrome_gesture_scroll_updates", "desc": "All scroll-related events (frames) including gesture scroll updates, begins\n and ends with respective scroll ids and start/end timestamps, regardless of\n being presented. This includes pinches that were presented. See b/315761896\n for context on pinches.", "summary_desc": "All scroll-related events (frames) including gesture scroll updates, begins  and ends with respective scroll ids and start/end timestamps, regardless of  being presented", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Slice Id for the EventLatency scroll event.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Slice name.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp of the scroll.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the scroll.", "table": null, "column": null}, {"name": "scroll_update_id", "type": "LONG", "desc": "The id of the scroll update event.", "table": null, "column": null}, {"name": "is_presented", "type": "BOOL", "desc": "Whether this input event was presented.", "table": null, "column": null}, {"name": "event_type", "type": "STRING", "desc": "EventLatency event type.", "table": null, "column": null}, {"name": "track_id", "type": "LONG", "desc": "Perfetto track this slice is found on.", "table": null, "column": null}, {"name": "vsync_interval_ms", "type": "DOUBLE", "desc": "Vsync interval (in milliseconds).", "table": null, "column": null}, {"name": "is_janky", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow metric.", "table": null, "column": null}, {"name": "is_janky_v3", "type": "BOOL", "desc": "Whether the corresponding frame is janky based on the Event.ScrollJank.DelayedFramesPercentage.FixedWindow3 metric.", "table": null, "column": null}, {"name": "buffer_available_timestamp", "type": "LONG", "desc": "Timestamp of the BufferAvailableToBufferReady substage.", "table": null, "column": null}, {"name": "buffer_ready_timestamp", "type": "LONG", "desc": "Timestamp of the BufferReadyToLatch substage.", "table": null, "column": null}, {"name": "latch_timestamp", "type": "LONG", "desc": "Timestamp of the LatchToSwapEnd substage (or LatchToPresentation as a fallback).", "table": null, "column": null}, {"name": "swap_end_timestamp", "type": "LONG", "desc": "Timestamp of the SwapEndToPresentationCompositorFrame substage.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "LONG", "desc": "Frame presentation timestamp aka the timestamp of the SwapEndToPresentationCompositorFrame substage. TODO(b/341047059): temporarily use LatchToSwapEnd as a workaround if SwapEndToPresentationCompositorFrame is missing due to b/247542163.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "The id of the scroll.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.event_latency_description", "data_objects": [{"name": "chrome_event_latency_stage_descriptions", "desc": "Source of truth of the descriptions of EventLatency stages.", "summary_desc": "Source of truth of the descriptions of EventLatency stages.", "type": "TABLE", "cols": [{"name": "name", "type": "STRING", "desc": "The name of the EventLatency stage.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "A description of the EventLatency stage.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.graphics_pipeline", "data_objects": [{"name": "chrome_graphics_pipeline_surface_frame_steps", "desc": "`Graphics.Pipeline` steps corresponding to work done by a Viz client to\n produce a frame (i.e. before surface aggregation). Covers steps:\n   * STEP_ISSUE_BEGIN_FRAME\n   * STEP_RECEIVE_BEGIN_FRAME\n   * STEP_GENERATE_RENDER_PASS\n   * STEP_GENERATE_COMPOSITOR_FRAME\n   * STEP_SUBMIT_COMPOSITOR_FRAME\n   * STEP_RECEIVE_COMPOSITOR_FRAME\n   * STEP_RECEIVE_BEGIN_FRAME_DISCARD\n   * STEP_DID_NOT_PRODUCE_FRAME\n   * STEP_DID_NOT_PRODUCE_COMPOSITOR_FRAME", "summary_desc": "`Graphics.Pipeline` steps corresponding to work done by a Viz client to  produce a frame (i.e", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Slice Id of the `Graphics.Pipeline` slice.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp of the slice/step.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the slice/step.", "table": null, "column": null}, {"name": "step", "type": "STRING", "desc": "Step name of the `Graphics.Pipeline` slice.", "table": null, "column": null}, {"name": "surface_frame_trace_id", "type": "LONG", "desc": "Id of the graphics pipeline, pre-surface aggregation.", "table": null, "column": null}, {"name": "utid", "type": "LONG", "desc": "Utid of the thread where this slice exists.", "table": null, "column": null}, {"name": "task_start_time_ts", "type": "TIMESTAMP", "desc": "Start time of the parent Chrome scheduler task (if any) of this step.", "table": null, "column": null}]}, {"name": "chrome_graphics_pipeline_display_frame_steps", "desc": "`Graphics.Pipeline` steps corresponding to work done on creating and\n presenting one frame during/after surface aggregation. Covers steps:\n   * STEP_DRAW_AND_SWAP\n   * STEP_SURFACE_AGGREGATION\n   * STEP_SEND_BUFFER_SWAP\n   * STEP_BUFFER_SWAP_POST_SUBMIT\n   * STEP_FINISH_BUFFER_SWAP\n   * STEP_SWAP_BUFFERS_ACK", "summary_desc": "`Graphics.Pipeline` steps corresponding to work done on creating and  presenting one frame during/after surface aggregation", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Slice Id of the `Graphics.Pipeline` slice.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp of the slice/step.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the slice/step.", "table": null, "column": null}, {"name": "step", "type": "STRING", "desc": "Step name of the `Graphics.Pipeline` slice.", "table": null, "column": null}, {"name": "display_trace_id", "type": "LONG", "desc": "Id of the graphics pipeline, post-surface aggregation.", "table": null, "column": null}, {"name": "utid", "type": "LONG", "desc": "Utid of the thread where this slice exists.", "table": null, "column": null}, {"name": "task_start_time_ts", "type": "TIMESTAMP", "desc": "Start time of the parent Chrome scheduler task (if any) of this step.", "table": null, "column": null}]}, {"name": "chrome_surface_frame_id_to_first_display_id", "desc": "Links surface frames (`chrome_graphics_pipeline_surface_frame_steps`) to the\n the first display frame (`chrome_graphics_pipeline_display_frame_steps`) into\n which it was included. As an display frame usually aggregates frames from\n multiple surfaces, multiple `surface_frame_trace_id`s will correspond to one\n `display_trace_id`.", "summary_desc": "Links surface frames (`chrome_graphics_pipeline_surface_frame_steps`) to the  the first display frame (`chrome_graphics_pipeline_display_frame_steps`) into  which it was included", "type": "TABLE", "cols": [{"name": "surface_frame_trace_id", "type": "LONG", "desc": "Id of the graphics pipeline, pre-surface aggregation.", "table": null, "column": null}, {"name": "display_trace_id", "type": "LONG", "desc": "Id of the graphics pipeline, post-surface aggregation.", "table": null, "column": null}]}, {"name": "chrome_graphics_pipeline_inputs_to_surface_frames", "desc": "Links inputs (`chrome_input_pipeline_steps.latency_id`) to the surface frame\n (`chrome_graphics_pipeline_surface_frame_steps`) to which they correspond.\n In other words, in general, multiple `latency_id`s will correspond to one\n `surface_frame_trace_id`.", "summary_desc": "Links inputs (`chrome_input_pipeline_steps.latency_id`) to the surface frame  (`chrome_graphics_pipeline_surface_frame_steps`) to which they correspond.  In other words, in general, multiple `latency_id`s will correspond to one  `surface_frame_trace_id`.", "type": "TABLE", "cols": [{"name": "latency_id", "type": "LONG", "desc": "Id corresponding to the input pipeline.", "table": null, "column": null}, {"name": "surface_frame_trace_id", "type": "LONG", "desc": "Id of the graphics pipeline, post-surface aggregation.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.histograms", "data_objects": [{"name": "chrome_histograms", "desc": "A helper view on top of the histogram events emitted by Chrome.\n Requires \"disabled-by-default-histogram_samples\" Chrome category or the\n \"org.chromium.histogram_sample\" data source.", "summary_desc": "A helper view on top of the histogram events emitted by Chrome.  Requires \"disabled-by-default-histogram_samples\" Chrome category or the  \"org.chromium.histogram_sample\" data source.", "type": "TABLE", "cols": [{"name": "name", "type": "STRING", "desc": "The name of the histogram.", "table": null, "column": null}, {"name": "value", "type": "LONG", "desc": "The value of the histogram sample.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias of |slice.ts|.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Thread name.", "table": null, "column": null}, {"name": "utid", "type": "LONG", "desc": "Utid of the thread.", "table": null, "column": null}, {"name": "tid", "type": "LONG", "desc": "Tid of the thread.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Process name.", "table": null, "column": null}, {"name": "upid", "type": "LONG", "desc": "Upid of the process.", "table": null, "column": null}, {"name": "pid", "type": "LONG", "desc": "Pid of the process.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.input", "data_objects": [{"name": "chrome_inputs", "desc": "Each row represents one input pipeline.", "summary_desc": "Each row represents one input pipeline.", "type": "TABLE", "cols": [{"name": "latency_id", "type": "LONG", "desc": "Id of this Chrome input pipeline (LatencyInfo).", "table": null, "column": null}, {"name": "input_type", "type": "STRING", "desc": "Input type.", "table": null, "column": null}]}, {"name": "chrome_input_pipeline_steps", "desc": "Since not all steps have associated input type (but all steps\n for a given latency id should have the same input type),\n populate input type for steps where it would be NULL.", "summary_desc": "Since not all steps have associated input type (but all steps  for a given latency id should have the same input type),  populate input type for steps where it would be NULL.", "type": "TABLE", "cols": [{"name": "latency_id", "type": "LONG", "desc": "Id of this Chrome input pipeline (LatencyInfo).", "table": null, "column": null}, {"name": "slice_id", "type": "LONG", "desc": "Slice id", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The step timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Step duration.", "table": null, "column": null}, {"name": "utid", "type": "LONG", "desc": "Utid of the thread.", "table": null, "column": null}, {"name": "step", "type": "STRING", "desc": "Step name (ChromeLatencyInfo.step).", "table": null, "column": null}, {"name": "input_type", "type": "STRING", "desc": "Input type.", "table": null, "column": null}, {"name": "task_start_time_ts", "type": "TIMESTAMP", "desc": "Start time of the parent Chrome scheduler task (if any) of this step.", "table": null, "column": null}]}, {"name": "chrome_coalesced_inputs", "desc": "For each input, if it was coalesced into another input, get the other input's\n latency id.", "summary_desc": "For each input, if it was coalesced into another input, get the other input's  latency id.", "type": "TABLE", "cols": [{"name": "coalesced_latency_id", "type": "LONG", "desc": "The `latency_id` of the coalesced input.", "table": null, "column": null}, {"name": "presented_latency_id", "type": "LONG", "desc": "The `latency_id` of the other input that the current input was coalesced into. Guaranteed to be different from `coalesced_latency_id`.", "table": null, "column": null}]}, {"name": "chrome_touch_move_to_scroll_update", "desc": "Each scroll update event (except flings) in Chrome starts its life as a touch\n move event, which is then eventually converted to a scroll update itself.\n Each of these events is represented by its own LatencyInfo. This table\n contains a mapping between touch move events and scroll update events they\n were converted into.", "summary_desc": "Each scroll update event (except flings) in Chrome starts its life as a touch  move event, which is then eventually converted to a scroll update itself.  Each of these events is represented by its own LatencyInfo", "type": "TABLE", "cols": [{"name": "touch_move_latency_id", "type": "LONG", "desc": "Latency id of the touch move input (LatencyInfo).", "table": null, "column": null}, {"name": "scroll_update_latency_id", "type": "LONG", "desc": "Latency id of the corresponding scroll update input (LatencyInfo).", "table": null, "column": null}]}, {"name": "chrome_dispatch_android_input_event_to_touch_move", "desc": "Matches Android input id to the corresponding touch move event.", "summary_desc": "Matches Android input id to the corresponding touch move event.", "type": "TABLE", "cols": [{"name": "android_input_id", "type": "STRING", "desc": "Input id (assigned by the system, used by InputReader and InputDispatcher)", "table": null, "column": null}, {"name": "touch_move_latency_id", "type": "LONG", "desc": "Latency id.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.interactions", "data_objects": [{"name": "chrome_interactions", "desc": "All critical user interaction events, including type and table with\n associated metrics.", "summary_desc": "All critical user interaction events, including type and table with  associated metrics.", "type": "TABLE", "cols": [{"name": "scoped_id", "type": "LONG", "desc": "Identifier of the interaction; this is not guaranteed to be unique to the table - rather, it is unique within an individual interaction type. Combine with type to get a unique identifier in this table.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "Type of this interaction, which together with scoped_id uniquely identifies this interaction. Also corresponds to a SQL table name containing more details specific to this type of interaction.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Interaction name - e.g. 'PageLoad', 'Tap', etc. Interactions will have unique metrics stored in other tables.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the CUI event.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the CUI event.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.metadata", "data_objects": [], "functions": [{"name": "chrome_hardware_class", "desc": "Returns hardware class of the device, often use to find device brand\n and model.", "summary_desc": "Returns hardware class of the device, often use to find device brand  and model.", "args": [], "return_type": "STRING", "return_desc": "Hardware class name."}], "table_functions": [], "macros": []}, {"module_name": "chrome.page_loads", "data_objects": [{"name": "chrome_page_loads", "desc": "Chrome page loads, including associated high-level metrics and properties.", "summary_desc": "Chrome page loads, including associated high-level metrics and properties.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "ID of the navigation and Chrome browser process; this combination is unique to every individual navigation.", "table": null, "column": null}, {"name": "navigation_id", "type": "LONG", "desc": "ID of the navigation associated with the page load (i.e. the cross-document navigation in primary main frame which created this page's main document). Also note that navigation_id is specific to a given Chrome browser process, and not globally unique.", "table": null, "column": null}, {"name": "navigation_start_ts", "type": "TIMESTAMP", "desc": "Timestamp of the start of navigation.", "table": null, "column": null}, {"name": "fcp", "type": "LONG", "desc": "Duration between the navigation start and the first contentful paint event (web.dev/fcp).", "table": null, "column": null}, {"name": "fcp_ts", "type": "TIMESTAMP", "desc": "Timestamp of the first contentful paint.", "table": null, "column": null}, {"name": "lcp", "type": "LONG", "desc": "Duration between the navigation start and the largest contentful paint event (web.dev/lcp).", "table": null, "column": null}, {"name": "lcp_ts", "type": "TIMESTAMP", "desc": "Timestamp of the largest contentful paint.", "table": null, "column": null}, {"name": "dom_content_loaded_event_ts", "type": "TIMESTAMP", "desc": "Timestamp of the DomContentLoaded event: https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event", "table": null, "column": null}, {"name": "load_event_ts", "type": "TIMESTAMP", "desc": "Timestamp of the window load event: https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event", "table": null, "column": null}, {"name": "mark_fully_loaded_ts", "type": "TIMESTAMP", "desc": "Timestamp of the page self-reporting as fully loaded through the performance.mark('mark_fully_loaded') API.", "table": null, "column": null}, {"name": "mark_fully_visible_ts", "type": "TIMESTAMP", "desc": "Timestamp of the page self-reporting as fully visible through the performance.mark('mark_fully_visible') API.", "table": null, "column": null}, {"name": "mark_interactive_ts", "type": "TIMESTAMP", "desc": "Timestamp of the page self-reporting as fully interactive through the performance.mark('mark_interactive') API.", "table": null, "column": null}, {"name": "url", "type": "STRING", "desc": "URL at the page load event.", "table": null, "column": null}, {"name": "browser_upid", "type": "LONG", "desc": "The unique process id (upid) of the browser process where the page load occurred.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.scroll_interactions", "data_objects": [{"name": "chrome_scroll_interactions", "desc": "Top level scroll events, with metrics.", "summary_desc": "Top level scroll events, with metrics.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Unique id for an individual scroll.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Name of the scroll event.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the scroll.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the scroll.", "table": null, "column": null}, {"name": "frame_count", "type": "LONG", "desc": "The total number of frames in the scroll.", "table": null, "column": null}, {"name": "vsync_count", "type": "LONG", "desc": "The total number of vsyncs in the scroll.", "table": null, "column": null}, {"name": "missed_vsync_max", "type": "LONG", "desc": "The maximum number of vsyncs missed during any and all janks.", "table": null, "column": null}, {"name": "missed_vsync_sum", "type": "LONG", "desc": "The total number of vsyncs missed during any and all janks.", "table": null, "column": null}, {"name": "delayed_frame_count", "type": "LONG", "desc": "The number of delayed frames.", "table": null, "column": null}, {"name": "predictor_janky_frame_count", "type": "LONG", "desc": "The number of frames that are deemed janky to the human eye after Chrome has applied its scroll prediction algorithm.", "table": null, "column": null}, {"name": "renderer_upid", "type": "LONG", "desc": "The process id this event occurred on.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.scroll_jank.predictor_error", "data_objects": [{"name": "chrome_predictor_error", "desc": "The scrolling offsets and predictor jank values for the actual (applied)\n scroll events.", "summary_desc": "The scrolling offsets and predictor jank values for the actual (applied)  scroll events.", "type": "TABLE", "cols": [{"name": "scroll_id", "type": "LONG", "desc": "An ID that ties all EventLatencies in a particular scroll. (implementation note: This is the EventLatency TraceId of the GestureScrollbegin).", "table": null, "column": null}, {"name": "scroll_update_id", "type": "LONG", "desc": "An ID that ties this |event_latency_id| with the Trace Id (another event_latency_id) that it was presented with.", "table": null, "column": null}, {"name": "present_ts", "type": "TIMESTAMP", "desc": "Presentation timestamp.", "table": null, "column": null}, {"name": "delta_y", "type": "DOUBLE", "desc": "The delta in raw coordinates between this presented EventLatency and the previous presented frame.", "table": null, "column": null}, {"name": "relative_offset_y", "type": "DOUBLE", "desc": "The pixel offset of this presented EventLatency compared to the initial one.", "table": null, "column": null}, {"name": "prev_delta", "type": "DOUBLE", "desc": "The delta in raw coordinates of the previous scroll update event.", "table": null, "column": null}, {"name": "next_delta", "type": "DOUBLE", "desc": "The delta in raw coordinates of the subsequent scroll update event.", "table": null, "column": null}, {"name": "predictor_jank", "type": "DOUBLE", "desc": "The jank value based on the discrepancy between scroll predictor coordinates and the actual deltas between scroll update events.", "table": null, "column": null}, {"name": "delta_threshold", "type": "DOUBLE", "desc": "The threshold used to determine if jank occurred.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.scroll_jank.scroll_jank_cause_map", "data_objects": [{"name": "chrome_scroll_jank_cause_descriptions", "desc": "Source of truth of the descriptions of EventLatency-based scroll jank causes.", "summary_desc": "Source of truth of the descriptions of EventLatency-based scroll jank causes.", "type": "TABLE", "cols": [{"name": "event_latency_stage", "type": "STRING", "desc": "The name of the EventLatency stage.", "table": null, "column": null}, {"name": "cause_process", "type": "STRING", "desc": "The process where the cause of scroll jank occurred.", "table": null, "column": null}, {"name": "cause_thread", "type": "STRING", "desc": "The thread where the cause of scroll jank occurred.", "table": null, "column": null}, {"name": "cause_description", "type": "STRING", "desc": "A description of the cause of scroll jank.", "table": null, "column": null}]}, {"name": "chrome_scroll_jank_causes_with_event_latencies", "desc": "Combined description of scroll jank cause and associated event latency stage.", "summary_desc": "Combined description of scroll jank cause and associated event latency stage.", "type": "VIEW", "cols": [{"name": "name", "type": "STRING", "desc": "The name of the EventLatency stage.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "Description of the EventLatency stage.", "table": null, "column": null}, {"name": "cause_process", "type": "STRING", "desc": "The process name that may cause scroll jank.", "table": null, "column": null}, {"name": "cause_thread", "type": "STRING", "desc": "The thread name that may cause scroll jank. The thread will be on the cause_process.", "table": null, "column": null}, {"name": "cause_description", "type": "STRING", "desc": "Description of the cause of scroll jank on this process and thread.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.scroll_jank.scroll_jank_cause_utils", "data_objects": [], "functions": [], "table_functions": [{"name": "chrome_select_scroll_jank_cause_thread", "desc": "Function to retrieve the thread id of the thread on a particular process if\n there are any slices during a particular EventLatency slice duration; this\n upid/thread combination refers to a cause of Scroll Jank.", "summary_desc": "Function to retrieve the thread id of the thread on a particular process if  there are any slices during a particular EventLatency slice duration; this  upid/thread combination refers to a cause of Scroll Jank.", "args": [{"name": "event_latency_id", "type": "LONG", "desc": "The slice id of an EventLatency slice.", "table": null, "column": null}, {"name": "process_type", "type": "STRING", "desc": "The process type that the thread is on: one of 'Browser', 'Renderer' or 'GPU'.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "The name of the thread.", "table": null, "column": null}], "cols": [{"name": "utid", "type": "JOINID(thread.id)", "table": "thread", "column": "id", "desc": "The utid associated with |thread| on the process with |upid|."}]}], "macros": []}, {"module_name": "chrome.scroll_jank.scroll_jank_intervals", "data_objects": [{"name": "chrome_janky_event_latencies_v3", "desc": "Selects EventLatency slices that correspond with janks in a scroll. This is\n based on the V3 version of scroll jank metrics.", "summary_desc": "Selects EventLatency slices that correspond with janks in a scroll", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "The slice id.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp of the slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the slice.", "table": null, "column": null}, {"name": "track_id", "type": "LONG", "desc": "The track_id for the slice.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the slice (EventLatency).", "table": null, "column": null}, {"name": "cause_of_jank", "type": "STRING", "desc": "The stage of EventLatency that the caused the jank.", "table": null, "column": null}, {"name": "sub_cause_of_jank", "type": "STRING", "desc": "The stage of cause_of_jank that caused the jank.", "table": null, "column": null}, {"name": "delayed_frame_count", "type": "LONG", "desc": "How many vsyncs this frame missed its deadline by.", "table": null, "column": null}, {"name": "frame_jank_ts", "type": "TIMESTAMP", "desc": "The start timestamp where frame presentation was delayed.", "table": null, "column": null}, {"name": "frame_jank_dur", "type": "LONG", "desc": "The duration in ms of the delay in frame presentation.", "table": null, "column": null}]}, {"name": "chrome_janky_frame_presentation_intervals", "desc": "Frame presentation interval is the delta between when the frame was supposed\n to be presented and when it was actually presented.", "summary_desc": "Frame presentation interval is the delta between when the frame was supposed  to be presented and when it was actually presented.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Unique id.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp of the slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the slice.", "table": null, "column": null}, {"name": "delayed_frame_count", "type": "LONG", "desc": "How many vsyncs this frame missed its deadline by.", "table": null, "column": null}, {"name": "cause_of_jank", "type": "STRING", "desc": "The stage of EventLatency that the caused the jank.", "table": null, "column": null}, {"name": "sub_cause_of_jank", "type": "STRING", "desc": "The stage of cause_of_jank that caused the jank.", "table": null, "column": null}, {"name": "event_latency_id", "type": "LONG", "desc": "The id of the associated event latency in the slice table.", "table": null, "column": null}]}, {"name": "chrome_scroll_stats", "desc": "Scroll jank frame presentation stats for individual scrolls.", "summary_desc": "Scroll jank frame presentation stats for individual scrolls.", "type": "TABLE", "cols": [{"name": "scroll_id", "type": "LONG", "desc": "Id of the individual scroll.", "table": null, "column": null}, {"name": "frame_count", "type": "LONG", "desc": "The number of frames in the scroll.", "table": null, "column": null}, {"name": "missed_vsyncs", "type": "LONG", "desc": "The number of missed vsyncs in the scroll.", "table": null, "column": null}, {"name": "presented_frame_count", "type": "LONG", "desc": "The number presented frames in the scroll.", "table": null, "column": null}, {"name": "janky_frame_count", "type": "LONG", "desc": "The number of janky frames in the scroll.", "table": null, "column": null}, {"name": "janky_frame_percent", "type": "DOUBLE", "desc": "The % of frames that janked in the scroll.", "table": null, "column": null}]}, {"name": "chrome_scroll_jank_intervals_v3", "desc": "Defines slices for all of janky scrolling intervals in a trace.", "summary_desc": "Defines slices for all of janky scrolling intervals in a trace.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "The unique identifier of the janky interval.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp of the janky interval.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the janky interval.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.scroll_jank.scroll_jank_v3", "data_objects": [{"name": "chrome_presented_gesture_scrolls", "desc": "Scroll updates, corresponding to all input events that were converted to a\n presented scroll update.", "summary_desc": "Scroll updates, corresponding to all input events that were converted to a  presented scroll update.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Minimum slice id for input presented in this frame, the non-presented input.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The start timestamp for producing the frame.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration between producing and presenting the frame.", "table": null, "column": null}, {"name": "last_presented_input_ts", "type": "TIMESTAMP", "desc": "The timestamp of the last input that arrived and got presented in the frame.", "table": null, "column": null}, {"name": "scroll_update_id", "type": "LONG", "desc": "The id of the scroll update event, a unique identifier to the gesture.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "The id of the ongoing scroll.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "LONG", "desc": "Frame presentation timestamp.", "table": null, "column": null}, {"name": "event_type", "type": "STRING", "desc": "EventLatency event type.", "table": null, "column": null}]}, {"name": "chrome_scroll_updates_with_deltas", "desc": "Associate every trace_id with it's perceived delta_y on the screen after\n prediction.", "summary_desc": "Associate every trace_id with it's perceived delta_y on the screen after  prediction.", "type": "TABLE", "cols": [{"name": "scroll_update_id", "type": "LONG", "desc": "The id of the scroll update event.", "table": null, "column": null}, {"name": "delta_y", "type": "DOUBLE", "desc": "The perceived delta_y on the screen post prediction.", "table": null, "column": null}]}, {"name": "chrome_full_frame_view", "desc": "Obtain the subset of input events that were fully presented.", "summary_desc": "Obtain the subset of input events that were fully presented.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "ID of the frame.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the frame.", "table": null, "column": null}, {"name": "last_presented_input_ts", "type": "TIMESTAMP", "desc": "The timestamp of the last presented input.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "ID of the associated scroll.", "table": null, "column": null}, {"name": "scroll_update_id", "type": "LONG", "desc": "ID of the associated scroll update.", "table": null, "column": null}, {"name": "event_latency_id", "type": "LONG", "desc": "ID of the associated EventLatency.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the associated EventLatency.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "LONG", "desc": "Frame presentation timestamp.", "table": null, "column": null}]}, {"name": "chrome_full_frame_delta_view", "desc": "Join deltas with EventLatency data.", "summary_desc": "Join deltas with EventLatency data.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "ID of the frame.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the frame.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "ID of the associated scroll.", "table": null, "column": null}, {"name": "scroll_update_id", "type": "LONG", "desc": "ID of the associated scroll update.", "table": null, "column": null}, {"name": "last_presented_input_ts", "type": "TIMESTAMP", "desc": "The timestamp of the last presented input.", "table": null, "column": null}, {"name": "delta_y", "type": "DOUBLE", "desc": "The perceived delta_y on the screen post prediction.", "table": null, "column": null}, {"name": "event_latency_id", "type": "LONG", "desc": "ID of the associated EventLatency.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the associated EventLatency.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "LONG", "desc": "Frame presentation timestamp.", "table": null, "column": null}]}, {"name": "chrome_merged_frame_view", "desc": "Group all gestures presented at the same timestamp together in\n a single row.", "summary_desc": "Group all gestures presented at the same timestamp together in  a single row.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "ID of the frame.", "table": null, "column": null}, {"name": "max_start_ts", "type": "TIMESTAMP", "desc": "The timestamp of the last presented input.", "table": null, "column": null}, {"name": "min_start_ts", "type": "TIMESTAMP", "desc": "The earliest frame start timestamp.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "ID of the associated scroll.", "table": null, "column": null}, {"name": "scroll_update_id", "type": "LONG", "desc": "ID of the associated scroll update.", "table": null, "column": null}, {"name": "encapsulated_scroll_ids", "type": "STRING", "desc": "All scroll updates associated with the frame presentation timestamp.", "table": null, "column": null}, {"name": "total_delta", "type": "DOUBLE", "desc": "Sum of all perceived delta_y values at the frame presentation timestamp.", "table": null, "column": null}, {"name": "segregated_delta_y", "type": "STRING", "desc": "Lists all of the perceived delta_y values at the frame presentation timestamp.", "table": null, "column": null}, {"name": "event_latency_id", "type": "LONG", "desc": "ID of the associated EventLatency.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Maximum duration of the associated EventLatency.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "LONG", "desc": "Frame presentation timestamp.", "table": null, "column": null}]}, {"name": "chrome_frame_info_with_delay", "desc": "View contains all chrome presented frames during gesture updates\n while calculating delay since last presented which usually should\n equal to |VSYNC_INTERVAL| if no jank is present.", "summary_desc": "View contains all chrome presented frames during gesture updates  while calculating delay since last presented which usually should  equal to |VSYNC_INTERVAL| if no jank is present.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "gesture scroll slice id.", "table": null, "column": null}, {"name": "max_start_ts", "type": "TIMESTAMP", "desc": "OS timestamp of the last touch move arrival within a frame.", "table": null, "column": null}, {"name": "min_start_ts", "type": "TIMESTAMP", "desc": "OS timestamp of the first touch move arrival within a frame.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "The scroll which the touch belongs to.", "table": null, "column": null}, {"name": "scroll_update_id", "type": "LONG", "desc": "ID of the associated scroll update.", "table": null, "column": null}, {"name": "encapsulated_scroll_ids", "type": "STRING", "desc": "Trace ids of all frames presented in at this vsync.", "table": null, "column": null}, {"name": "total_delta", "type": "DOUBLE", "desc": "Summation of all delta_y of all gesture scrolls in this frame.", "table": null, "column": null}, {"name": "segregated_delta_y", "type": "STRING", "desc": "All delta y of all gesture scrolls comma separated, summing those gives |total_delta|.", "table": null, "column": null}, {"name": "event_latency_id", "type": "LONG", "desc": "Event latency id of the presented frame.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the EventLatency.", "table": null, "column": null}, {"name": "presentation_timestamp", "type": "LONG", "desc": "Timestamp at which the frame was shown on the screen.", "table": null, "column": null}, {"name": "delay_since_last_frame", "type": "DOUBLE", "desc": "Time elapsed since the previous frame was presented, usually equals |VSYNC| if no frame drops happened.", "table": null, "column": null}, {"name": "delay_since_last_input", "type": "DOUBLE", "desc": "Difference in OS timestamps of inputs in the current and the previous frame.", "table": null, "column": null}, {"name": "prev_event_latency_id", "type": "LONG", "desc": "The event latency id that will be used as a reference to determine the jank cause.", "table": null, "column": null}]}, {"name": "chrome_vsyncs", "desc": "Calculate |VSYNC_INTERVAL| as the lowest vsync seen in the trace or the\n minimum delay between frames larger than zero.\n\n TODO(~M130): Remove the lowest vsync since we should always have vsync_interval_ms.", "summary_desc": "Calculate |VSYNC_INTERVAL| as the lowest vsync seen in the trace or the  minimum delay between frames larger than zero.   TODO(~M130): Remove the lowest vsync since we should always have vsync_interval_ms.", "type": "TABLE", "cols": [{"name": "vsync_interval", "type": "DOUBLE", "desc": "The lowest delay between frames larger than zero.", "table": null, "column": null}]}, {"name": "chrome_janky_frames_no_cause", "desc": "Filter the frame view only to frames that had missed vsyncs.", "summary_desc": "Filter the frame view only to frames that had missed vsyncs.", "type": "TABLE", "cols": [{"name": "delay_since_last_frame", "type": "DOUBLE", "desc": "Time elapsed since the previous frame was presented, will be more than |VSYNC| in this view.", "table": null, "column": null}, {"name": "event_latency_id", "type": "LONG", "desc": "Event latency id of the presented frame.", "table": null, "column": null}, {"name": "vsync_interval", "type": "DOUBLE", "desc": "Vsync interval at the time of recording the trace.", "table": null, "column": null}, {"name": "hardware_class", "type": "STRING", "desc": "Device brand and model.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "The scroll corresponding to this frame.", "table": null, "column": null}, {"name": "prev_event_latency_id", "type": "LONG", "desc": "The event latency id that will be used as a reference to determine the jank cause.", "table": null, "column": null}]}, {"name": "chrome_janky_frames_no_subcause", "desc": "Janky frame information including the jank cause.", "summary_desc": "Janky frame information including the jank cause.", "type": "TABLE", "cols": [{"name": "delay_since_last_frame", "type": "DOUBLE", "desc": "Time elapsed since the previous frame was presented, will be more than |VSYNC| in this view.", "table": null, "column": null}, {"name": "event_latency_id", "type": "LONG", "desc": "Event latency id of the presented frame.", "table": null, "column": null}, {"name": "vsync_interval", "type": "DOUBLE", "desc": "Vsync interval at the time of recording the trace.", "table": null, "column": null}, {"name": "hardware_class", "type": "STRING", "desc": "Device brand and model.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "The scroll corresponding to this frame.", "table": null, "column": null}, {"name": "prev_event_latency_id", "type": "LONG", "desc": "The event latency id that will be used as a reference to determine the jank cause.", "table": null, "column": null}, {"name": "cause_id", "type": "LONG", "desc": "Id of the slice corresponding to the offending stage.", "table": null, "column": null}]}, {"name": "chrome_janky_frames", "desc": "Finds all causes of jank for all janky frames, and a cause of sub jank\n if the cause of jank was GPU related.", "summary_desc": "Finds all causes of jank for all janky frames, and a cause of sub jank  if the cause of jank was GPU related.", "type": "TABLE", "cols": [{"name": "cause_of_jank", "type": "STRING", "desc": "The reason the Vsync was missed.", "table": null, "column": null}, {"name": "sub_cause_of_jank", "type": "STRING", "desc": "Further breakdown if the root cause was GPU related.", "table": null, "column": null}, {"name": "delay_since_last_frame", "type": "DOUBLE", "desc": "Time elapsed since the previous frame was presented, will be more than |VSYNC| in this view.", "table": null, "column": null}, {"name": "event_latency_id", "type": "LONG", "desc": "Event latency id of the presented frame.", "table": null, "column": null}, {"name": "vsync_interval", "type": "DOUBLE", "desc": "Vsync interval at the time of recording the trace.", "table": null, "column": null}, {"name": "hardware_class", "type": "STRING", "desc": "Device brand and model.", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "The scroll corresponding to this frame.", "table": null, "column": null}]}, {"name": "chrome_unique_frame_presentation_ts", "desc": "Counting all unique frame presentation timestamps.", "summary_desc": "Counting all unique frame presentation timestamps.", "type": "TABLE", "cols": [{"name": "presentation_timestamp", "type": "LONG", "desc": "The unique frame presentation timestamp.", "table": null, "column": null}]}, {"name": "chrome_janky_frames_percentage", "desc": "Dividing missed frames over total frames to get janky frame percentage.\n This represents the v3 scroll jank metrics.\n Reflects Event.Jank.DelayedFramesPercentage UMA metric.", "summary_desc": "Dividing missed frames over total frames to get janky frame percentage.  This represents the v3 scroll jank metrics.  Reflects Event.Jank.DelayedFramesPercentage UMA metric.", "type": "TABLE", "cols": [{"name": "delayed_frame_percentage", "type": "DOUBLE", "desc": "The percent of missed frames relative to total frames - aka the percent of janky frames.", "table": null, "column": null}]}, {"name": "chrome_frames_per_scroll", "desc": "Number of frames and janky frames per scroll.", "summary_desc": "Number of frames and janky frames per scroll.", "type": "TABLE", "cols": [{"name": "scroll_id", "type": "LONG", "desc": "The ID of the scroll.", "table": null, "column": null}, {"name": "num_frames", "type": "LONG", "desc": "The number of frames in the scroll.", "table": null, "column": null}, {"name": "num_janky_frames", "type": "LONG", "desc": "The number of delayed/janky frames.", "table": null, "column": null}, {"name": "scroll_jank_percentage", "type": "DOUBLE", "desc": "The percentage of janky frames relative to total frames.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.scroll_jank.scroll_jank_v3_cause", "data_objects": [], "functions": [{"name": "chrome_get_v3_jank_cause_id", "desc": "Given two slice Ids A and B, find the maximum difference\n between the durations of it's direct children with matching names\n for example if slice A has children named (X, Y, Z) with durations of (10, 10, 5)\n and slice B has children named (X, Y) with durations of (9, 9), the function will return\n the slice id of the slice named Z that is A's child, as no matching slice named Z was found\n under B, making 5 - 0 = 5 the maximum delta between both slice's direct children", "summary_desc": "Given two slice Ids A and B, find the maximum difference  between the durations of it's direct children with matching names  for example if slice A has children named (X, Y, Z) with durations of (10, 10, 5)  and slice B has children named (X, Y) with durations of (9, 9), the function will return  the slice id of the slice named Z that is A's child, as no matching slice named Z was found  under B, making 5 - 0 = 5 the maximum delta between both slice's direct children", "args": [{"name": "janky_slice_id", "type": "LONG", "desc": "The slice id of the parent slice that we want to cause among it's children.", "table": null, "column": null}, {"name": "prev_slice_id", "type": "LONG", "desc": "The slice id of the parent slice that's the reference in comparison to |janky_slice_id|.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "The slice id of the breakdown that has the maximum duration delta."}], "table_functions": [], "macros": []}, {"module_name": "chrome.scroll_jank.scroll_offsets", "data_objects": [{"name": "chrome_scroll_input_deltas", "desc": "The raw input deltas for all input events which were part of a scroll.", "summary_desc": "The raw input deltas for all input events which were part of a scroll.", "type": "TABLE", "cols": [{"name": "scroll_update_id", "type": "LONG", "desc": "Scroll update id (aka LatencyInfo.ID) for this scroll update input event.", "table": null, "column": null}, {"name": "delta_x", "type": "DOUBLE", "desc": "The delta in pixels (scaled to the device's screen size) how much this input event moved over the X axis vs previous, as reported by the OS.", "table": null, "column": null}, {"name": "delta_y", "type": "DOUBLE", "desc": "The delta in pixels (scaled to the device's screen size) how much this input event moved over the Y axis vs previous, as reported by the OS.", "table": null, "column": null}]}, {"name": "chrome_scroll_input_offsets", "desc": "The raw coordinates and pixel offsets for all input events which were part of\n a scroll.", "summary_desc": "The raw coordinates and pixel offsets for all input events which were part of  a scroll.", "type": "TABLE", "cols": [{"name": "scroll_update_id", "type": "LONG", "desc": "An ID for this scroll update (aka LatencyInfo.ID).", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "An ID for the scroll this scroll update belongs to.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp the of the scroll input event.", "table": null, "column": null}, {"name": "delta_y", "type": "DOUBLE", "desc": "The delta in raw coordinates between this scroll update event and the previous.", "table": null, "column": null}, {"name": "relative_offset_y", "type": "DOUBLE", "desc": "The total delta of all scroll updates within the same as scroll up to and including this scroll update.", "table": null, "column": null}]}, {"name": "chrome_scroll_presented_deltas", "desc": "The page offset delta (by how much the page was scrolled vs previous frame)\n for each frame.\n This is the resulting delta that is shown to the user after the input has\n been processed. `chrome_scroll_input_deltas` tracks the underlying signal\n deltas between consecutive input events.", "summary_desc": "The page offset delta (by how much the page was scrolled vs previous frame)  for each frame.  This is the resulting delta that is shown to the user after the input has  been processed", "type": "TABLE", "cols": [{"name": "scroll_update_id", "type": "LONG", "desc": "Scroll update id (aka LatencyInfo.ID) for this scroll update input event.", "table": null, "column": null}, {"name": "delta_x", "type": "DOUBLE", "desc": "The delta in pixels (scaled to the device's screen size) how much this input event moved over the X axis vs previous, as reported by the OS.", "table": null, "column": null}, {"name": "delta_y", "type": "DOUBLE", "desc": "The delta in pixels (scaled to the device's screen size) how much this input event moved over the Y axis vs previous, as reported by the OS.", "table": null, "column": null}, {"name": "offset_x", "type": "LONG", "desc": "The page offset in pixels (scaled to the device's screen size) along the X axis.", "table": null, "column": null}, {"name": "offset_y", "type": "LONG", "desc": "The page offset in pixels (scaled to the device's screen size) along the Y axis.", "table": null, "column": null}]}, {"name": "chrome_presented_scroll_offsets", "desc": "The scrolling offsets for the actual (applied) scroll events. These are not\n necessarily inclusive of all user scroll events, rather those scroll events\n that are actually processed.", "summary_desc": "The scrolling offsets for the actual (applied) scroll events", "type": "TABLE", "cols": [{"name": "scroll_update_id", "type": "LONG", "desc": "An ID for this scroll update (aka LatencyInfo.ID).", "table": null, "column": null}, {"name": "scroll_id", "type": "LONG", "desc": "An ID for the scroll this scroll update belongs to.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Presentation timestamp.", "table": null, "column": null}, {"name": "delta_y", "type": "DOUBLE", "desc": "The delta in raw coordinates between this scroll update event and the previous.", "table": null, "column": null}, {"name": "relative_offset_y", "type": "DOUBLE", "desc": "The pixel offset of this scroll update event compared to the initial one.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.scroll_jank.utils", "data_objects": [], "functions": [], "table_functions": [{"name": "chrome_select_long_task_slices", "desc": "Extract mojo information for the long-task-tracking scenario for specific\n names. For example, LongTaskTracker slices may have associated IPC\n metadata, or InterestingTask slices for input may have associated IPC to\n determine whether the task is fling/etc.", "summary_desc": "Extract mojo information for the long-task-tracking scenario for specific  names", "args": [{"name": "name", "type": "STRING", "desc": "The name of slice.", "table": null, "column": null}], "cols": [{"name": "interface_name", "type": "STRING", "table": null, "column": null, "desc": "Name of the interface of the IPC call."}, {"name": "ipc_hash", "type": "LONG", "table": null, "column": null, "desc": "Hash of the IPC call."}, {"name": "message_type", "type": "STRING", "table": null, "column": null, "desc": "Message type (e.g. reply)."}, {"name": "id", "type": "LONG", "table": null, "column": null, "desc": "The slice id."}]}], "macros": []}, {"module_name": "chrome.scroll_jank_tagging", "data_objects": [{"name": "chrome_scroll_jank_tags", "desc": "List of scroll jank causes that apply to janky scroll frames.\n Each frame can have zero or multiple tags.", "summary_desc": "List of scroll jank causes that apply to janky scroll frames.  Each frame can have zero or multiple tags.", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame ID.", "table": null, "column": null}, {"name": "tag", "type": "STRING", "desc": "Tag of the scroll jank cause.", "table": null, "column": null}]}, {"name": "chrome_tagged_janky_scroll_frames", "desc": "Consolidated list of tags for each janky scroll frame.", "summary_desc": "Consolidated list of tags for each janky scroll frame.", "type": "TABLE", "cols": [{"name": "frame_id", "type": "LONG", "desc": "Frame id.", "table": null, "column": null}, {"name": "tagged", "type": "BOOL", "desc": "Whether this frame has any tags or not.", "table": null, "column": null}, {"name": "tags", "type": "STRING", "desc": "Comma-separated list of tags for this frame.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.speedometer", "data_objects": [{"name": "chrome_speedometer_measure", "desc": "Augmented slices for Speedometer measurements.\n These are the intervals of time Speedometer uses to compute the final score.\n There are two intervals that are measured for every test: sync and async", "summary_desc": "Augmented slices for Speedometer measurements.  These are the intervals of time Speedometer uses to compute the final score.  There are two intervals that are measured for every test: sync and async", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the measure slice", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the measure slice", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Full measure name", "table": null, "column": null}, {"name": "iteration", "type": "LONG", "desc": "Speedometer iteration the slice belongs to.", "table": null, "column": null}, {"name": "suite_name", "type": "STRING", "desc": "Suite name", "table": null, "column": null}, {"name": "test_name", "type": "STRING", "desc": "Test name", "table": null, "column": null}, {"name": "measure_type", "type": "STRING", "desc": "Type of the measure (sync or async)", "table": null, "column": null}]}, {"name": "chrome_speedometer_iteration", "desc": "Slice that covers one Speedometer iteration.\n Depending on the Speedometer version these slices might need to be estimated\n as older versions of Speedometer to not emit marks for this interval. The\n metrics associated are the same ones Speedometer would output, but note we\n use ns precision (Speedometer uses ~100us) so the actual values might differ\n a bit.", "summary_desc": "Slice that covers one Speedometer iteration.  Depending on the Speedometer version these slices might need to be estimated  as older versions of Speedometer to not emit marks for this interval", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the iteration", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the iteration", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Iteration name", "table": null, "column": null}, {"name": "iteration", "type": "LONG", "desc": "Iteration number", "table": null, "column": null}, {"name": "geomean", "type": "DOUBLE", "desc": "Geometric mean of the suite durations for this iteration.", "table": null, "column": null}, {"name": "score", "type": "DOUBLE", "desc": "Speedometer score for this iteration (The total score for a run in the average of all iteration scores).", "table": null, "column": null}]}], "functions": [{"name": "chrome_speedometer_score", "desc": "Returns the Speedometer score for all iterations in the trace", "summary_desc": "Returns the Speedometer score for all iterations in the trace", "args": [], "return_type": "DOUBLE", "return_desc": "Speedometer score"}, {"name": "chrome_speedometer_renderer_main_utid", "desc": "Returns the utid for the main thread that ran Speedometer 3", "summary_desc": "Returns the utid for the main thread that ran Speedometer 3", "args": [], "return_type": "LONG", "return_desc": "Renderer main utid"}], "table_functions": [], "macros": []}, {"module_name": "chrome.speedometer_2_1", "data_objects": [{"name": "chrome_speedometer_2_1_measure", "desc": "Augmented slices for Speedometer measurements.\n These are the intervals of time Speedometer uses to compute the final score.\n There are two intervals that are measured for every test: sync and async\n sync is the time between the start and sync-end marks, async is the time\n between the sync-end and async-end marks.", "summary_desc": "Augmented slices for Speedometer measurements.  These are the intervals of time Speedometer uses to compute the final score.  There are two intervals that are measured for every test: sync and async  sync is the time between the start and sync-end marks, async is the time  between the sync-end and async-end marks.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the measure slice", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the measure slice", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Full measure name", "table": null, "column": null}, {"name": "iteration", "type": "LONG", "desc": "Speedometer iteration the slice belongs to.", "table": null, "column": null}, {"name": "suite_name", "type": "STRING", "desc": "Suite name", "table": null, "column": null}, {"name": "test_name", "type": "STRING", "desc": "Test name", "table": null, "column": null}, {"name": "measure_type", "type": "STRING", "desc": "Type of the measure (sync or async)", "table": null, "column": null}]}, {"name": "chrome_speedometer_2_1_iteration", "desc": "Slice that covers one Speedometer iteration.\n This slice is actually estimated as a default Speedometer run will not emit\n marks to cover this interval. The metrics associated are the same ones\n Speedometer would output, but note we use ns precision (Speedometer uses\n ~100us) so the actual values might differ a bit. Also note Speedometer\n returns the values in ms these here and in ns.", "summary_desc": "Slice that covers one Speedometer iteration.  This slice is actually estimated as a default Speedometer run will not emit  marks to cover this interval", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the iteration", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the iteration", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Iteration name", "table": null, "column": null}, {"name": "iteration", "type": "LONG", "desc": "Iteration number", "table": null, "column": null}, {"name": "geomean", "type": "DOUBLE", "desc": "Geometric mean of the suite durations for this iteration.", "table": null, "column": null}, {"name": "score", "type": "DOUBLE", "desc": "Speedometer score for this iteration (The total score for a run in the average of all iteration scores).", "table": null, "column": null}]}], "functions": [{"name": "chrome_speedometer_2_1_score", "desc": "Returns the Speedometer 2.1 score for all iterations in the trace", "summary_desc": "Returns the Speedometer 2.1 score for all iterations in the trace", "args": [], "return_type": "DOUBLE", "return_desc": "Speedometer 2.1 score"}, {"name": "chrome_speedometer_2_1_renderer_main_utid", "desc": "Returns the utid for the main thread that ran Speedometer 2.1", "summary_desc": "Returns the utid for the main thread that ran Speedometer 2.1", "args": [], "return_type": "LONG", "return_desc": "Renderer main utid"}], "table_functions": [], "macros": []}, {"module_name": "chrome.speedometer_3", "data_objects": [{"name": "chrome_speedometer_3_measure", "desc": "Augmented slices for Speedometer measurements.\n These are the intervals of time Speedometer uses to compute the final score.\n There are two intervals that are measured for every test: sync and async.", "summary_desc": "Augmented slices for Speedometer measurements.  These are the intervals of time Speedometer uses to compute the final score.  There are two intervals that are measured for every test: sync and async.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the measure slice", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the measure slice", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Full measure name", "table": null, "column": null}, {"name": "iteration", "type": "LONG", "desc": "Speedometer iteration the slice belongs to.", "table": null, "column": null}, {"name": "suite_name", "type": "STRING", "desc": "Suite name", "table": null, "column": null}, {"name": "test_name", "type": "STRING", "desc": "Test name", "table": null, "column": null}, {"name": "measure_type", "type": "STRING", "desc": "Type of the measure (sync or async)", "table": null, "column": null}]}, {"name": "chrome_speedometer_3_iteration", "desc": "Slice that covers one Speedometer iteration.\n The metrics associated are the same ones\n Speedometer would output, but note we use ns precision (Speedometer uses\n ~100us) so the actual values might differ a bit.", "summary_desc": "Slice that covers one Speedometer iteration.  The metrics associated are the same ones  Speedometer would output, but note we use ns precision (Speedometer uses  ~100us) so the actual values might differ a bit.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the iteration", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the iteration", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Iteration name", "table": null, "column": null}, {"name": "iteration", "type": "LONG", "desc": "Iteration number", "table": null, "column": null}, {"name": "geomean", "type": "DOUBLE", "desc": "Geometric mean of the suite durations for this iteration.", "table": null, "column": null}, {"name": "score", "type": "DOUBLE", "desc": "Speedometer score for this iteration (The total score for a run in the average of all iteration scores).", "table": null, "column": null}]}], "functions": [{"name": "chrome_speedometer_3_score", "desc": "Returns the Speedometer 3 score for all iterations in the trace", "summary_desc": "Returns the Speedometer 3 score for all iterations in the trace", "args": [], "return_type": "DOUBLE", "return_desc": "Speedometer 3 score"}, {"name": "chrome_speedometer_3_renderer_main_utid", "desc": "Returns the utid for the main thread that ran Speedometer 3", "summary_desc": "Returns the utid for the main thread that ran Speedometer 3", "args": [], "return_type": "LONG", "return_desc": "Renderer main utid"}], "table_functions": [], "macros": []}, {"module_name": "chrome.startups", "data_objects": [{"name": "chrome_startups", "desc": "Chrome startups, including launch cause.", "summary_desc": "Chrome startups, including launch cause.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Unique ID", "table": null, "column": null}, {"name": "activity_id", "type": "LONG", "desc": "Chrome Activity event id of the launch.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Name of the launch start event.", "table": null, "column": null}, {"name": "startup_begin_ts", "type": "TIMESTAMP", "desc": "Timestamp that the startup occurred.", "table": null, "column": null}, {"name": "first_visible_content_ts", "type": "TIMESTAMP", "desc": "Timestamp to the first visible content.", "table": null, "column": null}, {"name": "launch_cause", "type": "STRING", "desc": "Launch cause. See Startup.LaunchCauseType in chrome_track_event.proto.", "table": null, "column": null}, {"name": "browser_upid", "type": "LONG", "desc": "Process ID of the Browser where the startup occurred.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.tasks", "data_objects": [{"name": "chrome_java_views", "desc": "A list of slices corresponding to operations on interesting (non-generic)\n Chrome Java views. The view is considered interested if it's not a system\n (ContentFrameLayout) or generic library (CompositorViewHolder) views.\n\n TODO(altimin): Add \"columns_from slice\" annotation.\n TODO(altimin): convert this to EXTEND_TABLE when it becomes available.", "summary_desc": "A list of slices corresponding to operations on interesting (non-generic)  Chrome Java views", "type": "VIEW", "cols": [{"name": "filtered_name", "type": "STRING", "desc": "Name of the view.", "table": null, "column": null}, {"name": "is_software_screenshot", "type": "BOOL", "desc": "Whether this slice is a part of non-accelerated capture toolbar screenshot.", "table": null, "column": null}, {"name": "is_hardware_screenshot", "type": "BOOL", "desc": "Whether this slice is a part of accelerated capture toolbar screenshot.", "table": null, "column": null}, {"name": "slice_id", "type": "LONG", "desc": "Slice id.", "table": null, "column": null}]}, {"name": "chrome_scheduler_tasks", "desc": "A list of tasks executed by Chrome scheduler.", "summary_desc": "A list of tasks executed by Chrome scheduler.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Slice id.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "Type.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Name of the task.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration.", "table": null, "column": null}, {"name": "utid", "type": "LONG", "desc": "Utid of the thread this task run on.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread this task run on.", "table": null, "column": null}, {"name": "upid", "type": "LONG", "desc": "Upid of the process of this task.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Name of the process of this task.", "table": null, "column": null}, {"name": "track_id", "type": "LONG", "desc": "Same as slice.track_id.", "table": null, "column": null}, {"name": "category", "type": "STRING", "desc": "Same as slice.category.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Same as slice.depth.", "table": null, "column": null}, {"name": "parent_id", "type": "LONG", "desc": "Same as slice.parent_id.", "table": null, "column": null}, {"name": "arg_set_id", "type": "LONG", "desc": "Same as slice.arg_set_id.", "table": null, "column": null}, {"name": "thread_ts", "type": "TIMESTAMP", "desc": "Same as slice.thread_ts.", "table": null, "column": null}, {"name": "thread_dur", "type": "DURATION", "desc": "Same as slice.thread_dur.", "table": null, "column": null}, {"name": "posted_from", "type": "STRING", "desc": "Source location where the PostTask was called.", "table": null, "column": null}]}, {"name": "chrome_tasks", "desc": "A list of \"Chrome tasks\": top-level execution units (e.g. scheduler tasks /\n IPCs / system callbacks) run by Chrome. For a given thread, the slices\n corresponding to these tasks will not intersect.", "summary_desc": "A list of \"Chrome tasks\": top-level execution units (e.g", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "Id for the given task, also the id of the slice this task corresponds to.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Name for the given task.", "table": null, "column": null}, {"name": "task_type", "type": "STRING", "desc": "Type of the task (e.g. \"scheduler\").", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Thread name.", "table": null, "column": null}, {"name": "utid", "type": "LONG", "desc": "Utid.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Process name.", "table": null, "column": null}, {"name": "upid", "type": "LONG", "desc": "Upid.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias of |slice.ts|.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias of |slice.dur|.", "table": null, "column": null}, {"name": "track_id", "type": "LONG", "desc": "Alias of |slice.track_id|.", "table": null, "column": null}, {"name": "category", "type": "STRING", "desc": "Alias of |slice.category|.", "table": null, "column": null}, {"name": "arg_set_id", "type": "LONG", "desc": "Alias of |slice.arg_set_id|.", "table": null, "column": null}, {"name": "thread_ts", "type": "TIMESTAMP", "desc": "Alias of |slice.thread_ts|.", "table": null, "column": null}, {"name": "thread_dur", "type": "DURATION", "desc": "Alias of |slice.thread_dur|.", "table": null, "column": null}, {"name": "full_name", "type": "STRING", "desc": "STRING    Legacy alias for |name|.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "chrome.vsync_intervals", "data_objects": [{"name": "chrome_vsync_intervals", "desc": "A simple table that checks the time between VSync (this can be used to\n determine if we're refreshing at 90 FPS or 60 FPS).\n\n Note: In traces without the \"Java\" category there will be no VSync\n       TraceEvents and this table will be empty.", "summary_desc": "A simple table that checks the time between VSync (this can be used to  determine if we're refreshing at 90 FPS or 60 FPS).   Note: In traces without the \"Java\" category there will be no VSync        TraceEvents and this table will be empty.", "type": "TABLE", "cols": [{"name": "slice_id", "type": "LONG", "desc": "Slice id of the vsync slice.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of the vsync slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the vsync slice.", "table": null, "column": null}, {"name": "track_id", "type": "LONG", "desc": "Track id of the vsync slice.", "table": null, "column": null}, {"name": "time_to_next_vsync", "type": "LONG", "desc": "Duration until next vsync arrives.", "table": null, "column": null}]}], "functions": [{"name": "chrome_calculate_avg_vsync_interval", "desc": "Function: compute the average Vysnc interval of the\n gesture (hopefully this would be either 60 FPS for the whole gesture or 90\n FPS but that isnt always the case) on the given time segment.\n If the trace doesnt contain the VSync TraceEvent we just fall back on\n assuming its 60 FPS (this is the 1.6e+7 in the COALESCE which\n corresponds to 16 ms or 60 FPS).", "summary_desc": "Function: compute the average Vysnc interval of the  gesture (hopefully this would be either 60 FPS for the whole gesture or 90  FPS but that isnt always the case) on the given time segment.  If the trace doesnt contain the VSync TraceEvent we just fall back on  assuming its 60 FPS (this is the 1.6e+7 in the COALESCE which  corresponds to 16 ms or 60 FPS).", "args": [{"name": "begin_ts", "type": "TIMESTAMP", "desc": "Interval start time.", "table": null, "column": null}, {"name": "end_ts", "type": "TIMESTAMP", "desc": "Interval end time.", "table": null, "column": null}], "return_type": "DOUBLE", "return_desc": "The average vsync interval on this time segment or 1.6e+7, if trace doesn't contain the VSync TraceEvent."}], "table_functions": [], "macros": []}, {"module_name": "chrome.web_content_interactions", "data_objects": [{"name": "chrome_web_content_interactions", "desc": "Chrome web content interactions (InteractionToFirstPaint), including\n associated high-level metrics and properties.\n\n Multiple events may occur for the same interaction; each row in this table\n represents the primary (longest) event for the interaction.\n\n Web content interactions are discrete, as opposed to sustained (e.g.\n scrolling); and only occur with the web content itself, as opposed to other\n parts of Chrome (e.g. omnibox). Interaction events include taps, clicks,\n keyboard input (typing), and drags.", "summary_desc": "Chrome web content interactions (InteractionToFirstPaint), including  associated high-level metrics and properties.   Multiple events may occur for the same interaction; each row in this table  represents the primary (longest) event for the interaction.   Web content interactions are discrete, as opposed to sustained (e.g.  scrolling); and only occur with the web content itself, as opposed to other  parts of Chrome (e.g", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Unique id for this interaction.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the event. Because multiple events may occur for the same interaction, this is the start timestamp of the longest event.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the event. Because multiple events may occur for the same interaction, this is the duration of the longest event.", "table": null, "column": null}, {"name": "interaction_type", "type": "STRING", "desc": "The interaction type.", "table": null, "column": null}, {"name": "total_duration_ms", "type": "LONG", "desc": "The total duration of all events that occurred for the same interaction.", "table": null, "column": null}, {"name": "renderer_upid", "type": "LONG", "desc": "The process id this event occurred on.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "counters", "modules": [{"module_name": "counters.global_tracks", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "counters.intervals", "data_objects": [], "functions": [], "table_functions": [], "macros": [{"name": "counter_leading_intervals", "desc": "For a given counter timeline (e.g. a single counter track), returns\n intervals of time where the counter has the same value. For every run\n of identical values, this macro will return a row for the first one,\n and a row merging all subsequent ones. This to to facilitate construction\n of counters from delta_values.\n\n Intervals are computed in a \"forward-looking\" way. That is, if a counter\n changes value at some timestamp, it's assumed it *just* reached that\n value and it should continue to have that value until the next\n value change. The final value is assumed to hold until the very end of\n the trace.\n\n For example, suppose we have the following data:\n ```\n ts=0, value=10, track_id=1\n ts=0, value=10, track_id=2\n ts=10, value=10, track_id=1\n ts=10, value=20, track_id=2\n ts=20, value=30, track_id=1\n [end of trace at ts = 40]\n ```\n\n Then this macro will generate the following intervals:\n ```\n ts=0, dur=10, value=10, track_id=1\n ts=10, dur=10, value=10, track_id=1\n ts=20, dur=10, value=30, track_id=1\n ts=0, dur=10, value=10, track_id=2\n ts=10, dur=30, value=20, track_id=2\n ```", "summary_desc": "For a given counter timeline (e.g", "return_desc": "Table with the schema: id LONG, As passed in ts TIMESTAMP, As passed in dur DURATION, Difference to the timestamp for the leading row. track_id JOINID(track.id), As passed in value DOUBLE, As passed in next_value DOUBLE, Value for the leading row. delta_value DOUBLE Delta to the *lagging* row - note that this is not the same thing as (next_value - value).", "return_type": "TableOrSubquery", "args": [{"name": "counter_table", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to a \"counter-like\" table. This table must have the columns \"id\" and \"ts\" and \"track_id\" and \"value\" corresponding to an id, timestamp, counter track_id and associated counter value.", "table": null, "column": null}]}]}]}, {"name": "export", "modules": [{"module_name": "export.to_firefox_profile", "data_objects": [], "functions": [{"name": "export_to_firefox_profile", "desc": "Dumps all trace data as a Firefox profile json string\n See `Profile` in\n https://github.com/firefox-devtools/profiler/blob/main/src/types/profile.js\n Also\n https://firefox-source-docs.mozilla.org/tools/profiler/code-overview.html\n\n You would probably want to download the generated json and then open at\n https://https://profiler.firefox.com\n You can easily do this from the UI via the following SQL\n `SELECT CAST(export_to_firefox_profile() AS BLOB) AS profile;`\n The result will have a link for you to download this json as a file.", "summary_desc": "Dumps all trace data as a Firefox profile json string  See `Profile` in  https://github.com/firefox-devtools/profiler/blob/main/src/types/profile.js  Also  https://firefox-source-docs.mozilla.org/tools/profiler/code-overview.html   You would probably want to download the generated json and then open at  https://https://profiler.firefox.com  You can easily do this from the UI via the following SQL  `SELECT CAST(export_to_firefox_profile() AS BLOB) AS profile;`  The result will have a link for you to download this json as a file.", "args": [], "return_type": "STRING", "return_desc": "Json profile"}], "table_functions": [], "macros": []}, {"module_name": "export.to_svg", "data_objects": [], "functions": [], "table_functions": [], "macros": []}]}, {"name": "graphs", "modules": [{"module_name": "graphs.critical_path", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "graphs.dominator_tree", "data_objects": [], "functions": [], "table_functions": [], "macros": [{"name": "graph_dominator_tree", "desc": "Given a table containing a directed flow-graph and an entry node, computes\n the \"dominator tree\" for the graph. See [1] for an explanation of what a\n dominator tree is.\n\n [1] https://en.wikipedia.org/wiki/Dominator_(graph_theory)\n\n Example usage on traces containing heap graphs:\n ```\n CREATE PERFETTO VIEW dominator_compatible_heap_graph AS\n -- Extract the edges from the heap graph which correspond to references\n -- between objects.\n SELECT\n   owner_id AS source_node_id,\n   owned_id as dest_node_id\n FROM heap_graph_reference\n JOIN heap_graph_object owner on heap_graph_reference.owner_id = owner.id\n WHERE owned_id IS NOT NULL AND owner.reachable\n UNION ALL\n -- Since a Java heap graph is a \"forest\" structure, we need to add a dummy\n -- \"root\" node which connects all the roots of the forest into a single\n -- connected component.\n SELECT\n   (SELECT max(id) + 1 FROM heap_graph_object) as source_node_id,\n   id\n FROM heap_graph_object\n WHERE root_type IS NOT NULL;\n\n SELECT *\n FROM graph_dominator_tree!(\n   dominator_compatible_heap_graph,\n   (SELECT max(id) + 1 FROM heap_graph_object)\n );\n ```", "summary_desc": "Given a table containing a directed flow-graph and an entry node, computes  the \"dominator tree\" for the graph", "return_desc": "The returned table has the schema (node_id LONG, dominator_node_id LONG). |node_id| is the id of the node from the input graph and |dominator_node_id| is the id of the node in the input flow-graph which is the \"dominator\" of |node_id|.", "return_type": "TableOrSubquery", "args": [{"name": "graph_table", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to a directed flow-graph on which the dominator tree should be computed. This table must have the columns \"source_node_id\" and \"dest_node_id\" corresponding to the two nodes on either end of the edges in the graph.  Note: the columns must contain uint32 similar to ids in trace processor tables (i.e. the values should be relatively dense and close to zero). The implementation makes assumptions on this for performance reasons and, if this criteria is not, can lead to enormous amounts of memory being allocated.  Note: this means that the graph *must* be a single fully connected component with |root_node_id| (see below) being the \"entry node\" for this component. Specifically, all nodes *must* be reachable by following paths from the root node. Failing to adhere to this property will result in undefined behaviour.  If working with a \"forest\"-like structure, a dummy node should be added which links all the roots of the forest together into a single component; an example of this can be found in the heap graph example query above.", "table": null, "column": null}, {"name": "root_node_id", "type": "Expr", "desc": "The entry node to |graph_table| which will be the root of the dominator tree.", "table": null, "column": null}]}]}, {"module_name": "graphs.hierarchy", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "graphs.partition", "data_objects": [], "functions": [], "table_functions": [], "macros": [{"name": "tree_structural_partition_by_group", "desc": "Partitions a tree into a forest of trees based on a given grouping key\n in a structure-preserving way.\n\n Specifically, for each tree in the output forest, all the nodes in that tree\n have the same ancestors and descendants as in the original tree *iff* that\n ancestor/descendent belonged to the same group.\n\n Example:\n Input\n\n   id | parent_id | group_key\n   ---|-----------|----------\n   1  | NULL      | 1\n   2  | 1         | 1\n   3  | NULL      | 2\n   4  | NULL      | 2\n   5  | 2         | 1\n   6  | NULL      | 3\n   7  | 4         | 2\n   8  | 4         | 1\n\n Or as a graph:\n ```\n         1 (1)\n        /\n       2 (1)\n      /  \\\n     3 (2) 4 (2)\n           /   \\\n         5 (1) 8 (1)\n        /  \\\n     6 (3) 7 (2)\n ```\n Possible output (order of rows is implementation-defined)\n\n   id | parent_id | group_key\n   ---|-----------|-------\n   1  | NULL      | 1\n   2  | 1         | 1\n   3  | NULL      | 2\n   4  | NULL      | 2\n   5  | 2         | 1\n   6  | NULL      | 3\n   7  | 4         | 2\n   8  | 2         | 1\n\n Or as a forest:\n ```\n     1 (1)       3 (2)      4 (2)        6 (3)\n      |                      |\n     2 (1)                  7 (2)\n     /   \\\n   5 (1) 8 (1)\n ```", "summary_desc": "Partitions a tree into a forest of trees based on a given grouping key  in a structure-preserving way.   Specifically, for each tree in the output forest, all the nodes in that tree  have the same ancestors and descendants as in the original tree *iff* that  ancestor/descendent belonged to the same group.   Example:  Input     id | parent_id | group_key    ---|-----------|----------    1  | NULL      | 1    2  | 1         | 1    3  | NULL      | 2    4  | NULL      | 2    5  | 2         | 1    6  | NULL      | 3    7  | 4         | 2    8  | 4         | 1   Or as a graph:  ```          1 (1)         /        2 (1)       /  \\      3 (2) 4 (2)            /   \\          5 (1) 8 (1)         /  \\      6 (3) 7 (2)  ```  Possible output (order of rows is implementation-defined)     id | parent_id | group_key    ---|-----------|-------    1  | NULL      | 1    2  | 1         | 1    3  | NULL      | 2    4  | NULL      | 2    5  | 2         | 1    6  | NULL      | 3    7  | 4         | 2    8  | 2         | 1   Or as a forest:  ```      1 (1)       3 (2)      4 (2)        6 (3)       |                      |      2 (1)                  7 (2)      /   \\    5 (1) 8 (1)  ```", "return_desc": "The returned table has the schema (id LONG, parent_id LONG, group_key LONG).", "return_type": "TableOrSubquery", "args": [{"name": "tree_table", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to a tree which should be partitioned. This table must have the columns \"id\", \"parent_id\" and \"group_key\".  Note: the columns must contain uint32 similar to ids in trace processor tables (i.e. the values should be relatively dense and close to zero). The implementation makes assumptions on this for performance reasons and, if this criteria is not, can lead to enormous amounts of memory being allocated.", "table": null, "column": null}]}]}, {"module_name": "graphs.scan", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "graphs.search", "data_objects": [], "functions": [], "table_functions": [], "macros": [{"name": "graph_reachable_dfs", "desc": "Computes the \"reachable\" set of nodes in a directed graph from a given set\n of starting nodes by performing a depth-first search on the graph. The\n returned nodes are structured as a tree with parent-child relationships\n corresponding to the order in which nodes were encountered by the DFS.\n\n While this macro can be used directly by end users (hence being public),\n it is primarily intended as a lower-level building block upon which higher\n level functions/macros in the standard library can be built.\n\n Example usage on traces containing heap graphs:\n ```\n -- Compute the reachable nodes from the first heap root.\n SELECT *\n FROM graph_reachable_dfs!(\n   (\n     SELECT\n       owner_id AS source_node_id,\n       owned_id as dest_node_id\n     FROM heap_graph_reference\n     WHERE owned_id IS NOT NULL\n   ),\n   (SELECT id FROM heap_graph_object WHERE root_type IS NOT NULL)\n );\n ```", "summary_desc": "Computes the \"reachable\" set of nodes in a directed graph from a given set  of starting nodes by performing a depth-first search on the graph", "return_desc": "The returned table has the schema (node_id LONG, parent_node_id LONG). |node_id| is the id of the node from the input graph and |parent_node_id| is the id of the node which was the first encountered predecessor in a DFS search of the graph.", "return_type": "TableOrSubquery", "args": [{"name": "graph_table", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to a directed graph on which the reachability search should be performed. This table must have the columns \"source_node_id\" and \"dest_node_id\" corresponding to the two nodes on either end of the edges in the graph.  Note: the columns must contain uint32 similar to ids in trace processor tables (i.e. the values should be relatively dense and close to zero). The implementation makes assumptions on this for performance reasons and, if this criteria is not, can lead to enormous amounts of memory being allocated.", "table": null, "column": null}, {"name": "start_nodes", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to the list of start nodes for the BFS. This table must have a single column \"node_id\".", "table": null, "column": null}]}, {"name": "graph_reachable_bfs", "desc": "Computes the \"reachable\" set of nodes in a directed graph from a given\n starting node by performing a breadth-first search on the graph. The returned\n nodes are structured as a tree with parent-child relationships corresponding\n to the order in which nodes were encountered by the BFS.\n\n While this macro can be used directly by end users (hence being public),\n it is primarily intended as a lower-level building block upon which higher\n level functions/macros in the standard library can be built.\n\n Example usage on traces containing heap graphs:\n ```\n -- Compute the reachable nodes from all heap roots.\n SELECT *\n FROM graph_reachable_bfs!(\n   (\n     SELECT\n       owner_id AS source_node_id,\n       owned_id as dest_node_id\n     FROM heap_graph_reference\n     WHERE owned_id IS NOT NULL\n   ),\n   (SELECT id FROM heap_graph_object WHERE root_type IS NOT NULL)\n );\n ```", "summary_desc": "Computes the \"reachable\" set of nodes in a directed graph from a given  starting node by performing a breadth-first search on the graph", "return_desc": "The returned table has the schema (node_id LONG, parent_node_id LONG). |node_id| is the id of the node from the input graph and |parent_node_id| is the id of the node which was the first encountered predecessor in a BFS search of the graph.", "return_type": "TableOrSubquery", "args": [{"name": "graph_table", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to a directed graph on which the reachability search should be performed. This table must have the columns \"source_node_id\" and \"dest_node_id\" corresponding to the two nodes on either end of the edges in the graph.  Note: the columns must contain uint32 similar to ids in trace processor tables (i.e. the values should be relatively dense and close to zero). The implementation makes assumptions on this for performance reasons and, if this criteria is not, can lead to enormous amounts of memory being allocated.", "table": null, "column": null}, {"name": "start_nodes", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to the list of start nodes for the BFS. This table must have a single column \"node_id\".", "table": null, "column": null}]}, {"name": "graph_next_sibling", "desc": "Computes the next sibling node in a directed graph. The next node under a parent node\n is determined by on the |sort_key|, which should be unique for every node under a parent.\n The order of the next sibling is undefined if the |sort_key| is not unique.\n\n Example usage:\n ```\n -- Compute the next sibling:\n SELECT *\n FROM graph_next_sibling!(\n   (\n     SELECT\n       id AS node_id,\n       parent_id AS node_parent_id,\n       ts AS sort_key\n     FROM slice\n   )\n );\n ```", "summary_desc": "Computes the next sibling node in a directed graph", "return_desc": "The returned table has the schema (node_id LONG, next_node_id LONG). |node_id| is the id of the node from the input graph and |next_node_id| is the id of the node which is its next sibling.", "return_type": "TableOrSubquery", "args": [{"name": "graph_table", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to a directed graph for which to find the next sibling. This table must have the columns \"node_id\", \"node_parent_id\" and \"sort_key\".", "table": null, "column": null}]}, {"name": "graph_reachable_weight_bounded_dfs", "desc": "Computes the \"reachable\" set of nodes in a directed graph from a set of\n starting (root) nodes by performing a depth-first search from each root node on the graph.\n The search is bounded by the sum of edge weights on the path and the root node specifies the\n max weight (inclusive) allowed before stopping the search.\n The returned nodes are structured as a tree with parent-child relationships corresponding\n to the order in which nodes were encountered by the DFS. Each row also has the root node from\n which where the edge was encountered.\n\n While this macro can be used directly by end users (hence being public),\n it is primarily intended as a lower-level building block upon which higher\n level functions/macros in the standard library can be built.\n\n Example usage on traces with sched info:\n ```\n -- Compute the reachable nodes from a sched wakeup chain\n INCLUDE PERFETTO MODULE sched.thread_executing_spans;\n\n SELECT *\n FROM\n   graph_reachable_dfs_bounded\n    !(\n      (\n        SELECT\n          id AS source_node_id,\n          COALESCE(parent_id, id) AS dest_node_id,\n          id - COALESCE(parent_id, id) AS edge_weight\n        FROM _wakeup_chain\n      ),\n      (\n        SELECT\n          id AS root_node_id,\n          id - COALESCE(prev_id, id) AS root_target_weight\n        FROM _wakeup_chain\n      ));\n ```", "summary_desc": "Computes the \"reachable\" set of nodes in a directed graph from a set of  starting (root) nodes by performing a depth-first search from each root node on the graph.  The search is bounded by the sum of edge weights on the path and the root node specifies the  max weight (inclusive) allowed before stopping the search.  The returned nodes are structured as a tree with parent-child relationships corresponding  to the order in which nodes were encountered by the DFS", "return_desc": "The returned table has the schema (root_node_id, node_id LONG, parent_node_id LONG). |root_node_id| is the id of the starting node under which this edge was encountered. |node_id| is the id of the node from the input graph and |parent_node_id| is the id of the node which was the first encountered predecessor in a DFS search of the graph.", "return_type": "TableOrSubquery", "args": [{"name": "graph_table", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to a directed graph on which the reachability search should be performed. This table must have the columns \"source_node_id\" and \"dest_node_id\" corresponding to the two nodes on either end of the edges in the graph and an \"edge_weight\" corresponding to the weight of the edge between the node.  Note: the columns must contain uint32 similar to ids in trace processor tables (i.e. the values should be relatively dense and close to zero). The implementation makes assumptions on this for performance reasons and, if this criteria is not, can lead to enormous amounts of memory being allocated.", "table": null, "column": null}, {"name": "root_table", "type": "TableOrSubquery", "desc": "A table/view/subquery corresponding to start nodes to |graph_table| which will be the roots of the reachability trees. This table must have the columns \"root_node_id\" and \"root_target_weight\" corresponding to the starting node id and the max weight allowed on the tree.  Note: the columns must contain uint32 similar to ids in trace processor tables (i.e. the values should be relatively dense and close to zero). The implementation makes assumptions on this for performance reasons and, if this criteria is not, can lead to enormous amounts of memory being allocated.", "table": null, "column": null}, {"name": "is_target_weight_floor", "type": "Expr", "desc": "Whether the target_weight is a floor weight or ceiling weight. If it's floor, the search stops right after we exceed the target weight, and we include the node that pushed just passed the target. If ceiling, the search stops right before the target weight and the node that would have pushed us passed the target is not included.", "table": null, "column": null}]}]}]}, {"name": "intervals", "modules": [{"module_name": "intervals.intersect", "data_objects": [], "functions": [], "table_functions": [], "macros": [{"name": "interval_self_intersect", "desc": "Given a list of intervals (ts, dur), this macro generates a list of interval\n end points as well as the intervals that intersect with those points.\n\n e.g. input (10, 20), (20, 25)\n\n         10      30\n        A |-------|\n             B|----------|\n             20         45\n\n would generate the output:\n ```\n ts,dur,group_id,id,interval_ends_at_ts\n 10,10,1,A,0\n 20,10,2,A,0\n 20,10,2,B,0\n 30,15,3,A,1\n 30,15,3,B,0\n 45,0,4,B,1\n ```\n\n Runtime is O(n log n + m), where n is the number of intervals and m\n is the size of the output.", "summary_desc": "Given a list of intervals (ts, dur), this macro generates a list of interval  end points as well as the intervals that intersect with those points.   e.g", "return_desc": "", "return_type": "TableOrSubquery", "args": [{"name": "intervals", "type": "TableOrSubquery", "desc": "Table or subquery containing interval data.", "table": null, "column": null}]}]}, {"module_name": "intervals.overlap", "data_objects": [], "functions": [], "table_functions": [], "macros": [{"name": "intervals_overlap_count", "desc": "Compute the distribution of the overlap of the given intervals over time.\n\n Each interval is a (ts, dur) pair and the overlap represented as a (ts, value)\n counter, with the value corresponding to the number of intervals that overlap\n the given timestamp and interval until the next timestamp.", "summary_desc": "Compute the distribution of the overlap of the given intervals over time.   Each interval is a (ts, dur) pair and the overlap represented as a (ts, value)  counter, with the value corresponding to the number of intervals that overlap  the given timestamp and interval until the next timestamp.", "return_desc": "The returned table has the schema (ts TIMESTAMP, value LONG). |ts| is the timestamp when the number of open segments changed. |value| is the number of open segments.", "return_type": "TableOrSubquery", "args": [{"name": "segments", "type": "TableOrSubquery", "desc": "Table or subquery containing interval data.", "table": null, "column": null}, {"name": "ts_column", "type": "ColumnName", "desc": "Column containing interval starts (usually `ts`).", "table": null, "column": null}, {"name": "dur_column", "type": "ColumnName", "desc": "Column containing interval durations (usually `dur`).", "table": null, "column": null}]}, {"name": "intervals_overlap_count_by_group", "desc": "Compute the distribution of the overlap of the given intervals over time from\n slices in a same group.\n\n Each interval is a (ts, dur, group) triple and the overlap represented as a\n (ts, value, group) counter, with the value corresponding to the number of\n intervals that belong to the same group and overlap the given timestamp and\n interval until the next timestamp.", "summary_desc": "Compute the distribution of the overlap of the given intervals over time from  slices in a same group.   Each interval is a (ts, dur, group) triple and the overlap represented as a  (ts, value, group) counter, with the value corresponding to the number of  intervals that belong to the same group and overlap the given timestamp and  interval until the next timestamp.", "return_desc": "The returned table has the schema (ts INT64, value UINT32, group_name) where the type of group_name is the same as that in |segments|. |ts| is the timestamp when the number of open segments changed. |value| is the number of open segments. |group_name| is the name of a group used for the overlap calculation.", "return_type": "TableOrSubquery", "args": [{"name": "segments", "type": "TableOrSubquery", "desc": "Table or subquery containing interval data.", "table": null, "column": null}, {"name": "ts_column", "type": "ColumnName", "desc": "Column containing interval starts (usually `ts`).", "table": null, "column": null}, {"name": "dur_column", "type": "ColumnName", "desc": "Column containing interval durations (usually `dur`).", "table": null, "column": null}, {"name": "group_column", "type": "ColumnName", "desc": "Column containing group name for grouping.", "table": null, "column": null}]}, {"name": "interval_merge_overlapping", "desc": "Merge intervals when they overlap to generate a minimum covering set of\n intervals with no overlap. The intervals are closed (contain both endpoints)\n and we consider two intervals overlapping\n   (a) the intervals overlap or\n   (b) if the end point of one interval is within epsilon of the start point\n       of the other.", "summary_desc": "Merge intervals when they overlap to generate a minimum covering set of  intervals with no overlap", "return_desc": "", "return_type": "TableOrSubquery", "args": [{"name": "intervals", "type": "TableOrSubquery", "desc": "Table or subquery containing interval data.", "table": null, "column": null}, {"name": "epsilon", "type": "Expr", "desc": "Constant expression for a tolerance in testing overlap (usually `0`)", "table": null, "column": null}]}]}]}, {"name": "linux", "modules": [{"module_name": "linux.block_io", "data_objects": [{"name": "linux_active_block_io_operations_by_device", "desc": "View tracking the number of IO operations remaining in the kernel IO queue or\n a block device", "summary_desc": "View tracking the number of IO operations remaining in the kernel IO queue or  a block device", "type": "VIEW", "cols": [{"name": "ts", "type": "LONG", "desc": "timestamp when block_io_start or block_io_done happened", "table": null, "column": null}, {"name": "ops_in_queue_or_device", "type": "LONG", "desc": "the number of IO operations in the kernel queue or the device", "table": null, "column": null}, {"name": "dev", "type": "LONG", "desc": "the device processing the IO operations", "table": null, "column": null}]}], "functions": [{"name": "linux_device_major_id", "desc": "Extracts the major id from a device id", "summary_desc": "Extracts the major id from a device id", "args": [{"name": "dev", "type": "LONG", "desc": "device id (userland dev_t value)", "table": null, "column": null}], "return_type": "LONG", "return_desc": "12 bits major id"}, {"name": "linux_device_minor_id", "desc": "Extracts the minor id from a device id", "summary_desc": "Extracts the minor id from a device id", "args": [{"name": "dev", "type": "LONG", "desc": "device id (userland dev_t value)", "table": null, "column": null}], "return_type": "LONG", "return_desc": "20 bits minor id"}], "table_functions": [], "macros": []}, {"module_name": "linux.cpu.frequency", "data_objects": [{"name": "cpu_frequency_counters", "desc": "Counter information for each frequency change for each CPU. Finds each time\n region where a CPU frequency is constant.", "summary_desc": "Counter information for each frequency change for each CPU", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Counter id.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Joinable with 'counter_track.id'.", "table": "track", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Starting timestamp of the counter", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration in which counter is constant and frequency doesn't change.", "table": null, "column": null}, {"name": "freq", "type": "LONG", "desc": "Frequency in kHz of the CPU that corresponds to this counter. NULL if not found or undefined.", "table": null, "column": null}, {"name": "ucpu", "type": "LONG", "desc": "Unique CPU id.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "CPU that corresponds to this counter.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.cpu.idle", "data_objects": [{"name": "cpu_idle_counters", "desc": "Counter information for each idle state change for each CPU. Finds each time\n region where a CPU idle state is constant.", "summary_desc": "Counter information for each idle state change for each CPU", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Counter id.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Joinable with 'counter_track.id'.", "table": "track", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Starting timestamp of the counter.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration in which the counter is contant and idle state doesn't change.", "table": null, "column": null}, {"name": "idle", "type": "LONG", "desc": "Idle state of the CPU that corresponds to this counter. An idle state of -1 is defined to be active state for the CPU, and the larger the integer, the deeper the idle state of the CPU. NULL if not found or undefined.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "CPU that corresponds to this counter.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.cpu.idle_stats", "data_objects": [{"name": "cpu_idle_stats", "desc": "Aggregates cpu idle statistics per core.", "summary_desc": "Aggregates cpu idle statistics per core.", "type": "TABLE", "cols": [{"name": "cpu", "type": "LONG", "desc": "CPU core number.", "table": null, "column": null}, {"name": "state", "type": "LONG", "desc": "CPU idle state (C-states).", "table": null, "column": null}, {"name": "count", "type": "LONG", "desc": "The count of entering idle state.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Total CPU core idle state duration.", "table": null, "column": null}, {"name": "avg_dur", "type": "DURATION", "desc": "Average CPU core idle state duration.", "table": null, "column": null}, {"name": "idle_percent", "type": "DOUBLE", "desc": "Idle state percentage of non suspend time (C-states + P-states).", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.cpu.idle_time_in_state", "data_objects": [{"name": "linux_per_cpu_idle_time_in_state_counters", "desc": "Percentage counter information for sysfs cpuidle states.\n For each state per cpu, report the incremental time spent in one state,\n divided by time spent in all states, between two timestamps.", "summary_desc": "Percentage counter information for sysfs cpuidle states.  For each state per cpu, report the incremental time spent in one state,  divided by time spent in all states, between two timestamps.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "The machine this residency is calculated for.", "table": null, "column": null}, {"name": "state", "type": "STRING", "desc": "State name.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "CPU.", "table": null, "column": null}, {"name": "idle_percentage", "type": "DOUBLE", "desc": "Percentage of time this cpu spent in this state.", "table": null, "column": null}, {"name": "total_residency", "type": "DOUBLE", "desc": "Incremental time spent in this state (residency), in microseconds.", "table": null, "column": null}, {"name": "time_slice", "type": "LONG", "desc": "Time this cpu spent in any state, in microseconds.", "table": null, "column": null}]}, {"name": "linux_cpu_idle_time_in_state_counters", "desc": "Percentage counter information for sysfs cpuidle states.\n For each state across all CPUs, report the incremental time spent in one\n state, divided by time spent in all states, between two timestamps.", "summary_desc": "Percentage counter information for sysfs cpuidle states.  For each state across all CPUs, report the incremental time spent in one  state, divided by time spent in all states, between two timestamps.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "The machine this residency is calculated for.", "table": null, "column": null}, {"name": "state", "type": "STRING", "desc": "State name.", "table": null, "column": null}, {"name": "idle_percentage", "type": "DOUBLE", "desc": "Percentage of time all CPUS spent in this state.", "table": null, "column": null}, {"name": "total_residency", "type": "DOUBLE", "desc": "Incremental time spent in this state (residency), in microseconds.", "table": null, "column": null}, {"name": "time_slice", "type": "LONG", "desc": "Time all CPUS spent in any state, in microseconds.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.cpu.utilization.general", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.cpu.utilization.process", "data_objects": [{"name": "cpu_cycles_per_process", "desc": "Aggregated CPU statistics for each process.", "summary_desc": "Aggregated CPU statistics for each process.", "type": "TABLE", "cols": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Unique process id", "table": "process", "column": "id"}, {"name": "millicycles", "type": "LONG", "desc": "Sum of CPU millicycles", "table": null, "column": null}, {"name": "megacycles", "type": "LONG", "desc": "Sum of CPU megacycles", "table": null, "column": null}, {"name": "runtime", "type": "DURATION", "desc": "Total runtime duration", "table": null, "column": null}, {"name": "min_freq", "type": "LONG", "desc": "Minimum CPU frequency in kHz", "table": null, "column": null}, {"name": "max_freq", "type": "LONG", "desc": "Maximum CPU frequency in kHz", "table": null, "column": null}, {"name": "avg_freq", "type": "LONG", "desc": "Average CPU frequency in kHz", "table": null, "column": null}]}], "functions": [], "table_functions": [{"name": "cpu_process_utilization_per_period", "desc": "Returns a table of process utilization per given period.\n Utilization is calculated as sum of average utilization of each CPU in each\n period, which is defined as a multiply of |interval|. For this reason\n first and last period might have lower then real utilization.", "summary_desc": "Returns a table of process utilization per given period.  Utilization is calculated as sum of average utilization of each CPU in each  period, which is defined as a multiply of |interval|", "args": [{"name": "interval", "type": "LONG", "desc": "Length of the period on which utilization should be averaged.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of the process.", "table": "process", "column": "id"}], "cols": [{"name": "ts", "type": "TIMESTAMP", "table": null, "column": null, "desc": "Timestamp of start of a second."}, {"name": "utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over period. Note: as the data is normalized, the values will be in the [0, 1] range."}, {"name": "unnormalized_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over all CPUs over period. Note: as the data is unnormalized, the values will be in the [0, cpu_count] range."}]}, {"name": "cpu_process_utilization_per_second", "desc": "Returns a table of process utilization per second.\n Utilization is calculated as sum of average utilization of each CPU in each\n period, which is defined as a multiply of |interval|. For this reason\n first and last period might have lower then real utilization.", "summary_desc": "Returns a table of process utilization per second.  Utilization is calculated as sum of average utilization of each CPU in each  period, which is defined as a multiply of |interval|", "args": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of the process.", "table": "process", "column": "id"}], "cols": [{"name": "ts", "type": "TIMESTAMP", "table": null, "column": null, "desc": "Timestamp of start of a second."}, {"name": "utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over period. Note: as the data is normalized, the values will be in the [0, 1] range."}, {"name": "unnormalized_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over all CPUs over period. Note: as the data is unnormalized, the values will be in the [0, cpu_count] range."}]}, {"name": "cpu_cycles_per_process_in_interval", "desc": "Aggregated CPU statistics for each process in a provided interval.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Aggregated CPU statistics for each process in a provided interval.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "upid", "type": "JOINID(process.id)", "table": "process", "column": "id", "desc": "Unique process id."}, {"name": "millicycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU millicycles"}, {"name": "megacycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU megacycles"}, {"name": "runtime", "type": "DURATION", "table": null, "column": null, "desc": "Total runtime duration"}, {"name": "awake_runtime", "type": "DURATION", "table": null, "column": null, "desc": "Total runtime duration, while 'awake' (CPUs not suspended)."}, {"name": "min_freq", "type": "LONG", "table": null, "column": null, "desc": "Minimum CPU frequency in kHz"}, {"name": "max_freq", "type": "LONG", "table": null, "column": null, "desc": "Maximum CPU frequency in kHz"}, {"name": "avg_freq", "type": "LONG", "table": null, "column": null, "desc": "Average CPU frequency in kHz"}]}, {"name": "cpu_process_utilization_in_interval", "desc": "Returns a table with process utilization over a given interval.\n\n Utilization is computed as runtime over the duration of the interval, aggregated by UPID.\n Utilization can be normalized (divide by number of cpus) or unnormalized.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Returns a table with process utilization over a given interval.   Utilization is computed as runtime over the duration of the interval, aggregated by UPID.  Utilization can be normalized (divide by number of cpus) or unnormalized.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "upid", "type": "JOINID(process.id)", "table": "process", "column": "id", "desc": "Unique process id."}, {"name": "process_name", "type": "STRING", "table": null, "column": null, "desc": "The name of the process."}, {"name": "awake_dur", "type": "LONG", "table": null, "column": null, "desc": "Total runtime of all processes with this UPID, while 'awake' (CPUs not suspended)."}, {"name": "awake_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Percentage of 'awake_dur' over the 'awake' duration of the interval, normalized by the number of CPUs. Values in [0.0, 100.0]"}, {"name": "awake_unnormalized_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Percentage of 'awake_dur' over the 'awake' duration of the interval, unnormalized. Values in [0.0, 100.0 * <number_of_cpus>]"}]}], "macros": []}, {"module_name": "linux.cpu.utilization.slice", "data_objects": [{"name": "cpu_cycles_per_thread_slice", "desc": "CPU cycles per each slice.", "summary_desc": "CPU cycles per each slice.", "type": "TABLE", "cols": [{"name": "id", "type": "JOINID(slice.id)", "desc": "Id of a slice.", "table": "slice", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the slice.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Id of the thread the slice is running on.", "table": "thread", "column": "id"}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Id of the process the slice is running on.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process.", "table": null, "column": null}, {"name": "millicycles", "type": "LONG", "desc": "Sum of CPU millicycles. Null if frequency couldn't be fetched for any period during the runtime of the slice.", "table": null, "column": null}, {"name": "megacycles", "type": "LONG", "desc": "Sum of CPU megacycles. Null if frequency couldn't be fetched for any period during the runtime of the slice.", "table": null, "column": null}]}], "functions": [], "table_functions": [{"name": "cpu_cycles_per_thread_slice_in_interval", "desc": "CPU cycles per each slice in interval.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "CPU cycles per each slice in interval.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "id", "type": "JOINID(slice.id)", "table": "slice", "column": "id", "desc": "Thread slice."}, {"name": "name", "type": "STRING", "table": null, "column": null, "desc": "Name of the slice."}, {"name": "utid", "type": "JOINID(thread.id)", "table": "thread", "column": "id", "desc": "Thread the slice is running on."}, {"name": "thread_name", "type": "STRING", "table": null, "column": null, "desc": "Name of the thread."}, {"name": "upid", "type": "JOINID(process.id)", "table": "process", "column": "id", "desc": "Process the slice is running on."}, {"name": "process_name", "type": "STRING", "table": null, "column": null, "desc": "Name of the process."}, {"name": "millicycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU millicycles. Null if frequency couldn't be fetched for any period during the runtime of the slice."}, {"name": "megacycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU megacycles. Null if frequency couldn't be fetched for any period during the runtime of the slice."}]}], "macros": []}, {"module_name": "linux.cpu.utilization.system", "data_objects": [{"name": "cpu_utilization_per_second", "desc": "Table with system utilization per second.\n Utilization is calculated by sum of average utilization of each CPU every\n second. For this reason first and last second might have lower then real\n utilization.", "summary_desc": "Table with system utilization per second.  Utilization is calculated by sum of average utilization of each CPU every  second", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of start of a second.", "table": null, "column": null}, {"name": "utilization", "type": "DOUBLE", "desc": "Sum of average utilization over period. Note: as the data is normalized, the values will be in the [0, 1] range.", "table": null, "column": null}, {"name": "unnormalized_utilization", "type": "DOUBLE", "desc": "Sum of average utilization over all CPUs over period. Note: as the data is unnormalized, the values will be in the [0, cpu_count] range.", "table": null, "column": null}]}, {"name": "cpu_cycles", "desc": "Aggregated CPU statistics for whole trace. Results in only one row.", "summary_desc": "Aggregated CPU statistics for whole trace", "type": "TABLE", "cols": [{"name": "millicycles", "type": "LONG", "desc": "Sum of CPU millicycles.", "table": null, "column": null}, {"name": "megacycles", "type": "LONG", "desc": "Sum of CPU megacycles.", "table": null, "column": null}, {"name": "runtime", "type": "DURATION", "desc": "Total runtime of all threads running on all CPUs.", "table": null, "column": null}, {"name": "min_freq", "type": "LONG", "desc": "Minimum CPU frequency in kHz.", "table": null, "column": null}, {"name": "max_freq", "type": "LONG", "desc": "Maximum CPU frequency in kHz.", "table": null, "column": null}, {"name": "avg_freq", "type": "LONG", "desc": "Average CPU frequency in kHz.", "table": null, "column": null}]}, {"name": "cpu_cycles_per_cpu", "desc": "Aggregated CPU statistics for each CPU.", "summary_desc": "Aggregated CPU statistics for each CPU.", "type": "TABLE", "cols": [{"name": "ucpu", "type": "JOINID(cpu.id)", "desc": "Unique CPU id. Joinable with `cpu.id`.", "table": "cpu", "column": "id"}, {"name": "cpu", "type": "LONG", "desc": "The number of the CPU. Might not be the same as ucpu in multi machine cases.", "table": null, "column": null}, {"name": "millicycles", "type": "LONG", "desc": "Sum of CPU millicycles.", "table": null, "column": null}, {"name": "megacycles", "type": "LONG", "desc": "Sum of CPU megacycles.", "table": null, "column": null}, {"name": "runtime", "type": "DURATION", "desc": "Total runtime of all threads running on CPU.", "table": null, "column": null}, {"name": "min_freq", "type": "LONG", "desc": "Minimum CPU frequency in kHz.", "table": null, "column": null}, {"name": "max_freq", "type": "LONG", "desc": "Maximum CPU frequency in kHz.", "table": null, "column": null}, {"name": "avg_freq", "type": "LONG", "desc": "Average CPU frequency in kHz.", "table": null, "column": null}]}], "functions": [], "table_functions": [{"name": "cpu_utilization_per_period", "desc": "Returns a table of system utilization per given period.\n Utilization is calculated as sum of average utilization of each CPU in each\n period, which is defined as a multiply of |interval|. For this reason\n first and last period might have lower then real utilization.", "summary_desc": "Returns a table of system utilization per given period.  Utilization is calculated as sum of average utilization of each CPU in each  period, which is defined as a multiply of |interval|", "args": [{"name": "interval", "type": "LONG", "desc": "Length of the period on which utilization should be averaged.", "table": null, "column": null}], "cols": [{"name": "ts", "type": "TIMESTAMP", "table": null, "column": null, "desc": "Timestamp of start of a second."}, {"name": "utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over period. Note: as the data is normalized, the values will be in the [0, 1] range."}, {"name": "unnormalized_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over all CPUs over period. Note: as the data is unnormalized, the values will be in the [0, cpu_count] range."}]}, {"name": "cpu_cycles_in_interval", "desc": "Aggregated CPU statistics in a provided interval. Results in one row.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Aggregated CPU statistics in a provided interval", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "millicycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU millicycles."}, {"name": "megacycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU megacycles."}, {"name": "runtime", "type": "DURATION", "table": null, "column": null, "desc": "Total runtime of all threads running on all CPUs."}, {"name": "awake_runtime", "type": "DURATION", "table": null, "column": null, "desc": "Total runtime of all threads running on all CPUs, while 'awake' (CPUs not suspended)."}, {"name": "min_freq", "type": "LONG", "table": null, "column": null, "desc": "Minimum CPU frequency in kHz."}, {"name": "max_freq", "type": "LONG", "table": null, "column": null, "desc": "Maximum CPU frequency in kHz."}, {"name": "avg_freq", "type": "LONG", "table": null, "column": null, "desc": "Average CPU frequency in kHz."}]}, {"name": "cpu_utilization_in_interval", "desc": "Returns a table of CPU utilization over a given interval.\n\n Utilization  is computed as runtime over the duration of the interval.\n Utilization can be normalized (divide by number of cores) or unnormalized.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Returns a table of CPU utilization over a given interval.   Utilization  is computed as runtime over the duration of the interval.  Utilization can be normalized (divide by number of cores) or unnormalized.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "awake_dur", "type": "LONG", "table": null, "column": null, "desc": "Total runtime of all threads running on all CPUs, while 'awake' (CPUs not suspended)."}, {"name": "awake_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Percentage of 'awake_dur' over the 'awake' duration of the interval, normalized by the number of CPUs. Values in [0.0, 100.0]"}, {"name": "awake_unnormalized_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Percentage of 'awake_dur' over the 'awake' duration of the interval, unnormalized. Values in [0.0, 100.0 * <number_of_cpus>]"}]}, {"name": "cpu_cycles_per_cpu_in_interval", "desc": "Aggregated CPU statistics for each CPU in a provided interval.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Aggregated CPU statistics for each CPU in a provided interval.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "ucpu", "type": "JOINID(cpu.id)", "table": "cpu", "column": "id", "desc": "Unique CPU id. Joinable with `cpu.id`."}, {"name": "cpu", "type": "LONG", "table": null, "column": null, "desc": "CPU number."}, {"name": "millicycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU millicycles."}, {"name": "megacycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU megacycles."}, {"name": "runtime", "type": "DURATION", "table": null, "column": null, "desc": "Total runtime of all threads running on CPU."}, {"name": "min_freq", "type": "LONG", "table": null, "column": null, "desc": "Minimum CPU frequency in kHz."}, {"name": "max_freq", "type": "LONG", "table": null, "column": null, "desc": "Maximum CPU frequency in kHz."}, {"name": "avg_freq", "type": "LONG", "table": null, "column": null, "desc": "Average CPU frequency in kHz."}]}], "macros": []}, {"module_name": "linux.cpu.utilization.thread", "data_objects": [{"name": "cpu_cycles_per_thread", "desc": "Aggregated CPU statistics for each thread.", "summary_desc": "Aggregated CPU statistics for each thread.", "type": "TABLE", "cols": [{"name": "utid", "type": "JOINID(thread.id)", "desc": "Thread", "table": "thread", "column": "id"}, {"name": "millicycles", "type": "LONG", "desc": "Sum of CPU millicycles", "table": null, "column": null}, {"name": "megacycles", "type": "LONG", "desc": "Sum of CPU megacycles", "table": null, "column": null}, {"name": "runtime", "type": "DURATION", "desc": "Total runtime duration", "table": null, "column": null}, {"name": "min_freq", "type": "LONG", "desc": "Minimum CPU frequency in kHz", "table": null, "column": null}, {"name": "max_freq", "type": "LONG", "desc": "Maximum CPU frequency in kHz", "table": null, "column": null}, {"name": "avg_freq", "type": "LONG", "desc": "Average CPU frequency in kHz", "table": null, "column": null}]}], "functions": [], "table_functions": [{"name": "cpu_thread_utilization_per_period", "desc": "Returns a table of thread utilization per given period.\n Utilization is calculated as sum of average utilization of each CPU in each\n period, which is defined as a multiply of |interval|. For this reason\n first and last period might have lower then real utilization.", "summary_desc": "Returns a table of thread utilization per given period.  Utilization is calculated as sum of average utilization of each CPU in each  period, which is defined as a multiply of |interval|", "args": [{"name": "interval", "type": "LONG", "desc": "Length of the period on which utilization should be averaged.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Utid of the thread.", "table": "thread", "column": "id"}], "cols": [{"name": "ts", "type": "TIMESTAMP", "table": null, "column": null, "desc": "Timestamp of start of a second."}, {"name": "utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over period. Note: as the data is normalized, the values will be in the [0, 1] range."}, {"name": "unnormalized_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over all CPUs over period. Note: as the data is unnormalized, the values will be in the [0, cpu_count] range."}]}, {"name": "cpu_thread_utilization_per_second", "desc": "Returns a table of thread utilization per second.\n Utilization is calculated as sum of average utilization of each CPU in each\n period, which is defined as a multiply of |interval|. For this reason\n first and last period might have lower then real utilization.", "summary_desc": "Returns a table of thread utilization per second.  Utilization is calculated as sum of average utilization of each CPU in each  period, which is defined as a multiply of |interval|", "args": [{"name": "utid", "type": "JOINID(thread.id)", "desc": "Utid of the thread.", "table": "thread", "column": "id"}], "cols": [{"name": "ts", "type": "TIMESTAMP", "table": null, "column": null, "desc": "Timestamp of start of a second."}, {"name": "utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over period. Note: as the data is normalized, the values will be in the [0, 1] range."}, {"name": "unnormalized_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Sum of average utilization over all CPUs over period. Note: as the data is unnormalized, the values will be in the [0, cpu_count] range."}]}, {"name": "cpu_cycles_per_thread_in_interval", "desc": "Aggregated CPU statistics for each thread in a provided interval.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Aggregated CPU statistics for each thread in a provided interval.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "utid", "type": "JOINID(thread.id)", "table": "thread", "column": "id", "desc": "Thread with CPU cycles and frequency statistics."}, {"name": "millicycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU millicycles"}, {"name": "megacycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU megacycles"}, {"name": "runtime", "type": "DURATION", "table": null, "column": null, "desc": "Total runtime duration"}, {"name": "awake_runtime", "type": "DURATION", "table": null, "column": null, "desc": "Total runtime duration, while 'awake' (CPUs not suspended)."}, {"name": "min_freq", "type": "LONG", "table": null, "column": null, "desc": "Minimum CPU frequency in kHz"}, {"name": "max_freq", "type": "LONG", "table": null, "column": null, "desc": "Maximum CPU frequency in kHz"}, {"name": "avg_freq", "type": "LONG", "table": null, "column": null, "desc": "Average CPU frequency in kHz"}]}, {"name": "cpu_thread_utilization_in_interval", "desc": "Returns a table of thread utilization over a given interval.\n\n Utilization is computed as runtime over the duration of the interval, aggregated by UTID.\n Utilization can be normalized (divide by number of CPUs) or unnormalized.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Returns a table of thread utilization over a given interval.   Utilization is computed as runtime over the duration of the interval, aggregated by UTID.  Utilization can be normalized (divide by number of CPUs) or unnormalized.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "upid", "type": "JOINID(process.id)", "table": "process", "column": "id", "desc": "Unique process id."}, {"name": "utid", "type": "JOINID(thread.id)", "table": "thread", "column": "id", "desc": "Unique thread id."}, {"name": "thread_name", "type": "STRING", "table": null, "column": null, "desc": "The name of the thread"}, {"name": "awake_dur", "type": "LONG", "table": null, "column": null, "desc": "Total runtime of all threads with this UTID, while 'awake' (CPUs not suspended)."}, {"name": "awake_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Percentage of 'awake_dur' over the 'awake' duration of the interval, normalized by the number of CPUs. Values in [0.0, 100.0]"}, {"name": "awake_unnormalized_utilization", "type": "DOUBLE", "table": null, "column": null, "desc": "Percentage of 'awake_dur' over the 'awake' duration of the interval, unnormalized. Values in [0.0, 100.0 * <number_of_cpus>]"}]}], "macros": []}, {"module_name": "linux.cpu.utilization.thread_cpu", "data_objects": [{"name": "cpu_cycles_per_thread_per_cpu", "desc": "Aggregated CPU statistics for each thread per CPU combination.\n To operate properly this requires sched/sched_switch and power/cpu_frequency\n ftrace events to be present in the trace.", "summary_desc": "Aggregated CPU statistics for each thread per CPU combination.  To operate properly this requires sched/sched_switch and power/cpu_frequency  ftrace events to be present in the trace.", "type": "TABLE", "cols": [{"name": "utid", "type": "JOINID(thread.id)", "desc": "Thread", "table": "thread", "column": "id"}, {"name": "ucpu", "type": "JOINID(cpu.id)", "desc": "Unique CPU id. Joinable with `cpu.id`.", "table": "cpu", "column": "id"}, {"name": "cpu", "type": "LONG", "desc": "The number of the CPU. Might not be the same as ucpu in multi machine cases.", "table": null, "column": null}, {"name": "millicycles", "type": "LONG", "desc": "Sum of CPU millicycles", "table": null, "column": null}, {"name": "megacycles", "type": "LONG", "desc": "Sum of CPU megacycles", "table": null, "column": null}, {"name": "runtime", "type": "DURATION", "desc": "Total runtime duration", "table": null, "column": null}, {"name": "min_freq", "type": "LONG", "desc": "Minimum CPU frequency in kHz", "table": null, "column": null}, {"name": "max_freq", "type": "LONG", "desc": "Maximum CPU frequency in kHz", "table": null, "column": null}, {"name": "avg_freq", "type": "LONG", "desc": "Average CPU frequency in kHz", "table": null, "column": null}]}], "functions": [], "table_functions": [{"name": "cpu_cycles_per_thread_per_cpu_in_interval", "desc": "Aggregated CPU statistics for each thread per CPU combination in a provided interval.\n To operate properly this requires sched/sched_switch and power/cpu_frequency\n ftrace events to be present in the trace.\n Warning: this query is expensive and might take a long time to execute when joined\n with a large number of intervals.", "summary_desc": "Aggregated CPU statistics for each thread per CPU combination in a provided interval.  To operate properly this requires sched/sched_switch and power/cpu_frequency  ftrace events to be present in the trace.  Warning: this query is expensive and might take a long time to execute when joined  with a large number of intervals.", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "Start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Duration of the interval.", "table": null, "column": null}], "cols": [{"name": "utid", "type": "JOINID(thread.id)", "table": "thread", "column": "id", "desc": "Thread with CPU cycles and frequency statistics."}, {"name": "ucpu", "type": "JOINID(cpu.id)", "table": "cpu", "column": "id", "desc": "Unique CPU id. Joinable with `cpu.id`."}, {"name": "cpu", "type": "LONG", "table": null, "column": null, "desc": "The number of the CPU. Might not be the same as ucpu in multi machine cases."}, {"name": "millicycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU millicycles"}, {"name": "megacycles", "type": "LONG", "table": null, "column": null, "desc": "Sum of CPU megacycles"}, {"name": "runtime", "type": "DURATION", "table": null, "column": null, "desc": "Total runtime duration"}, {"name": "min_freq", "type": "LONG", "table": null, "column": null, "desc": "Minimum CPU frequency in kHz"}, {"name": "max_freq", "type": "LONG", "table": null, "column": null, "desc": "Maximum CPU frequency in kHz"}, {"name": "avg_freq", "type": "LONG", "table": null, "column": null, "desc": "Average CPU frequency in kHz"}]}], "macros": []}, {"module_name": "linux.devfreq", "data_objects": [{"name": "linux_devfreq_dsu_counter", "desc": "ARM DSU device frequency counters. This table will only be populated on\n traces collected with \"devfreq/devfreq_frequency\" ftrace event enabled,\n and from ARM devices with the DSU (DynamIQ Shared Unit) hardware.", "summary_desc": "ARM DSU device frequency counters", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "Unique identifier for this counter.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Starting timestamp of the counter.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration in which counter is constant and frequency doesn't chamge.", "table": null, "column": null}, {"name": "dsu_freq", "type": "LONG", "desc": "Frequency in kHz of the device that corresponds to the counter.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.irqs", "data_objects": [{"name": "linux_hard_irqs", "desc": "All hard IRQs of the trace represented as slices.", "summary_desc": "All hard IRQs of the trace represented as slices.", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Starting timestamp of this IRQ.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of this IRQ.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the IRQ.", "table": null, "column": null}, {"name": "id", "type": "JOINID(slice.id)", "desc": "The id of the IRQ.", "table": "slice", "column": "id"}, {"name": "parent_id", "type": "JOINID(slice.id)", "desc": "The id of this IRQ's parent IRQ (i.e. the IRQ that this IRQ preempted).", "table": "slice", "column": "id"}]}, {"name": "linux_soft_irqs", "desc": "All soft IRQs of the trace represented as slices.", "summary_desc": "All soft IRQs of the trace represented as slices.", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Starting timestamp of this IRQ.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of this IRQ.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the IRQ.", "table": null, "column": null}, {"name": "id", "type": "JOINID(slice.id)", "desc": "The id of the IRQ.", "table": "slice", "column": "id"}]}, {"name": "linux_irqs", "desc": "All IRQs, including hard and soft IRQs, of the trace represented as slices.", "summary_desc": "All IRQs, including hard and soft IRQs, of the trace represented as slices.", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Starting timestamp of this IRQ.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of this IRQ.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the IRQ.", "table": null, "column": null}, {"name": "id", "type": "JOINID(slice.id)", "desc": "The id of the IRQ.", "table": "slice", "column": "id"}, {"name": "parent_id", "type": "JOINID(slice.id)", "desc": "The id of this IRQ's parent IRQ (i.e. the IRQ that this IRQ preempted).", "table": "slice", "column": "id"}, {"name": "is_soft_irq", "type": "BOOL", "desc": "Flag indicating if IRQ is soft IRQ", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.memory.general", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.memory.high_watermark", "data_objects": [{"name": "memory_rss_high_watermark_per_process", "desc": "For each process fetches the memory high watermark until or during\n timestamp.", "summary_desc": "For each process fetches the memory high watermark until or during  timestamp.", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of the process", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Pid of the process", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Name of the process", "table": null, "column": null}, {"name": "rss_high_watermark", "type": "LONG", "desc": "Maximum `rss` value until now", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.memory.process", "data_objects": [{"name": "memory_rss_and_swap_per_process", "desc": "Memory metrics timeline for each process.", "summary_desc": "Memory metrics timeline for each process.", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of the process", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Pid of the process", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Name of the process", "table": null, "column": null}, {"name": "anon_rss", "type": "LONG", "desc": "Anon RSS counter value", "table": null, "column": null}, {"name": "file_rss", "type": "LONG", "desc": "File RSS counter value", "table": null, "column": null}, {"name": "shmem_rss", "type": "LONG", "desc": "Shared memory RSS counter value", "table": null, "column": null}, {"name": "rss", "type": "LONG", "desc": "Total RSS value. Sum of `anon_rss`, `file_rss` and `shmem_rss`. Returns value even if one of the values is NULL.", "table": null, "column": null}, {"name": "swap", "type": "LONG", "desc": "Swap counter value", "table": null, "column": null}, {"name": "anon_rss_and_swap", "type": "LONG", "desc": "Sum or `anon_rss` and `swap`. Returns value even if one of the values is NULL.", "table": null, "column": null}, {"name": "rss_and_swap", "type": "LONG", "desc": "Sum or `rss` and `swap`. Returns value even if one of the values is NULL.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.perf.etm", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.perf.samples", "data_objects": [{"name": "linux_perf_samples_summary_tree", "desc": "Table summarising the callstacks captured during all\n perf samples in the trace.\n\n Specifically, this table returns a tree containing all\n the callstacks seen during the trace with `self_count`\n equal to the number of samples with that frame as the\n leaf and `cumulative_count` equal to the number of\n samples with the frame anywhere in the tree.", "summary_desc": "Table summarising the callstacks captured during all  perf samples in the trace.   Specifically, this table returns a tree containing all  the callstacks seen during the trace with `self_count`  equal to the number of samples with that frame as the  leaf and `cumulative_count` equal to the number of  samples with the frame anywhere in the tree.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "The id of the callstack. A callstack in this context is a unique set of frames up to the root.", "table": null, "column": null}, {"name": "parent_id", "type": "LONG", "desc": "The id of the parent callstack for this callstack.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The function name of the frame for this callstack.", "table": null, "column": null}, {"name": "mapping_name", "type": "STRING", "desc": "The name of the mapping containing the frame. This can be a native binary, library, JAR or APK.", "table": null, "column": null}, {"name": "source_file", "type": "STRING", "desc": "The name of the file containing the function.", "table": null, "column": null}, {"name": "line_number", "type": "LONG", "desc": "The line number in the file the function is located at.", "table": null, "column": null}, {"name": "self_count", "type": "LONG", "desc": "The number of samples with this function as the leaf frame.", "table": null, "column": null}, {"name": "cumulative_count", "type": "LONG", "desc": "The number of samples with this function appearing anywhere on the callstack.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.perf.spe", "data_objects": [{"name": "linux_perf_spe_record", "desc": "Contains ARM Statistical Profiling Extension records", "summary_desc": "Contains ARM Statistical Profiling Extension records", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestap when the operation was sampled", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Thread the operation executed in", "table": "thread", "column": "id"}, {"name": "exception_level", "type": "STRING", "desc": "Exception level the instruction was executed in", "table": null, "column": null}, {"name": "instruction_frame_id", "type": "LONG", "desc": "Instruction virtual address", "table": null, "column": null}, {"name": "operation", "type": "STRING", "desc": "Type of operation sampled", "table": null, "column": null}, {"name": "data_virtual_address", "type": "LONG", "desc": "The virtual address accessed by the operation (0 if no memory access was performed)", "table": null, "column": null}, {"name": "data_physical_address", "type": "LONG", "desc": "The physical address accessed by the operation (0 if no memory access was performed)", "table": null, "column": null}, {"name": "total_latency", "type": "LONG", "desc": "Cycle count from the operation being dispatched for issue to the operation being complete.", "table": null, "column": null}, {"name": "issue_latency", "type": "LONG", "desc": "Cycle count from the operation being dispatched for issue to the operation being issued for execution.", "table": null, "column": null}, {"name": "translation_latency", "type": "LONG", "desc": "Cycle count from a virtual address being passed to the MMU for translation to the result of the translation being available.", "table": null, "column": null}, {"name": "data_source", "type": "STRING", "desc": "Where the data returned for a load operation was sourced", "table": null, "column": null}, {"name": "exception_gen", "type": "BOOL", "desc": "Operation generated an exception", "table": null, "column": null}, {"name": "retired", "type": "BOOL", "desc": "Operation architecturally retired", "table": null, "column": null}, {"name": "l1d_access", "type": "BOOL", "desc": "Operation caused a level 1 data cache access", "table": null, "column": null}, {"name": "l1d_refill", "type": "BOOL", "desc": "Operation caused a level 1 data cache refill", "table": null, "column": null}, {"name": "tlb_access", "type": "BOOL", "desc": "Operation caused a TLB access", "table": null, "column": null}, {"name": "tlb_refill", "type": "BOOL", "desc": "Operation caused a TLB refill involving at least one translation table walk", "table": null, "column": null}, {"name": "not_taken", "type": "BOOL", "desc": "Conditional instruction failed its condition code check", "table": null, "column": null}, {"name": "mispred", "type": "BOOL", "desc": "Whether a branch caused a correction to the predicted program flow", "table": null, "column": null}, {"name": "llc_access", "type": "BOOL", "desc": "Operation caused a last level data or unified cache access", "table": null, "column": null}, {"name": "llc_refill", "type": "BOOL", "desc": "Whether the operation could not be completed by the last level data cache (or any above)", "table": null, "column": null}, {"name": "remote_access", "type": "BOOL", "desc": "Operation caused an access to another socket in a multi-socket system", "table": null, "column": null}, {"name": "alignment", "type": "BOOL", "desc": "Operation that incurred additional latency due to the alignment of the address and the size of the data being accessed", "table": null, "column": null}, {"name": "tme_transaction", "type": "BOOL", "desc": "Whether the operation executed in transactional state", "table": null, "column": null}, {"name": "sve_partial_pred", "type": "BOOL", "desc": "SVE or SME operation with at least one false element in the governing predicate(s)", "table": null, "column": null}, {"name": "sve_empty_pred", "type": "BOOL", "desc": "SVE or SME operation with no true element in the governing predicate(s)", "table": null, "column": null}, {"name": "l2d_access", "type": "BOOL", "desc": "Whether a load operation caused a cache access to at least the level 2 data or unified cache", "table": null, "column": null}, {"name": "l2d_hit", "type": "BOOL", "desc": "Whether a load operation accessed and missed the level 2 data or unified cache. Not set for accesses that are satisfied from refilling data of a previous miss", "table": null, "column": null}, {"name": "cache_data_modified", "type": "BOOL", "desc": "Whether a load operation accessed modified data in a cache", "table": null, "column": null}, {"name": "recenty_fetched", "type": "BOOL", "desc": "Wheter a load operation hit a recently fetched line in a cache", "table": null, "column": null}, {"name": "data_snooped", "type": "BOOL", "desc": "Whether a load operation snooped data from a cache outside the cache hierarchy of this core", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "linux.threads", "data_objects": [{"name": "linux_kernel_threads", "desc": "All kernel threads of the trace. As kernel threads are processes, provides\n also process data.", "summary_desc": "All kernel threads of the trace", "type": "TABLE", "cols": [{"name": "upid", "type": "JOINID(process.id)", "desc": "Upid of kernel thread. Alias of |process.upid|.", "table": "process", "column": "id"}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Utid of kernel thread. Alias of |thread.utid|.", "table": "thread", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Pid of kernel thread. Alias of |process.pid|.", "table": null, "column": null}, {"name": "tid", "type": "LONG", "desc": "Tid of kernel thread. Alias of |process.pid|.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Name of kernel process. Alias of |process.name|.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Name of kernel thread. Alias of |thread.name|.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine id of kernel thread. If NULL then it's a single machine trace. Alias of |process.machine_id|.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "pixel", "modules": [{"module_name": "pixel.camera", "data_objects": [{"name": "pixel_camera_frames", "desc": "Break down camera Camera graph execution slices per node, port group, and frame.\n This table extracts key identifiers from Camera graph execution slice names and\n provides timing information for each processing stage.", "summary_desc": "Break down camera Camera graph execution slices per node, port group, and frame.  This table extracts key identifiers from Camera graph execution slice names and  provides timing information for each processing stage.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Unique identifier for this slice.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Start timestamp of the slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Duration of the slice execution.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Track ID for this slice.", "table": "track", "column": "id"}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Thread ID (utid) executing this slice.", "table": "thread", "column": "id"}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread executing this slice.", "table": null, "column": null}, {"name": "node", "type": "STRING", "desc": "Name of the processing node in the Camera graph.", "table": null, "column": null}, {"name": "port_group", "type": "STRING", "desc": "Port group name for the node.", "table": null, "column": null}, {"name": "frame_number", "type": "LONG", "desc": "Frame number being processed.", "table": null, "column": null}, {"name": "cam_id", "type": "LONG", "desc": "Camera ID associated with this slice.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "pkvm", "modules": [{"module_name": "pkvm.hypervisor", "data_objects": [{"name": "pkvm_hypervisor_events", "desc": "Events when CPU entered hypervisor.", "summary_desc": "Events when CPU entered hypervisor.", "type": "VIEW", "cols": [{"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Id of the corresponding slice in slices table.", "table": "slice", "column": "id"}, {"name": "cpu", "type": "LONG", "desc": "CPU that entered hypervisor.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when CPU entered hypervisor.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "How much time CPU spent in hypervisor.", "table": null, "column": null}, {"name": "reason", "type": "STRING", "desc": "Reason for entering hypervisor (e.g. host_hcall, host_mem_abort), or NULL if unknown.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "prelude", "modules": [{"module_name": "prelude.after_eof.casts", "data_objects": [], "functions": [], "table_functions": [], "macros": [{"name": "cast_int", "desc": "Casts |value| to INT.", "summary_desc": "Casts |value| to INT.", "return_desc": "", "return_type": "Expr", "args": [{"name": "value", "type": "Expr", "desc": "Query or subquery that will be cast.", "table": null, "column": null}]}, {"name": "cast_double", "desc": "Casts |value| to DOUBLE.", "summary_desc": "Casts |value| to DOUBLE.", "return_desc": "", "return_type": "Expr", "args": [{"name": "value", "type": "Expr", "desc": "Query or subquery that will be cast.", "table": null, "column": null}]}, {"name": "cast_string", "desc": "Casts |value| to STRING.", "summary_desc": "Casts |value| to STRING.", "return_desc": "", "return_type": "Expr", "args": [{"name": "value", "type": "Expr", "desc": "Query or subquery that will be cast.", "table": null, "column": null}]}]}, {"module_name": "prelude.after_eof.indexes", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "prelude.after_eof.slices", "data_objects": [], "functions": [{"name": "slice_is_ancestor", "desc": "Given two slice ids, returns whether the first is an ancestor of the second.", "summary_desc": "Given two slice ids, returns whether the first is an ancestor of the second.", "args": [{"name": "ancestor_id", "type": "LONG", "desc": "Id of the potential ancestor slice.", "table": null, "column": null}, {"name": "descendant_id", "type": "LONG", "desc": "Id of the potential descendant slice.", "table": null, "column": null}], "return_type": "BOOL", "return_desc": "Whether `ancestor_id` slice is an ancestor of `descendant_id`."}], "table_functions": [], "macros": []}, {"module_name": "prelude.after_eof.tables_views", "data_objects": [{"name": "trace_metrics", "desc": "Lists all metrics built-into trace processor.", "summary_desc": "Lists all metrics built-into trace processor.", "type": "VIEW", "cols": [{"name": "name", "type": "STRING", "desc": "The name of the metric.", "table": null, "column": null}]}, {"name": "trace_bounds", "desc": "Definition of `trace_bounds` table. The values are being filled by Trace\n Processor when parsing the trace.\n It is recommended to depend on the `trace_start()` and `trace_end()`\n functions rather than directly on `trace_bounds`.", "summary_desc": "Definition of `trace_bounds` table", "type": "VIEW", "cols": [{"name": "start_ts", "type": "TIMESTAMP", "desc": "First ts in the trace.", "table": null, "column": null}, {"name": "end_ts", "type": "TIMESTAMP", "desc": "End of the trace.", "table": null, "column": null}]}, {"name": "track", "desc": "Tracks are a fundamental concept in trace processor and represent a\n \"timeline\" for events of the same type and with the same context. See\n https://perfetto.dev/docs/analysis/trace-processor#tracks for a more\n detailed explanation, with examples.", "summary_desc": "Tracks are a fundamental concept in trace processor and represent a  \"timeline\" for events of the same type and with the same context", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this track. Identical to |track_id|, prefer using |track_id| instead.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Name of the track; can be null for some types of tracks (e.g. thread tracks).", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "dimension_arg_set_id", "type": "ARGSETID", "desc": "The dimensions of the track which uniquely identify the track within a given `type`.  Join with the `args` table or use the `EXTRACT_ARG` helper function to expand the args.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Generic key-value pairs containing extra information about the track.  Join with the `args` table or use the `EXTRACT_ARG` helper function to expand the args.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "track_group_id", "type": "LONG", "desc": "An opaque key indicating that this track belongs to a group of tracks which are \"conceptually\" the same track.  Tracks in trace processor don't allow overlapping events to allow for easy analysis (i.e. SQL window functions, SPAN JOIN and other similar operators). However, in visualization settings (e.g. the UI), the distinction doesn't matter and all tracks with the same `track_group_id` should be merged together into a single logical \"UI track\".", "table": null, "column": null}]}, {"name": "cpu", "desc": "Contains information about the CPUs on the device this trace was taken on.", "summary_desc": "Contains information about the CPUs on the device this trace was taken on.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this CPU. Identical to |ucpu|, prefer using |ucpu| instead.", "table": null, "column": null}, {"name": "ucpu", "type": "ID", "desc": "Unique identifier for this CPU. Isn't equal to |cpu| for remote machines and is equal to |cpu| for the host machine.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The 0-based CPU core identifier.", "table": null, "column": null}, {"name": "cluster_id", "type": "LONG", "desc": "The cluster id is shared by CPUs in the same cluster.", "table": null, "column": null}, {"name": "processor", "type": "STRING", "desc": "A string describing this core.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for CPUs on a remote machine.", "table": null, "column": null}, {"name": "capacity", "type": "LONG", "desc": "Capacity of a CPU of a device, a metric which indicates the relative performance of a CPU on a device For details see: https://www.kernel.org/doc/Documentation/devicetree/bindings/arm/cpu-capacity.txt", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Extra key/value pairs associated with this cpu.", "table": null, "column": null}]}, {"name": "cpu_available_frequencies", "desc": "Contains the frequency values that the CPUs on the device are capable of\n running at.", "summary_desc": "Contains the frequency values that the CPUs on the device are capable of  running at.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this cpu frequency.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU for this frequency, meaningful only in single machine traces. For multi-machine, join with the `cpu` table on `ucpu` to get the CPU identifier of each machine.", "table": null, "column": null}, {"name": "freq", "type": "LONG", "desc": "CPU frequency in KHz.", "table": null, "column": null}, {"name": "ucpu", "type": "LONG", "desc": "The CPU that the slice executed on (meaningful only in single machine traces). For multi-machine, join with the `cpu` table on `ucpu` to get the CPU identifier of each machine.", "table": null, "column": null}]}, {"name": "sched_slice", "desc": "This table holds slices with kernel thread scheduling information. These\n slices are collected when the Linux \"ftrace\" data source is used with the\n \"sched/switch\" and \"sched/wakeup*\" events enabled.\n\n The rows in this table will always have a matching row in the |thread_state|\n table with |thread_state.state| = 'Running'", "summary_desc": "This table holds slices with kernel thread scheduling information", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this scheduling slice.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp at the start of the slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the slice.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU that the slice executed on (meaningful only in single machine traces). For multi-machine, join with the `cpu` table on `ucpu` to get the CPU identifier of each machine.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "The thread's unique id in the trace.", "table": "thread", "column": "id"}, {"name": "end_state", "type": "STRING", "desc": "A string representing the scheduling state of the kernel thread at the end of the slice.  The individual characters in the string mean the following: R (runnable), S (awaiting a wakeup), D (in an uninterruptible sleep), T (suspended), t (being traced), X (exiting), P (parked), W (waking), I (idle), N (not contributing to the load average), K (wakeable on fatal signals) and Z (zombie, awaiting cleanup).", "table": null, "column": null}, {"name": "priority", "type": "LONG", "desc": "The kernel priority that the thread ran at.", "table": null, "column": null}, {"name": "ucpu", "type": "LONG", "desc": "The unique CPU identifier that the slice executed on.", "table": null, "column": null}]}, {"name": "sched", "desc": "Shorter alias for table `sched_slice`.", "summary_desc": "Shorter alias for table `sched_slice`.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Alias for `sched_slice.id`.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias for `sched_slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias for `sched_slice.dur`.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "Alias for `sched_slice.cpu`.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Alias for `sched_slice.utid`.", "table": "thread", "column": "id"}, {"name": "end_state", "type": "STRING", "desc": "Alias for `sched_slice.end_state`.", "table": null, "column": null}, {"name": "priority", "type": "LONG", "desc": "Alias for `sched_slice.priority`.", "table": null, "column": null}, {"name": "ucpu", "type": "LONG", "desc": "Alias for `sched_slice.ucpu`.", "table": null, "column": null}, {"name": "ts_end", "type": "LONG", "desc": "Legacy column, should no longer be used.", "table": null, "column": null}]}, {"name": "thread_state", "desc": "This table contains the scheduling state of every thread on the system during\n the trace.\n\n The rows in this table which have |state| = 'Running', will have a\n corresponding row in the |sched_slice| table.", "summary_desc": "This table contains the scheduling state of every thread on the system during  the trace.   The rows in this table which have |state| = 'Running', will have a  corresponding row in the |sched_slice| table.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this thread state.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp at the start of the slice.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the slice.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU that the thread executed on (meaningful only in single machine traces). For multi-machine, join with the `cpu` table on `ucpu` to get the CPU identifier of each machine.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "The thread's unique id in the trace.", "table": "thread", "column": "id"}, {"name": "state", "type": "STRING", "desc": "The scheduling state of the thread. Can be \"Running\" or any of the states described in |sched_slice.end_state|.", "table": null, "column": null}, {"name": "io_wait", "type": "LONG", "desc": "Indicates whether this thread was blocked on IO.", "table": null, "column": null}, {"name": "blocked_function", "type": "STRING", "desc": "The function in the kernel this thread was blocked on.", "table": null, "column": null}, {"name": "waker_utid", "type": "JOINID(thread.id)", "desc": "The unique thread id of the thread which caused a wakeup of this thread.", "table": "thread", "column": "id"}, {"name": "waker_id", "type": "JOINID(thread_state.id)", "desc": "The unique thread state id which caused a wakeup of this thread.", "table": "thread_state", "column": "id"}, {"name": "irq_context", "type": "LONG", "desc": "Whether the wakeup was from interrupt context or process context.", "table": null, "column": null}, {"name": "ucpu", "type": "LONG", "desc": "The unique CPU identifier that the thread executed on.", "table": null, "column": null}]}, {"name": "ftrace_event", "desc": "Contains all the ftrace events in the trace. This table exists only for\n debugging purposes and should not be relied on in production usecases (i.e.\n metrics, standard library etc). Note also that this table might be empty if\n raw ftrace parsing has been disabled.", "summary_desc": "Contains all the ftrace events in the trace", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this ftrace event.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp of this event.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The ftrace event name.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU this event was emitted on (meaningful only in single machine traces). For multi-machine, join with the `cpu` table on `ucpu` to get the CPU identifier of each machine.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "The thread this event was emitted on.", "table": "thread", "column": "id"}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "The set of key/value pairs associated with this event.", "table": null, "column": null}, {"name": "common_flags", "type": "LONG", "desc": "Ftrace event flags for this event. Currently only emitted for sched_waking events.", "table": null, "column": null}, {"name": "ucpu", "type": "LONG", "desc": "The unique CPU identifier that this event was emitted on.", "table": null, "column": null}]}, {"name": "raw", "desc": "This table is deprecated. Use `ftrace_event` instead which contains the same\n rows; this table is simply a (badly named) alias.", "summary_desc": "This table is deprecated", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this raw event.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp of this event.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the event. For ftrace events, this will be the ftrace event name.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU this event was emitted on (meaningful only in single machine traces). For multi-machine, join with the `cpu` table on `ucpu` to get the CPU identifier of each machine.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "The thread this event was emitted on.", "table": "thread", "column": "id"}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "The set of key/value pairs associated with this event.", "table": null, "column": null}, {"name": "common_flags", "type": "LONG", "desc": "Ftrace event flags for this event. Currently only emitted for sched_waking events.", "table": null, "column": null}, {"name": "ucpu", "type": "LONG", "desc": "The unique CPU identifier that this event was emitted on.", "table": null, "column": null}]}, {"name": "thread_track", "desc": "Tracks which are associated to a single thread.", "summary_desc": "Tracks which are associated to a single thread.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this thread track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "The utid that the track is associated with.", "table": "thread", "column": "id"}]}, {"name": "process_track", "desc": "Tracks which are associated to a single process.", "summary_desc": "Tracks which are associated to a single process.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this process track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "The upid that the track is associated with.", "table": "process", "column": "id"}]}, {"name": "cpu_track", "desc": "Tracks which are associated to a single CPU.", "summary_desc": "Tracks which are associated to a single CPU.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this cpu track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU that the track is associated with.", "table": null, "column": null}]}, {"name": "gpu_track", "desc": "Table containing tracks which are loosely tied to a GPU.\n\n NOTE: this table is deprecated due to inconsistency of it's design with\n other track tables (e.g. not having a GPU column, mixing a bunch of different\n tracks which are barely related). Please use the track table directly\n instead.", "summary_desc": "Table containing tracks which are loosely tied to a GPU.   NOTE: this table is deprecated due to inconsistency of it's design with  other track tables (e.g", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this cpu track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "dimension_arg_set_id", "type": "ARGSETID", "desc": "The dimensions of the track which uniquely identify the track within a given type.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "scope", "type": "STRING", "desc": "The source of the track. Deprecated.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "The description for the track.", "table": null, "column": null}, {"name": "context_id", "type": "LONG", "desc": "The context id for the GPU this track is associated to.", "table": null, "column": null}]}, {"name": "counter_track", "desc": "Tracks containing counter-like events.", "summary_desc": "Tracks containing counter-like events.", "type": "VIEW", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this cpu counter track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "dimension_arg_set_id", "type": "ARGSETID", "desc": "The dimensions of the track which uniquely identify the track within a given type.", "table": null, "column": null}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "unit", "type": "STRING", "desc": "The units of the counter. This column is rarely filled.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "The description for this track. For debugging purposes only.", "table": null, "column": null}]}, {"name": "cpu_counter_track", "desc": "Tracks containing counter-like events associated to a CPU.", "summary_desc": "Tracks containing counter-like events associated to a CPU.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this cpu counter track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "unit", "type": "STRING", "desc": "The units of the counter. This column is rarely filled.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "The description for this track. For debugging purposes only.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU that the track is associated with.", "table": null, "column": null}]}, {"name": "gpu_counter_track", "desc": "Tracks containing counter-like events associated to a GPU.", "summary_desc": "Tracks containing counter-like events associated to a GPU.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this gpu counter track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "unit", "type": "STRING", "desc": "The units of the counter. This column is rarely filled.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "The description for this track. For debugging purposes only.", "table": null, "column": null}, {"name": "gpu_id", "type": "LONG", "desc": "The GPU that the track is associated with.", "table": null, "column": null}]}, {"name": "process_counter_track", "desc": "Tracks containing counter-like events associated to a process.", "summary_desc": "Tracks containing counter-like events associated to a process.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this process counter track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "unit", "type": "STRING", "desc": "The units of the counter. This column is rarely filled.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "The description for this track. For debugging purposes only.", "table": null, "column": null}, {"name": "upid", "type": "LONG", "desc": "The upid of the process that the track is associated with.", "table": null, "column": null}]}, {"name": "thread_counter_track", "desc": "Tracks containing counter-like events associated to a thread.", "summary_desc": "Tracks containing counter-like events associated to a thread.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this thread counter track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "JOINID(track.id)", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": "track", "column": "id"}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "unit", "type": "STRING", "desc": "The units of the counter. This column is rarely filled.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "The description for this track. For debugging purposes only.", "table": null, "column": null}, {"name": "utid", "type": "LONG", "desc": "The utid of the thread that the track is associated with.", "table": null, "column": null}]}, {"name": "perf_counter_track", "desc": "Tracks containing counter-like events collected from Linux perf.", "summary_desc": "Tracks containing counter-like events collected from Linux perf.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(track.id)", "desc": "Unique identifier for this thread counter track.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the track.", "table": null, "column": null}, {"name": "type", "type": "STRING", "desc": "The type of a track indicates the type of data the track contains.  Every track is uniquely identified by the the combination of the type and a set of dimensions: type allow identifying a set of tracks with the same type of data within the whole universe of tracks while dimensions allow distinguishing between different tracks in that set.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(track.id)", "desc": "The track which is the \"parent\" of this track. Only non-null for tracks created using Perfetto's track_event API.", "table": "track", "column": "id"}, {"name": "source_arg_set_id", "type": "ARGSETID", "desc": "Args for this track which store information about \"source\" of this track in the trace. For example: whether this track orginated from atrace, Chrome tracepoints etc.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for tracks on a remote machine.", "table": null, "column": null}, {"name": "unit", "type": "STRING", "desc": "The units of the counter. This column is rarely filled.", "table": null, "column": null}, {"name": "description", "type": "STRING", "desc": "The description for this track. For debugging purposes only.", "table": null, "column": null}, {"name": "perf_session_id", "type": "LONG", "desc": "The id of the perf session this counter was captured on.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU the counter is associated with. Can be null if the counter is not associated with any CPU.", "table": null, "column": null}, {"name": "is_timebase", "type": "BOOL", "desc": "Whether this counter is the sampling timebase for the session.", "table": null, "column": null}]}, {"name": "counters", "desc": "Alias of the `counter` table.", "summary_desc": "Alias of the `counter` table.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Alias of `counter.id`.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias of `counter.ts`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias of `counter.track_id`.", "table": "track", "column": "id"}, {"name": "value", "type": "DOUBLE", "desc": "Alias of `counter.value`.", "table": null, "column": null}, {"name": "arg_set_id", "type": "LONG", "desc": "Alias of `counter.arg_set_id`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Legacy column, should no longer be used.", "table": null, "column": null}, {"name": "unit", "type": "STRING", "desc": "Legacy column, should no longer be used.", "table": null, "column": null}]}, {"name": "frame_slice", "desc": "Table containing graphics frame events on Android.", "summary_desc": "Table containing graphics frame events on Android.", "type": "VIEW", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Alias of `slice.id`.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias of `slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias of `slice.dur`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias of `slice.track_id`.", "table": "track", "column": "id"}, {"name": "category", "type": "STRING", "desc": "Alias of `slice.category`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Alias of `slice.name`.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Alias of `slice.depth`.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(frame_slice.id)", "desc": "Alias of `slice.parent_id`.", "table": "frame_slice", "column": "id"}, {"name": "arg_set_id", "type": "LONG", "desc": "Alias of `slice.arg_set_id`.", "table": null, "column": null}, {"name": "layer_name", "type": "STRING", "desc": "Name of the graphics layer this slice happened on.", "table": null, "column": null}, {"name": "frame_number", "type": "LONG", "desc": "The frame number this slice is associated with.", "table": null, "column": null}, {"name": "queue_to_acquire_time", "type": "LONG", "desc": "The time between queue and acquire for this buffer and layer.", "table": null, "column": null}, {"name": "acquire_to_latch_time", "type": "LONG", "desc": "The time between acquire and latch for this buffer and layer.", "table": null, "column": null}, {"name": "latch_to_present_time", "type": "LONG", "desc": "The time between latch and present for this buffer and layer.", "table": null, "column": null}]}, {"name": "gpu_slice", "desc": "Table containing graphics frame events on Android.", "summary_desc": "Table containing graphics frame events on Android.", "type": "VIEW", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Alias of `slice.id`.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias of `slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias of `slice.dur`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias of `slice.track_id`.", "table": "track", "column": "id"}, {"name": "category", "type": "STRING", "desc": "Alias of `slice.category`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Alias of `slice.name`.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Alias of `slice.depth`.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(frame_slice.id)", "desc": "Alias of `slice.parent_id`.", "table": "frame_slice", "column": "id"}, {"name": "arg_set_id", "type": "LONG", "desc": "Alias of `slice.arg_set_id`.", "table": null, "column": null}, {"name": "context_id", "type": "LONG", "desc": "Context ID.", "table": null, "column": null}, {"name": "render_target", "type": "LONG", "desc": "Render target ID.", "table": null, "column": null}, {"name": "render_target_name", "type": "STRING", "desc": "The name of the render target.", "table": null, "column": null}, {"name": "render_pass", "type": "LONG", "desc": "Render pass ID.", "table": null, "column": null}, {"name": "render_pass_name", "type": "STRING", "desc": "The name of the render pass.", "table": null, "column": null}, {"name": "command_buffer", "type": "LONG", "desc": "The command buffer ID.", "table": null, "column": null}, {"name": "command_buffer_name", "type": "STRING", "desc": "The name of the command buffer.", "table": null, "column": null}, {"name": "frame_id", "type": "LONG", "desc": "Frame id.", "table": null, "column": null}, {"name": "submission_id", "type": "LONG", "desc": "The submission id.", "table": null, "column": null}, {"name": "hw_queue_id", "type": "LONG", "desc": "The hardware queue id.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "The id of the process.", "table": "process", "column": "id"}, {"name": "render_subpasses", "type": "STRING", "desc": "Render subpasses.", "table": null, "column": null}]}, {"name": "expected_frame_timeline_slice", "desc": "This table contains information on the expected timeline of either a display\n frame or a surface frame.", "summary_desc": "This table contains information on the expected timeline of either a display  frame or a surface frame.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Alias of `slice.id`.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias of `slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias of `slice.dur`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias of `slice.track_id`.", "table": "track", "column": "id"}, {"name": "category", "type": "STRING", "desc": "Alias of `slice.category`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Alias of `slice.name`.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Alias of `slice.depth`.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(frame_slice.id)", "desc": "Alias of `slice.parent_id`.", "table": "frame_slice", "column": "id"}, {"name": "arg_set_id", "type": "LONG", "desc": "Alias of `slice.arg_set_id`.", "table": null, "column": null}, {"name": "display_frame_token", "type": "LONG", "desc": "Display frame token (vsync id).", "table": null, "column": null}, {"name": "surface_frame_token", "type": "LONG", "desc": "Surface frame token (vsync id), null if this is a display frame.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Unique process id of the app that generates the surface frame.", "table": "process", "column": "id"}, {"name": "layer_name", "type": "STRING", "desc": "Layer name if this is a surface frame.", "table": null, "column": null}]}, {"name": "actual_frame_timeline_slice", "desc": "This table contains information on the actual timeline and additional\n analysis related to the performance of either a display frame or a surface\n frame.", "summary_desc": "This table contains information on the actual timeline and additional  analysis related to the performance of either a display frame or a surface  frame.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Alias of `slice.id`.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias of `slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias of `slice.dur`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias of `slice.track_id`.", "table": "track", "column": "id"}, {"name": "category", "type": "STRING", "desc": "Alias of `slice.category`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Alias of `slice.name`.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Alias of `slice.depth`.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(frame_slice.id)", "desc": "Alias of `slice.parent_id`.", "table": "frame_slice", "column": "id"}, {"name": "arg_set_id", "type": "LONG", "desc": "Alias of `slice.arg_set_id`.", "table": null, "column": null}, {"name": "display_frame_token", "type": "LONG", "desc": "Display frame token (vsync id).", "table": null, "column": null}, {"name": "surface_frame_token", "type": "LONG", "desc": "Surface frame token (vsync id), null if this is a display frame.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Unique process id of the app that generates the surface frame.", "table": "process", "column": "id"}, {"name": "layer_name", "type": "STRING", "desc": "Layer name if this is a surface frame.", "table": null, "column": null}, {"name": "present_type", "type": "STRING", "desc": "Frame's present type (eg. on time / early / late).", "table": null, "column": null}, {"name": "on_time_finish", "type": "LONG", "desc": "Whether the frame finishes on time.", "table": null, "column": null}, {"name": "gpu_composition", "type": "LONG", "desc": "Whether the frame used gpu composition.", "table": null, "column": null}, {"name": "jank_type", "type": "STRING", "desc": "Specify the jank types for this frame if there's jank, or none if no jank occurred.", "table": null, "column": null}, {"name": "jank_severity_type", "type": "STRING", "desc": "Severity of the jank: none if no jank.", "table": null, "column": null}, {"name": "prediction_type", "type": "STRING", "desc": "Frame's prediction type (eg. valid / expired).", "table": null, "column": null}, {"name": "jank_tag", "type": "STRING", "desc": "Jank tag based on jank type, used for slice visualization.", "table": null, "column": null}]}, {"name": "heap_graph_class", "desc": "Stores class information within ART heap graphs. It represents Java/Kotlin\n classes that exist in the heap, including their names, inheritance\n relationships, and loading context.", "summary_desc": "Stores class information within ART heap graphs", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this heap graph class.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "(potentially obfuscated) name of the class.", "table": null, "column": null}, {"name": "deobfuscated_name", "type": "STRING", "desc": "If class name was obfuscated and deobfuscation map for it provided, the deobfuscated name.", "table": null, "column": null}, {"name": "location", "type": "STRING", "desc": "the APK / Dex / JAR file the class is contained in.", "table": null, "column": null}, {"name": "superclass_id", "type": "JOINID(heap_graph_class.id)", "desc": "The superclass of this class.", "table": "heap_graph_class", "column": "id"}, {"name": "classloader_id", "type": "LONG", "desc": "The classloader that loaded this class.", "table": null, "column": null}, {"name": "kind", "type": "STRING", "desc": "The kind of class.", "table": null, "column": null}]}, {"name": "heap_graph_object", "desc": "The objects on the Dalvik heap.\n\n All rows with the same (upid, graph_sample_ts) are one dump.", "summary_desc": "The objects on the Dalvik heap.   All rows with the same (upid, graph_sample_ts) are one dump.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this heap graph object.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Unique PID of the target.", "table": "process", "column": "id"}, {"name": "graph_sample_ts", "type": "TIMESTAMP", "desc": "Timestamp this dump was taken at.", "table": null, "column": null}, {"name": "self_size", "type": "LONG", "desc": "Size this object uses on the Java Heap.", "table": null, "column": null}, {"name": "native_size", "type": "LONG", "desc": "Approximate amount of native memory used by this object, as reported by libcore.util.NativeAllocationRegistry.size.", "table": null, "column": null}, {"name": "reference_set_id", "type": "JOINID(heap_graph_reference.reference_set_id)", "desc": "Join key with heap_graph_reference containing all objects referred in this object's fields.", "table": "heap_graph_reference", "column": "reference_set_id"}, {"name": "reachable", "type": "BOOL", "desc": "Bool whether this object is reachable from a GC root. If false, this object is uncollected garbage.", "table": null, "column": null}, {"name": "heap_type", "type": "STRING", "desc": "The type of ART heap this object is stored on (app, zygote, boot image)", "table": null, "column": null}, {"name": "type_id", "type": "JOINID(heap_graph_class.id)", "desc": "Class this object is an instance of.", "table": "heap_graph_class", "column": "id"}, {"name": "root_type", "type": "STRING", "desc": "If not NULL, this object is a GC root.", "table": null, "column": null}, {"name": "root_distance", "type": "LONG", "desc": "Distance from the root object.", "table": null, "column": null}]}, {"name": "heap_graph_reference", "desc": "Many-to-many mapping between heap_graph_object.\n\n This associates the object with given reference_set_id with the objects\n that are referred to by its fields.", "summary_desc": "Many-to-many mapping between heap_graph_object.   This associates the object with given reference_set_id with the objects  that are referred to by its fields.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this heap graph reference.", "table": null, "column": null}, {"name": "reference_set_id", "type": "JOINID(heap_graph_object.reference_set_id)", "desc": "Join key to heap_graph_object reference_set_id.", "table": "heap_graph_object", "column": "reference_set_id"}, {"name": "owner_id", "type": "JOINID(heap_graph_object.id)", "desc": "Id of object that has this reference_set_id.", "table": "heap_graph_object", "column": "id"}, {"name": "owned_id", "type": "JOINID(heap_graph_object.id)", "desc": "Id of object that is referred to.", "table": "heap_graph_object", "column": "id"}, {"name": "field_name", "type": "STRING", "desc": "The field that refers to the object. E.g. Foo.name.", "table": null, "column": null}, {"name": "field_type_name", "type": "STRING", "desc": "The static type of the field. E.g. java.lang.String.", "table": null, "column": null}, {"name": "deobfuscated_field_name", "type": "STRING", "desc": "The deobfuscated name, if field_name was obfuscated and a deobfuscation mapping was provided for it.", "table": null, "column": null}]}, {"name": "memory_snapshot", "desc": "Table with memory snapshots.", "summary_desc": "Table with memory snapshots.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this snapshot.", "table": null, "column": null}, {"name": "timestamp", "type": "TIMESTAMP", "desc": "Time of the snapshot.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Track of this snapshot.", "table": "track", "column": "id"}, {"name": "detail_level", "type": "STRING", "desc": "Detail level of this snapshot.", "table": null, "column": null}]}, {"name": "process_memory_snapshot", "desc": "Table with process memory snapshots.", "summary_desc": "Table with process memory snapshots.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this snapshot.", "table": null, "column": null}, {"name": "snapshot_id", "type": "JOINID(memory_snapshot.id)", "desc": "Snapshot ID for this snapshot.", "table": "memory_snapshot", "column": "id"}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Process for this snapshot.", "table": "process", "column": "id"}]}, {"name": "memory_snapshot_node", "desc": "Table with memory snapshot nodes.", "summary_desc": "Table with memory snapshot nodes.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this node.", "table": null, "column": null}, {"name": "process_snapshot_id", "type": "JOINID(process_memory_snapshot.id)", "desc": "Process snapshot ID for to this node.", "table": "process_memory_snapshot", "column": "id"}, {"name": "parent_node_id", "type": "JOINID(memory_snapshot_node.id)", "desc": "Parent node for this node, optional.", "table": "memory_snapshot_node", "column": "id"}, {"name": "path", "type": "STRING", "desc": "Path for this node.", "table": null, "column": null}, {"name": "size", "type": "LONG", "desc": "Size of the memory allocated to this node.", "table": null, "column": null}, {"name": "effective_size", "type": "LONG", "desc": "Effective size used by this node.", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Additional args of the node.", "table": null, "column": null}]}, {"name": "memory_snapshot_edge", "desc": "Table with memory snapshot edge", "summary_desc": "Table with memory snapshot edge", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique identifier for this edge.", "table": null, "column": null}, {"name": "source_node_id", "type": "JOINID(memory_snapshot_node.id)", "desc": "Source node for this edge.", "table": "memory_snapshot_node", "column": "id"}, {"name": "target_node_id", "type": "JOINID(memory_snapshot_node.id)", "desc": "Target node for this edge.", "table": "memory_snapshot_node", "column": "id"}, {"name": "importance", "type": "LONG", "desc": "Importance for this edge.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "prelude.after_eof.views", "data_objects": [{"name": "counter", "desc": "Counters are values put into tracks during parsing of the trace.", "summary_desc": "Counters are values put into tracks during parsing of the trace.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Unique id of a counter value", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Time of fetching the counter value.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Track this counter value belongs to.", "table": "track", "column": "id"}, {"name": "value", "type": "DOUBLE", "desc": "Value.", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Additional information about the counter value.", "table": null, "column": null}]}, {"name": "slice", "desc": "Contains slices from userspace which explains what threads were doing\n during the trace.", "summary_desc": "Contains slices from userspace which explains what threads were doing  during the trace.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "The id of the slice.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp at the start of the slice in nanoseconds. The actual value depends on the `primary_trace_clock` selected in TraceConfig. This is often the value of a monotonic counter since device boot so is only meaningful in the context of a trace.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the slice in nanoseconds.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "The id of the track this slice is located on.", "table": "track", "column": "id"}, {"name": "category", "type": "STRING", "desc": "The \"category\" of the slice. If this slice originated with track_event, this column contains the category emitted. Otherwise, it is likely to be null (with limited exceptions).", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the slice. The name describes what was happening during the slice.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "The depth of the slice in the current stack of slices.", "table": null, "column": null}, {"name": "stack_id", "type": "LONG", "desc": "A unique identifier obtained from the names of all slices in this stack. This is rarely useful and kept around only for legacy reasons.", "table": null, "column": null}, {"name": "parent_stack_id", "type": "LONG", "desc": "The stack_id for the parent of this slice. Rarely useful.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(slice.id)", "desc": "The id of the parent (i.e. immediate ancestor) slice for this slice.", "table": "slice", "column": "id"}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "The id of the argument set associated with this slice.", "table": null, "column": null}, {"name": "thread_ts", "type": "TIMESTAMP", "desc": "The thread timestamp at the start of the slice. This column\u00a0will only be populated if thread timestamp collection is enabled with track_event.", "table": null, "column": null}, {"name": "thread_dur", "type": "DURATION", "desc": "The thread time used by this slice. This column will only be populated if thread timestamp collection is enabled with track_event.", "table": null, "column": null}, {"name": "thread_instruction_count", "type": "LONG", "desc": "The value of the CPU instruction counter at the start of the slice. This column will only be populated if thread instruction collection is enabled with track_event.", "table": null, "column": null}, {"name": "thread_instruction_delta", "type": "LONG", "desc": "The change in value of the CPU instruction counter between the start and end of the slice. This column will only be populated if thread instruction collection is enabled with track_event.", "table": null, "column": null}, {"name": "cat", "type": "STRING", "desc": "Alias of `category`.", "table": null, "column": null}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Alias of `id`.", "table": "slice", "column": "id"}]}, {"name": "instant", "desc": "Contains instant events from userspace which indicates what happened at a\n single moment in time.", "summary_desc": "Contains instant events from userspace which indicates what happened at a  single moment in time.", "type": "VIEW", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp of the instant.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "The id of the track this instant is located on.", "table": "track", "column": "id"}, {"name": "name", "type": "STRING", "desc": "The name of the instant. The name describes what happened during the instant.", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "The id of the argument set associated with this instant.", "table": null, "column": null}]}, {"name": "slices", "desc": "Alternative alias of table `slice`.", "summary_desc": "Alternative alias of table `slice`.", "type": "VIEW", "cols": [{"name": "id", "type": "JOINID(slice.id)", "desc": "Alias of `slice.id`.", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias of `slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias of `slice.dur`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias of `slice.track_id`.", "table": "track", "column": "id"}, {"name": "category", "type": "STRING", "desc": "Alias of `slice.category`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Alias of `slice.name`.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Alias of `slice.depth`.", "table": null, "column": null}, {"name": "stack_id", "type": "LONG", "desc": "Alias of `slice.stack_id`.", "table": null, "column": null}, {"name": "parent_stack_id", "type": "LONG", "desc": "Alias of `slice.parent_stack_id`.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(slice.id)", "desc": "Alias of `slice.parent_id`.", "table": "slice", "column": "id"}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Alias of `slice.arg_set_id`.", "table": null, "column": null}, {"name": "thread_ts", "type": "TIMESTAMP", "desc": "Alias of `slice.thread_ts`.", "table": null, "column": null}, {"name": "thread_dur", "type": "DURATION", "desc": "Alias of `slice.thread_dur`.", "table": null, "column": null}, {"name": "thread_instruction_count", "type": "LONG", "desc": "Alias of `slice.thread_instruction_count`.", "table": null, "column": null}, {"name": "thread_instruction_delta", "type": "LONG", "desc": "Alias of `slice.thread_instruction_delta`.", "table": null, "column": null}, {"name": "cat", "type": "STRING", "desc": "Alias of `slice.cat`.", "table": null, "column": null}, {"name": "slice_id", "type": "JOINID(slice.id)", "desc": "Alias of `slice.slice_id`.", "table": "slice", "column": "id"}]}, {"name": "thread", "desc": "Contains information of threads seen during the trace.", "summary_desc": "Contains information of threads seen during the trace.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "The id of the thread. Prefer using `utid` instead.", "table": null, "column": null}, {"name": "utid", "type": "ID", "desc": "Unique thread id. This is != the OS tid. This is a monotonic number associated to each thread. The OS thread id (tid) cannot be used as primary key because tids and pids are recycled by most kernels.", "table": null, "column": null}, {"name": "tid", "type": "LONG", "desc": "The OS id for this thread. Note: this is *not* unique over the lifetime of the trace so cannot be used as a primary key. Use |utid| instead.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the thread. Can be populated from many sources (e.g. ftrace, /proc scraping, track event etc).", "table": null, "column": null}, {"name": "start_ts", "type": "TIMESTAMP", "desc": "The start timestamp of this thread (if known). Is null in most cases unless a thread creation event is enabled (e.g. task_newtask ftrace event on Linux/Android).", "table": null, "column": null}, {"name": "end_ts", "type": "TIMESTAMP", "desc": "The end timestamp of this thread (if known). Is null in most cases unless a thread destruction event is enabled (e.g. sched_process_free ftrace event on Linux/Android).", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "The process hosting this thread.", "table": "process", "column": "id"}, {"name": "is_main_thread", "type": "BOOL", "desc": "Boolean indicating if this thread is the main thread in the process.", "table": null, "column": null}, {"name": "is_idle", "type": "BOOL", "desc": "Boolean indicating if this thread is a kernel idle thread.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for threads on a remote machine.", "table": null, "column": null}]}, {"name": "process", "desc": "Contains information of processes seen during the trace.", "summary_desc": "Contains information of processes seen during the trace.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "The id of the process. Prefer using `upid` instead.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Unique process id. This is != the OS pid. This is a monotonic number associated to each process. The OS process id (pid) cannot be used as primary key because tids and pids are recycled by most kernels.", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "The OS id for this process. Note: this is *not* unique over the lifetime of the trace so cannot be used as a primary key. Use |upid| instead.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The name of the process. Can be populated from many sources (e.g. ftrace, /proc scraping, track event etc).", "table": null, "column": null}, {"name": "start_ts", "type": "TIMESTAMP", "desc": "The start timestamp of this process (if known). Is null in most cases unless a process creation event is enabled (e.g. task_newtask ftrace event on Linux/Android).", "table": null, "column": null}, {"name": "end_ts", "type": "TIMESTAMP", "desc": "The end timestamp of this process (if known). Is null in most cases unless a process destruction event is enabled (e.g. sched_process_free ftrace event on Linux/Android).", "table": null, "column": null}, {"name": "parent_upid", "type": "JOINID(process.id)", "desc": "The upid of the process which caused this process to be spawned.", "table": "process", "column": "id"}, {"name": "uid", "type": "LONG", "desc": "The Unix user id of the process.", "table": null, "column": null}, {"name": "android_appid", "type": "LONG", "desc": "Android appid of this process.", "table": null, "column": null}, {"name": "android_user_id", "type": "LONG", "desc": "Android user id of this process.", "table": null, "column": null}, {"name": "cmdline", "type": "STRING", "desc": "/proc/cmdline for this process.", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Extra args for this process.", "table": null, "column": null}, {"name": "machine_id", "type": "LONG", "desc": "Machine identifier, non-null for processes on a remote machine.", "table": null, "column": null}]}, {"name": "args", "desc": "Arbitrary key-value pairs which allow adding metadata to other, strongly\n typed tables.\n Note: for a given row, only one of |int_value|, |string_value|, |real_value|\n will be non-null.", "summary_desc": "Arbitrary key-value pairs which allow adding metadata to other, strongly  typed tables.  Note: for a given row, only one of |int_value|, |string_value|, |real_value|  will be non-null.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "The id of the arg.", "table": null, "column": null}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "The id for a single set of arguments.", "table": null, "column": null}, {"name": "flat_key", "type": "STRING", "desc": "The \"flat key\" of the arg: this is the key without any array indexes.", "table": null, "column": null}, {"name": "key", "type": "STRING", "desc": "The key for the arg.", "table": null, "column": null}, {"name": "int_value", "type": "LONG", "desc": "The integer value of the arg.", "table": null, "column": null}, {"name": "string_value", "type": "STRING", "desc": "The string value of the arg.", "table": null, "column": null}, {"name": "real_value", "type": "DOUBLE", "desc": "The double value of the arg.", "table": null, "column": null}, {"name": "value_type", "type": "STRING", "desc": "The type of the value of the arg. Will be one of 'int', 'uint', 'string', 'real', 'pointer', 'bool' or 'json'.", "table": null, "column": null}, {"name": "display_value", "type": "STRING", "desc": "The human-readable formatted value of the arg.", "table": null, "column": null}]}, {"name": "perf_session", "desc": "Contains the Linux perf sessions in the trace.", "summary_desc": "Contains the Linux perf sessions in the trace.", "type": "VIEW", "cols": [{"name": "id", "type": "LONG", "desc": "The id of the perf session. Prefer using `perf_session_id` instead.", "table": null, "column": null}, {"name": "perf_session_id", "type": "LONG", "desc": "The id of the perf session.", "table": null, "column": null}, {"name": "cmdline", "type": "STRING", "desc": "Command line used to collect the data.", "table": null, "column": null}]}, {"name": "android_logs", "desc": "Log entries from Android logcat.\n\n NOTE: this table is not sorted by timestamp.", "summary_desc": "Log entries from Android logcat.   NOTE: this table is not sorted by timestamp.", "type": "VIEW", "cols": [{"name": "id", "type": "ID", "desc": "Which row in the table the log corresponds to.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp of log entry.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Thread writing the log entry.", "table": "thread", "column": "id"}, {"name": "prio", "type": "LONG", "desc": "Priority of the log. 3=DEBUG, 4=INFO, 5=WARN, 6=ERROR.", "table": null, "column": null}, {"name": "tag", "type": "STRING", "desc": "Tag of the log entry.", "table": null, "column": null}, {"name": "msg", "type": "STRING", "desc": "Content of the log entry", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "prelude.before_eof.tables", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "prelude.before_eof.trace_bounds", "data_objects": [], "functions": [{"name": "trace_start", "desc": "Fetch start of the trace.", "summary_desc": "Fetch start of the trace.", "args": [], "return_type": "TIMESTAMP", "return_desc": "Start of the trace."}, {"name": "trace_end", "desc": "Fetch end of the trace.", "summary_desc": "Fetch end of the trace.", "args": [], "return_type": "TIMESTAMP", "return_desc": "End of the trace."}, {"name": "trace_dur", "desc": "Fetch duration of the trace.", "summary_desc": "Fetch duration of the trace.", "args": [], "return_type": "DURATION", "return_desc": "Duration of the trace."}], "table_functions": [], "macros": []}]}, {"name": "proto_path", "modules": [{"module_name": "proto_path.proto_path", "data_objects": [], "functions": [], "table_functions": [], "macros": []}]}, {"name": "sched", "modules": [{"module_name": "sched.latency", "data_objects": [{"name": "sched_latency_for_running_interval", "desc": "Scheduling latency of running thread states.\n For each time the thread was running, returns the duration of the runnable\n state directly before.", "summary_desc": "Scheduling latency of running thread states.  For each time the thread was running, returns the duration of the runnable  state directly before.", "type": "TABLE", "cols": [{"name": "thread_state_id", "type": "JOINID(thread_state.id)", "desc": "Running state of the thread.", "table": "thread_state", "column": "id"}, {"name": "sched_id", "type": "JOINID(sched.id)", "desc": "Id of a corresponding slice in a `sched` table.", "table": "sched", "column": "id"}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Thread with running state.", "table": "thread", "column": "id"}, {"name": "runnable_latency_id", "type": "JOINID(thread_state.id)", "desc": "Runnable state before thread is \"running\". Duration of this thread state is `latency_dur`. One of `thread_state.id`.", "table": "thread_state", "column": "id"}, {"name": "latency_dur", "type": "LONG", "desc": "Scheduling latency of thread state. Duration of thread state with `runnable_latency_id`.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "sched.runnable", "data_objects": [{"name": "sched_previous_runnable_on_thread", "desc": "Previous runnable slice on the same thread.\n For each \"Running\" thread state finds:\n - previous \"Runnable\" (or runnable preempted) state.\n - previous uninterrupted \"Runnable\" state with a valid waker thread.", "summary_desc": "Previous runnable slice on the same thread.  For each \"Running\" thread state finds:  - previous \"Runnable\" (or runnable preempted) state.  - previous uninterrupted \"Runnable\" state with a valid waker thread.", "type": "TABLE", "cols": [{"name": "id", "type": "JOINID(thread_state.id)", "desc": "Running thread state", "table": "thread_state", "column": "id"}, {"name": "prev_runnable_id", "type": "JOINID(thread_state.id)", "desc": "Previous runnable thread state.", "table": "thread_state", "column": "id"}, {"name": "prev_wakeup_runnable_id", "type": "JOINID(thread_state.id)", "desc": "Previous runnable thread state with valid waker thread.", "table": "thread_state", "column": "id"}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "sched.states", "data_objects": [], "functions": [{"name": "sched_state_to_human_readable_string", "desc": "Translates a single-letter scheduling state to a human-readable string.", "summary_desc": "Translates a single-letter scheduling state to a human-readable string.", "args": [{"name": "short_name", "type": "STRING", "desc": "An individual character string representing the scheduling state of the kernel thread at the end of the slice.", "table": null, "column": null}], "return_type": "STRING", "return_desc": "Humanly readable string representing the scheduling state of the kernel thread. The individual characters in the string mean the following: R (runnable), S (awaiting a wakeup), D (in an uninterruptible sleep), T (suspended), t (being traced), X (exiting), P (parked), W (waking), I (idle), N (not contributing to the load average), K (wakeable on fatal signals) and Z (zombie, awaiting cleanup)."}, {"name": "sched_state_io_to_human_readable_string", "desc": "Translates a single-letter scheduling state and IO wait information to\n a human-readable string.", "summary_desc": "Translates a single-letter scheduling state and IO wait information to  a human-readable string.", "args": [{"name": "sched_state", "type": "STRING", "desc": "An individual character string representing the scheduling state of the kernel thread at the end of the slice.", "table": null, "column": null}, {"name": "io_wait", "type": "BOOL", "desc": "A (posssibly NULL) boolean indicating, if the device was in uninterruptible sleep, if it was an IO sleep.", "table": null, "column": null}], "return_type": "STRING", "return_desc": "A human readable string with information about the scheduling state and IO wait."}], "table_functions": [], "macros": []}, {"module_name": "sched.thread_executing_span", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "sched.thread_executing_span_with_slice", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "sched.thread_level_parallelism", "data_objects": [{"name": "sched_runnable_thread_count", "desc": "The count of runnable threads over time.", "summary_desc": "The count of runnable threads over time.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when the runnable thread count changed to the current value.", "table": null, "column": null}, {"name": "runnable_thread_count", "type": "LONG", "desc": "Number of runnable threads, covering the range from this timestamp to the next row's timestamp.", "table": null, "column": null}]}, {"name": "sched_uninterruptible_sleep_thread_count", "desc": "The count of threads in uninterruptible sleep over time.", "summary_desc": "The count of threads in uninterruptible sleep over time.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when the thread count changed to the current value.", "table": null, "column": null}, {"name": "uninterruptible_sleep_thread_count", "type": "LONG", "desc": "Number of threads in uninterrutible sleep, covering the range from this timestamp to the next row's timestamp.", "table": null, "column": null}]}, {"name": "sched_active_cpu_count", "desc": "The count of active CPUs over time.", "summary_desc": "The count of active CPUs over time.", "type": "TABLE", "cols": [{"name": "ts", "type": "TIMESTAMP", "desc": "Timestamp when the number of active CPU changed.", "table": null, "column": null}, {"name": "active_cpu_count", "type": "LONG", "desc": "Number of active CPUs, covering the range from this timestamp to the next row's timestamp.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "sched.thread_state_flattened", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "sched.time_in_state", "data_objects": [{"name": "sched_time_in_state_for_thread", "desc": "The time a thread spent in each scheduling state during it's lifetime.", "summary_desc": "The time a thread spent in each scheduling state during it's lifetime.", "type": "TABLE", "cols": [{"name": "utid", "type": "JOINID(thread.id)", "desc": "Utid of the thread.", "table": "thread", "column": "id"}, {"name": "total_runtime", "type": "LONG", "desc": "Total runtime of thread.", "table": null, "column": null}, {"name": "state", "type": "STRING", "desc": "One of the scheduling states of kernel thread.", "table": null, "column": null}, {"name": "time_in_state", "type": "LONG", "desc": "Total time spent in the scheduling state.", "table": null, "column": null}, {"name": "percentage_in_state", "type": "LONG", "desc": "Percentage of time thread spent in scheduling state in [0-100] range.", "table": null, "column": null}]}, {"name": "sched_percentage_of_time_in_state", "desc": "Summary of time spent by thread in each scheduling state, in percentage ([0, 100]\n ranges). Sum of all states might be smaller than 100, as those values\n are rounded down.", "summary_desc": "Summary of time spent by thread in each scheduling state, in percentage ([0, 100]  ranges)", "type": "TABLE", "cols": [{"name": "utid", "type": "JOINID(thread.id)", "desc": "Utid of the thread.", "table": "thread", "column": "id"}, {"name": "running", "type": "LONG", "desc": "Percentage of time thread spent in running ('Running') state in [0, 100] range.", "table": null, "column": null}, {"name": "runnable", "type": "LONG", "desc": "Percentage of time thread spent in runnable ('R') state in [0, 100] range.", "table": null, "column": null}, {"name": "runnable_preempted", "type": "LONG", "desc": "Percentage of time thread spent in preempted runnable ('R+') state in [0, 100] range.", "table": null, "column": null}, {"name": "sleeping", "type": "LONG", "desc": "Percentage of time thread spent in sleeping ('S') state in [0, 100] range.", "table": null, "column": null}, {"name": "uninterruptible_sleep", "type": "LONG", "desc": "Percentage of time thread spent in uninterruptible sleep ('D') state in [0, 100] range.", "table": null, "column": null}, {"name": "other", "type": "LONG", "desc": "Percentage of time thread spent in other ('T', 't', 'X', 'Z', 'x', 'I', 'K', 'W', 'P', 'N') states in [0, 100] range.", "table": null, "column": null}]}], "functions": [], "table_functions": [{"name": "sched_time_in_state_for_thread_in_interval", "desc": "Time the thread spent each state in a given interval.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.\n\n Specifically for any non-trivial subset of thread slices, prefer using\n `thread_slice_time_in_state` in the `slices.time_in_state` module for this\n purpose instead.", "summary_desc": "Time the thread spent each state in a given interval.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "The start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the interval.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "The utid of the thread.", "table": "thread", "column": "id"}], "cols": [{"name": "state", "type": "STRING", "table": null, "column": null, "desc": "The scheduling state (from the `thread_state` table).  Use the `sched_state_to_human_readable_string` function in the `sched` package to get full name."}, {"name": "io_wait", "type": "BOOL", "table": null, "column": null, "desc": "A (posssibly NULL) boolean indicating, if the device was in uninterruptible sleep, if it was an IO sleep."}, {"name": "blocked_function", "type": "LONG", "table": null, "column": null, "desc": "If the `state` is uninterruptible sleep, `io_wait` indicates if it was an IO sleep. Will be null if `state` is *not* uninterruptible sleep or if we cannot tell if it was an IO sleep or not.  Only available on Android when `sched/sched_blocked_reason` ftrace tracepoint is enabled."}, {"name": "dur", "type": "DURATION", "table": null, "column": null, "desc": "The duration of time the threads slice spent for each (state, io_wait, blocked_function) tuple."}]}, {"name": "sched_time_in_state_and_cpu_for_thread_in_interval", "desc": "Time the thread spent each state and cpu in a given interval.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Time the thread spent each state and cpu in a given interval.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "ts", "type": "TIMESTAMP", "desc": "The start of the interval.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the interval.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "The utid of the thread.", "table": "thread", "column": "id"}], "cols": [{"name": "state", "type": "STRING", "table": null, "column": null, "desc": "Thread state (from the `thread_state` table). Use `sched_state_to_human_readable_string` function to get full name."}, {"name": "io_wait", "type": "BOOL", "table": null, "column": null, "desc": "A (posssibly NULL) boolean indicating, if the device was in uninterruptible sleep, if it was an IO sleep."}, {"name": "cpu", "type": "LONG", "table": null, "column": null, "desc": "Id of the CPU."}, {"name": "blocked_function", "type": "LONG", "table": null, "column": null, "desc": "Some states can specify the blocked function. Usually NULL."}, {"name": "dur", "type": "DURATION", "table": null, "column": null, "desc": "Total time spent with this state, cpu and blocked function."}]}, {"name": "sched_time_in_state_for_cpu_in_interval", "desc": "Time spent by CPU in each scheduling state in a provided interval.\n\n This function is only designed to run over a small number of intervals\n (10-100 at most). It will be *very slow* for large sets of intervals.", "summary_desc": "Time spent by CPU in each scheduling state in a provided interval.   This function is only designed to run over a small number of intervals  (10-100 at most)", "args": [{"name": "cpu", "type": "LONG", "desc": "CPU id.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "Interval start.", "table": null, "column": null}, {"name": "dur", "type": "LONG", "desc": "Interval duration.", "table": null, "column": null}], "cols": [{"name": "end_state", "type": "STRING", "table": null, "column": null, "desc": "End state. From `sched.end_state`."}, {"name": "dur", "type": "LONG", "table": null, "column": null, "desc": "Duration in state."}]}], "macros": []}, {"module_name": "sched.with_context", "data_objects": [{"name": "sched_with_thread_process", "desc": "View of scheduling slices with extended information.\n It holds slices with kernel thread scheduling information. These slices are\n collected when the Linux \"ftrace\" data source is used with the\n \"sched/switch\" and \"sched/wakeup*\" events enabled.\n\n The rows in this table will always have a matching row in the |thread_state|\n table with |thread_state.state| = 'Running'", "summary_desc": "View of scheduling slices with extended information.  It holds slices with kernel thread scheduling information", "type": "VIEW", "cols": [{"name": "id", "type": "ID(sched.id)", "desc": "Unique identifier for this scheduling slice (Running period).", "table": "sched", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp at the start of the Running period.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of the Running period.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Unique identifier of the thread that was running.", "table": "thread", "column": "id"}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread that was running.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Unique identifier of the process that the thread belongs to.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process that the thread belongs to.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The CPU that the slice executed on (meaningful only in single machine traces). For multi-machine, join with the `cpu` table on `ucpu` to get the CPU identifier of each machine.", "table": null, "column": null}, {"name": "end_state", "type": "STRING", "desc": "A string representing the scheduling state of the kernel thread at the end of the slice.  The individual characters in the string mean the following: R (runnable), S (awaiting a wakeup), D (in an uninterruptible sleep), T (suspended), t (being traced), X (exiting), P (parked), W (waking), I (idle), N (not contributing to the load average), K (wakeable on fatal signals) and Z (zombie, awaiting cleanup).", "table": null, "column": null}, {"name": "priority", "type": "LONG", "desc": "The kernel priority that the thread ran at.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "slices", "modules": [{"module_name": "slices.cpu_time", "data_objects": [{"name": "thread_slice_cpu_time", "desc": "Time each thread slice spent running on CPU.\n Requires scheduling data to be available in the trace.", "summary_desc": "Time each thread slice spent running on CPU.  Requires scheduling data to be available in the trace.", "type": "TABLE", "cols": [{"name": "id", "type": "JOINID(slice.id)", "desc": "Slice.", "table": "slice", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the slice.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Id of the thread the slice is running on.", "table": "thread", "column": "id"}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Id of the process the slice is running on.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process.", "table": null, "column": null}, {"name": "cpu_time", "type": "LONG", "desc": "Duration of the time the slice was running.", "table": null, "column": null}]}, {"name": "thread_slice_cpu_cycles", "desc": "CPU cycles per each slice.", "summary_desc": "CPU cycles per each slice.", "type": "VIEW", "cols": [{"name": "id", "type": "JOINID(slice.id)", "desc": "Id of a slice.", "table": "slice", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the slice.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Id of the thread the slice is running on.", "table": "thread", "column": "id"}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Id of the process the slice is running on.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process.", "table": null, "column": null}, {"name": "millicycles", "type": "LONG", "desc": "Sum of CPU millicycles. Null if frequency couldn't be fetched for any period during the runtime of the slice.", "table": null, "column": null}, {"name": "megacycles", "type": "LONG", "desc": "Sum of CPU megacycles. Null if frequency couldn't be fetched for any period during the runtime of the slice.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "slices.flat_slices", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "slices.flow", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "slices.hierarchy", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "slices.self_dur", "data_objects": [{"name": "slice_self_dur", "desc": "For every slice in the `slice` table, computes the \"self-duration\": the time\n spent in the slice but *not* spent in any child slices.", "summary_desc": "For every slice in the `slice` table, computes the \"self-duration\": the time  spent in the slice but *not* spent in any child slices.", "type": "TABLE", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "The id of the slice.", "table": "slice", "column": "id"}, {"name": "self_dur", "type": "DURATION", "desc": "The self duration for the slice: the time spent in the slice but not any child slices.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "slices.time_in_state", "data_objects": [{"name": "thread_slice_time_in_state", "desc": "For each thread slice, returns the sum of the time it spent in various\n scheduling states.\n\n Requires scheduling data to be available in the trace.", "summary_desc": "For each thread slice, returns the sum of the time it spent in various  scheduling states.   Requires scheduling data to be available in the trace.", "type": "TABLE", "cols": [{"name": "id", "type": "JOINID(slice.id)", "desc": "Thread slice.", "table": "slice", "column": "id"}, {"name": "name", "type": "STRING", "desc": "Name of the slice.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Thread the slice is running on.", "table": "thread", "column": "id"}, {"name": "thread_name", "type": "STRING", "desc": "Name of the thread.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Id of the process the slice is running on.", "table": "process", "column": "id"}, {"name": "process_name", "type": "STRING", "desc": "Name of the process.", "table": null, "column": null}, {"name": "state", "type": "STRING", "desc": "The scheduling state (from the `thread_state` table).  Use the `sched_state_to_human_readable_string` function in the `sched` package to get full name.", "table": null, "column": null}, {"name": "io_wait", "type": "BOOL", "desc": "If the `state` is uninterruptible sleep, `io_wait` indicates if it was an IO sleep. Will be null if `state` is *not* uninterruptible sleep or if we cannot tell if it was an IO sleep or not.  Only available on Android when `sched/sched_blocked_reason` ftrace tracepoint is enabled.", "table": null, "column": null}, {"name": "blocked_function", "type": "STRING", "desc": "If in uninterruptible sleep (D), the kernel function on which was blocked. Only available on userdebug Android builds when `sched/sched_blocked_reason` ftrace tracepoint is enabled.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "The duration of time the threads slice spent for each (state, io_wait, blocked_function) tuple.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}, {"module_name": "slices.with_context", "data_objects": [{"name": "thread_slice", "desc": "All thread slices with data about thread, thread track and process.", "summary_desc": "All thread slices with data about thread, thread track and process.", "type": "VIEW", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Slice", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias for `slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias for `slice.dur`.", "table": null, "column": null}, {"name": "category", "type": "STRING", "desc": "Alias for `slice.category`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Alias for `slice.name`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias for `slice.track_id`.", "table": "track", "column": "id"}, {"name": "track_name", "type": "STRING", "desc": "Alias for `thread_track.name`.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Alias for `thread.name`.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Alias for `thread.utid`.", "table": "thread", "column": "id"}, {"name": "tid", "type": "LONG", "desc": "Alias for `thread.tid`.", "table": null, "column": null}, {"name": "is_main_thread", "type": "BOOL", "desc": "Alias for `thread.is_main_thread`.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Alias for `process.name`.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Alias for `process.upid`.", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Alias for `process.pid`.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Alias for `slice.depth`.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(slice.id)", "desc": "Alias for `slice.parent_id`.", "table": "slice", "column": "id"}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Alias for `slice.arg_set_id`.", "table": null, "column": null}, {"name": "thread_ts", "type": "TIMESTAMP", "desc": "Alias for `slice.thread_ts`.", "table": null, "column": null}, {"name": "thread_dur", "type": "LONG", "desc": "Alias for `slice.thread_dur`.", "table": null, "column": null}]}, {"name": "process_slice", "desc": "All process slices with data about process track and process.", "summary_desc": "All process slices with data about process track and process.", "type": "VIEW", "cols": [{"name": "id", "type": "ID(slice.id)", "desc": "Slice", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias for `slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias for `slice.dur`.", "table": null, "column": null}, {"name": "category", "type": "STRING", "desc": "Alias for `slice.category`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Alias for `slice.name`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias for `slice.track_id`.", "table": "track", "column": "id"}, {"name": "track_name", "type": "STRING", "desc": "Alias for `process_track.name`.", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Alias for `process.name`.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Alias for `process.upid`.", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Alias for `process.pid`.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Alias for `slice.depth`.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(slice.id)", "desc": "Alias for `slice.parent_id`.", "table": "slice", "column": "id"}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Alias for `slice.arg_set_id`.", "table": null, "column": null}, {"name": "thread_ts", "type": "TIMESTAMP", "desc": "Alias for `slice.thread_ts`.", "table": null, "column": null}, {"name": "thread_dur", "type": "LONG", "desc": "Alias for `slice.thread_dur`.", "table": null, "column": null}]}, {"name": "thread_or_process_slice", "desc": "All the slices in the trace associated to a thread or a process along\n with contextual information about them (e.g. thread name, process name, tid etc).", "summary_desc": "All the slices in the trace associated to a thread or a process along  with contextual information about them (e.g", "type": "VIEW", "cols": [{"name": "id", "type": "JOINID(slice.id)", "desc": "Slice", "table": "slice", "column": "id"}, {"name": "ts", "type": "TIMESTAMP", "desc": "Alias for `slice.ts`.", "table": null, "column": null}, {"name": "dur", "type": "DURATION", "desc": "Alias for `slice.dur`.", "table": null, "column": null}, {"name": "category", "type": "STRING", "desc": "Alias for `slice.category`.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Alias for `slice.name`.", "table": null, "column": null}, {"name": "track_id", "type": "JOINID(track.id)", "desc": "Alias for `slice.track_id`.", "table": "track", "column": "id"}, {"name": "track_name", "type": "STRING", "desc": "Alias for `track.name`.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "Alias for `thread.name`.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "Alias for `thread.utid`.", "table": "thread", "column": "id"}, {"name": "tid", "type": "LONG", "desc": "Alias for `thread.tid`", "table": null, "column": null}, {"name": "process_name", "type": "STRING", "desc": "Alias for `process.name`.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Alias for `process.upid`.", "table": "process", "column": "id"}, {"name": "pid", "type": "LONG", "desc": "Alias for `process.pid`.", "table": null, "column": null}, {"name": "depth", "type": "LONG", "desc": "Alias for `slice.depth`.", "table": null, "column": null}, {"name": "parent_id", "type": "JOINID(slice.id)", "desc": "Alias for `slice.parent_id`.", "table": "slice", "column": "id"}, {"name": "arg_set_id", "type": "ARGSETID", "desc": "Alias for `slice.arg_set_id`.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "stack_trace", "modules": [{"module_name": "stack_trace.jit", "data_objects": [], "functions": [], "table_functions": [], "macros": []}]}, {"name": "stacks", "modules": [{"module_name": "stacks.cpu_profiling", "data_objects": [{"name": "cpu_profiling_samples", "desc": "Table containing all the timestamped samples of CPU profiling which occurred\n during the trace.\n\n Currently, this table is backed by the following data sources:\n  * Linux perf\n  * macOS instruments\n  * Chrome CPU profiling\n  * Legacy V8 CPU profiling\n  * Profiling data in Gecko traces", "summary_desc": "Table containing all the timestamped samples of CPU profiling which occurred  during the trace.   Currently, this table is backed by the following data sources:   * Linux perf   * macOS instruments   * Chrome CPU profiling   * Legacy V8 CPU profiling   * Profiling data in Gecko traces", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "The id of the sample.", "table": null, "column": null}, {"name": "ts", "type": "TIMESTAMP", "desc": "The timestamp of the sample.", "table": null, "column": null}, {"name": "utid", "type": "JOINID(thread.id)", "desc": "The utid of the thread of the sample, if available.", "table": "thread", "column": "id"}, {"name": "tid", "type": "LONG", "desc": "The tid of the sample, if available.", "table": null, "column": null}, {"name": "thread_name", "type": "STRING", "desc": "The thread name of thread of the sample, if available.", "table": null, "column": null}, {"name": "ucpu", "type": "LONG", "desc": "The ucpu of the sample, if available.", "table": null, "column": null}, {"name": "cpu", "type": "LONG", "desc": "The cpu of the sample, if available.", "table": null, "column": null}, {"name": "callsite_id", "type": "LONG", "desc": "The callsite id of the sample.", "table": null, "column": null}]}, {"name": "cpu_profiling_summary_tree", "desc": "Table summarising the callstacks captured during any CPU profiling which\n occurred during the trace.\n\n Specifically, this table returns a tree containing all the callstacks seen\n during the trace with `self_count` equal to the number of samples with that\n frame as the leaf and `cumulative_count` equal to the number of samples with\n the frame anywhere in the tree.\n\n The data sources supported are the same as the `cpu_profiling_samples` table.", "summary_desc": "Table summarising the callstacks captured during any CPU profiling which  occurred during the trace.   Specifically, this table returns a tree containing all the callstacks seen  during the trace with `self_count` equal to the number of samples with that  frame as the leaf and `cumulative_count` equal to the number of samples with  the frame anywhere in the tree.   The data sources supported are the same as the `cpu_profiling_samples` table.", "type": "TABLE", "cols": [{"name": "id", "type": "LONG", "desc": "The id of the callstack; by callstack we mean a unique set of frames up to the root frame.", "table": null, "column": null}, {"name": "parent_id", "type": "LONG", "desc": "The id of the parent callstack for this callstack. NULL if this is root.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "The function name of the frame for this callstack.", "table": null, "column": null}, {"name": "mapping_name", "type": "STRING", "desc": "The name of the mapping containing the frame. This can be a native binary, library, JAR or APK.", "table": null, "column": null}, {"name": "source_file", "type": "STRING", "desc": "The name of the file containing the function.", "table": null, "column": null}, {"name": "line_number", "type": "LONG", "desc": "The line number in the file the function is located at.", "table": null, "column": null}, {"name": "self_count", "type": "LONG", "desc": "The number of samples with this function as the leaf frame.", "table": null, "column": null}, {"name": "cumulative_count", "type": "LONG", "desc": "The number of samples with this function appearing anywhere on the callstack.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "time", "modules": [{"module_name": "time.conversion", "data_objects": [], "functions": [{"name": "time_from_ns", "desc": "Returns the provided nanosecond duration, which is the default\n representation of time durations in trace processor. Provided for\n consistency with other functions.", "summary_desc": "Returns the provided nanosecond duration, which is the default  representation of time durations in trace processor", "args": [{"name": "nanos", "type": "LONG", "desc": "Time duration in nanoseconds.", "table": null, "column": null}], "return_type": "TIMESTAMP", "return_desc": "Time duration in nanoseconds."}, {"name": "time_from_us", "desc": "Converts a duration in microseconds to nanoseconds, which is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in microseconds to nanoseconds, which is the default  representation of time durations in trace processor.", "args": [{"name": "micros", "type": "LONG", "desc": "Time duration in microseconds.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in nanoseconds."}, {"name": "time_from_ms", "desc": "Converts a duration in millseconds to nanoseconds, which is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in millseconds to nanoseconds, which is the default  representation of time durations in trace processor.", "args": [{"name": "millis", "type": "LONG", "desc": "Time duration in milliseconds.", "table": null, "column": null}], "return_type": "TIMESTAMP", "return_desc": "Time duration in nanoseconds."}, {"name": "time_from_s", "desc": "Converts a duration in seconds to nanoseconds, which is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in seconds to nanoseconds, which is the default  representation of time durations in trace processor.", "args": [{"name": "seconds", "type": "LONG", "desc": "Time duration in seconds.", "table": null, "column": null}], "return_type": "TIMESTAMP", "return_desc": "Time duration in nanoseconds."}, {"name": "time_from_min", "desc": "Converts a duration in minutes to nanoseconds, which is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in minutes to nanoseconds, which is the default  representation of time durations in trace processor.", "args": [{"name": "minutes", "type": "LONG", "desc": "Time duration in minutes.", "table": null, "column": null}], "return_type": "TIMESTAMP", "return_desc": "Time duration in nanoseconds."}, {"name": "time_from_hours", "desc": "Converts a duration in hours to nanoseconds, which is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in hours to nanoseconds, which is the default  representation of time durations in trace processor.", "args": [{"name": "hours", "type": "LONG", "desc": "Time duration in hours.", "table": null, "column": null}], "return_type": "TIMESTAMP", "return_desc": "Time duration in nanoseconds."}, {"name": "time_from_days", "desc": "Converts a duration in days to nanoseconds, which is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in days to nanoseconds, which is the default  representation of time durations in trace processor.", "args": [{"name": "days", "type": "LONG", "desc": "Time duration in days.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in nanoseconds."}, {"name": "time_to_ns", "desc": "Returns the provided nanosecond duration, which is the default\n representation of time durations in trace processor. Provided for\n consistency with other functions.", "summary_desc": "Returns the provided nanosecond duration, which is the default  representation of time durations in trace processor", "args": [{"name": "nanos", "type": "TIMESTAMP", "desc": "Time duration in nanoseconds.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in nanoseconds."}, {"name": "time_to_us", "desc": "Converts a duration in nanoseconds to microseconds. Nanoseconds is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in nanoseconds to microseconds", "args": [{"name": "nanos", "type": "TIMESTAMP", "desc": "Time duration in nanoseconds.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in microseconds."}, {"name": "time_to_ms", "desc": "Converts a duration in nanoseconds to millseconds. Nanoseconds is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in nanoseconds to millseconds", "args": [{"name": "nanos", "type": "TIMESTAMP", "desc": "Time duration in nanoseconds.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in milliseconds."}, {"name": "time_to_s", "desc": "Converts a duration in nanoseconds to seconds. Nanoseconds is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in nanoseconds to seconds", "args": [{"name": "nanos", "type": "TIMESTAMP", "desc": "Time duration in nanoseconds.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in seconds."}, {"name": "time_to_min", "desc": "Converts a duration in nanoseconds to minutes. Nanoseconds is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in nanoseconds to minutes", "args": [{"name": "nanos", "type": "TIMESTAMP", "desc": "Time duration in nanoseconds.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in minutes."}, {"name": "time_to_hours", "desc": "Converts a duration in nanoseconds to hours. Nanoseconds is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in nanoseconds to hours", "args": [{"name": "nanos", "type": "TIMESTAMP", "desc": "Time duration in nanoseconds.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in hours."}, {"name": "time_to_days", "desc": "Converts a duration in nanoseconds to days. Nanoseconds is the default\n representation of time durations in trace processor.", "summary_desc": "Converts a duration in nanoseconds to days", "args": [{"name": "nanos", "type": "TIMESTAMP", "desc": "Time duration in nanoseconds.", "table": null, "column": null}], "return_type": "LONG", "return_desc": "Time duration in days."}], "table_functions": [], "macros": []}]}, {"name": "traced", "modules": [{"module_name": "traced.stats", "data_objects": [{"name": "traced_clone_flush_latency", "desc": "Reports the duration of the flush operation for cloned traces (for each\n buffer).", "summary_desc": "Reports the duration of the flush operation for cloned traces (for each  buffer).", "type": "TABLE", "cols": [{"name": "buffer_id", "type": "LONG", "desc": "Id of the buffer (matches the config).", "table": null, "column": null}, {"name": "duration_ns", "type": "LONG", "desc": "Interval from the start of the clone operation to the end of the flush for this buffer.", "table": null, "column": null}]}, {"name": "traced_trigger_clone_flush_latency", "desc": "Reports the delay in finalizing the trace from the trigger that causes the\n clone operation.", "summary_desc": "Reports the delay in finalizing the trace from the trigger that causes the  clone operation.", "type": "TABLE", "cols": [{"name": "buffer_id", "type": "LONG", "desc": "Id of the buffer.", "table": null, "column": null}, {"name": "duration_ns", "type": "LONG", "desc": "Interval from the trigger that caused the clone operation to the end of the flush for this buffer.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "v8", "modules": [{"module_name": "v8.jit", "data_objects": [{"name": "v8_isolate", "desc": "A V8 Isolate instance. A V8 Isolate represents an isolated instance of the V8\n engine.", "summary_desc": "A V8 Isolate instance", "type": "VIEW", "cols": [{"name": "v8_isolate_id", "type": "LONG", "desc": "Unique V8 isolate id.", "table": null, "column": null}, {"name": "upid", "type": "JOINID(process.id)", "desc": "Process the isolate was created in.", "table": "process", "column": "id"}, {"name": "internal_isolate_id", "type": "LONG", "desc": "Internal id used by the v8 engine. Unique in a process.", "table": null, "column": null}, {"name": "embedded_blob_code_start_address", "type": "LONG", "desc": "Absolute start address of the embedded code blob.", "table": null, "column": null}, {"name": "embedded_blob_code_size", "type": "LONG", "desc": "Size in bytes of the embedded code blob.", "table": null, "column": null}, {"name": "code_range_base_address", "type": "LONG", "desc": "Base address of the code range if the isolate defines one.", "table": null, "column": null}, {"name": "code_range_size", "type": "LONG", "desc": "Size of a code range if the isolate defines one.", "table": null, "column": null}, {"name": "shared_code_range", "type": "LONG", "desc": "Whether the code range for this Isolate is shared with others in the same process. There is at max one such shared code range per process.", "table": null, "column": null}, {"name": "embedded_blob_code_copy_start_address", "type": "LONG", "desc": "Used when short builtin calls are enabled, where embedded builtins are copied into the CodeRange so calls can be nearer.", "table": null, "column": null}]}, {"name": "v8_js_script", "desc": "Represents a script that was compiled to generate code. Some V8 code is\n generated out of scripts and will reference a V8Script other types of code\n will not (e.g. builtins).", "summary_desc": "Represents a script that was compiled to generate code", "type": "VIEW", "cols": [{"name": "v8_js_script_id", "type": "LONG", "desc": "Unique V8 JS script id.", "table": null, "column": null}, {"name": "v8_isolate_id", "type": "LONG", "desc": "V8 isolate this script belongs to (joinable with `v8_isolate.v8_isolate_id`).", "table": null, "column": null}, {"name": "internal_script_id", "type": "LONG", "desc": "Script id used by the V8 engine.", "table": null, "column": null}, {"name": "script_type", "type": "STRING", "desc": "Script type.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Script name.", "table": null, "column": null}, {"name": "source", "type": "STRING", "desc": "Actual contents of the script.", "table": null, "column": null}]}, {"name": "v8_wasm_script", "desc": "Represents one WASM script.", "summary_desc": "Represents one WASM script.", "type": "VIEW", "cols": [{"name": "v8_wasm_script_id", "type": "LONG", "desc": "Unique V8 WASM script id.", "table": null, "column": null}, {"name": "v8_isolate_id", "type": "LONG", "desc": "V8 Isolate this script belongs to (joinable with `v8_isolate.v8_isolate_id`).", "table": null, "column": null}, {"name": "internal_script_id", "type": "LONG", "desc": "Script id used by the V8 engine.", "table": null, "column": null}, {"name": "url", "type": "STRING", "desc": "URL of the source.", "table": null, "column": null}, {"name": "wire_bytes", "type": "BYTES", "desc": "Raw wire bytes of the script.", "table": null, "column": null}, {"name": "source", "type": "STRING", "desc": "Actual source code of the script.", "table": null, "column": null}]}, {"name": "v8_js_function", "desc": "Represents a v8 Javascript function.", "summary_desc": "Represents a v8 Javascript function.", "type": "VIEW", "cols": [{"name": "v8_js_function_id", "type": "LONG", "desc": "Unique V8 JS function id.", "table": null, "column": null}, {"name": "name", "type": "STRING", "desc": "Function name.", "table": null, "column": null}, {"name": "v8_js_script_id", "type": "LONG", "desc": "Script where the function is defined (joinable with `v8_js_script.v8_js_script_id`).", "table": null, "column": null}, {"name": "is_toplevel", "type": "BOOL", "desc": "Whether this function represents the top level script.", "table": null, "column": null}, {"name": "kind", "type": "STRING", "desc": "Function kind (e.g. regular function or constructor).", "table": null, "column": null}, {"name": "line", "type": "LONG", "desc": "Line in script where function is defined. Starts at 1.", "table": null, "column": null}, {"name": "col", "type": "LONG", "desc": "Column in script where function is defined. Starts at 1.", "table": null, "column": null}]}], "functions": [], "table_functions": [], "macros": []}]}, {"name": "viz", "modules": [{"module_name": "viz.flamegraph", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "viz.slices", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "viz.summary.counters", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "viz.summary.processes", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "viz.summary.slices", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "viz.summary.threads", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "viz.summary.trace", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "viz.summary.track_event", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "viz.threads", "data_objects": [], "functions": [], "table_functions": [], "macros": []}]}, {"name": "wattson", "modules": [{"module_name": "wattson.cpu.arm_dsu", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.cpu.estimates", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.cpu.freq", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.cpu.freq_idle", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.cpu.hotplug", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.cpu.idle", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.cpu.pivot", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.device_cpu_1d", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.device_cpu_2d", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.device_gpu", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.device_l3", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.tg5_cpu_1d", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.tg5_cpu_2d", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.tg5_cpu_2d_1", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.tg5_cpu_2d_2", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.tg5_l3", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.curves.utils", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.device_infos", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.estimates", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.gpu.estimates", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.gpu.freq_idle", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.tasks.attribution", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.tasks.idle_transitions_attribution", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.tasks.task_slices", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.ui.continuous_estimates", "data_objects": [], "functions": [], "table_functions": [], "macros": []}, {"module_name": "wattson.utils", "data_objects": [], "functions": [], "table_functions": [], "macros": []}]}]